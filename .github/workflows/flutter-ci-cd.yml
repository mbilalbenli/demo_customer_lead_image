name: Flutter CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/minimal-app-redesign ]
    paths:
      - 'app/**'
      - '.github/workflows/flutter-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**'

env:
  FLUTTER_VERSION: '3.24.0'
  WORKING_DIRECTORY: './app'

jobs:
  test:
    name: Test Flutter App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Generate localization files
      run: flutter gen-l10n

    - name: Generate code (build_runner)
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Verify formatting
      run: dart format --set-exit-if-changed .

    - name: Analyze code
      run: flutter analyze --fatal-infos

    - name: Run unit tests
      run: flutter test --coverage

    - name: Generate test report
      uses: dorny/test-reporter@v1.7.0
      if: success() || failure()
      with:
        name: Flutter Tests
        path: app/test-results.json
        reporter: flutter-json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: app/coverage/lcov.info
        directory: app/coverage/
        flags: flutter
        name: flutter-coverage

  build-web:
    name: Build Flutter Web
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Generate localization files
      run: flutter gen-l10n

    - name: Generate code (build_runner)
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Build Flutter Web
      run: |
        flutter build web \
          --release \
          --web-renderer canvaskit \
          --source-maps \
          --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://unpkg.com/canvaskit-wasm@latest/bin/

    - name: Optimize build artifacts
      run: |
        # Compress JavaScript files
        find build/web -name "*.js" -exec gzip -k {} \;
        # Compress CSS files
        find build/web -name "*.css" -exec gzip -k {} \;

    - name: Upload web build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: flutter-web-build
        path: app/build/web/
        retention-days: 30

  build-mobile:
    name: Build Mobile Apps
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    strategy:
      matrix:
        platform: [android, ios]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Setup Java (for Android)
      if: matrix.platform == 'android'
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Xcode (for iOS)
      if: matrix.platform == 'ios' && runner.os == 'macOS'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: flutter pub get

    - name: Generate localization files
      run: flutter gen-l10n

    - name: Generate code (build_runner)
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Build Android APK
      if: matrix.platform == 'android'
      run: |
        flutter build apk \
          --release \
          --split-per-abi \
          --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://unpkg.com/canvaskit-wasm@latest/bin/

    - name: Build Android App Bundle
      if: matrix.platform == 'android'
      run: |
        flutter build appbundle \
          --release \
          --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://unpkg.com/canvaskit-wasm@latest/bin/

    - name: Build iOS (if on macOS)
      if: matrix.platform == 'ios' && runner.os == 'macOS'
      run: |
        flutter build ios \
          --release \
          --no-codesign \
          --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://unpkg.com/canvaskit-wasm@latest/bin/

    - name: Upload Android artifacts
      if: matrix.platform == 'android'
      uses: actions/upload-artifact@v3
      with:
        name: android-builds
        path: |
          app/build/app/outputs/flutter-apk/
          app/build/app/outputs/bundle/
        retention-days: 30

    - name: Upload iOS artifacts
      if: matrix.platform == 'ios' && runner.os == 'macOS'
      uses: actions/upload-artifact@v3
      with:
        name: ios-builds
        path: app/build/ios/iphoneos/
        retention-days: 30

  deploy-web:
    name: Deploy Flutter Web
    runs-on: ubuntu-latest
    needs: [build-web]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Download web build artifacts
      uses: actions/download-artifact@v3
      with:
        name: flutter-web-build
        path: ./web-build

    - name: Deploy to production
      run: |
        # Add your deployment script here
        # Example: Deploy to Firebase Hosting, Netlify, or your own server
        echo "Deploying Flutter web app to production..."

        # Example Firebase deployment:
        # npm install -g firebase-tools
        # firebase deploy --only hosting --project your-project-id

        # Example Netlify deployment:
        # npm install -g netlify-cli
        # netlify deploy --prod --dir ./web-build

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-web]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download web build artifacts
      uses: actions/download-artifact@v3
      with:
        name: flutter-web-build
        path: ./web-build

    - name: Setup Node.js for Lighthouse
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Serve Flutter web app
      run: |
        npx http-server ./web-build -p 8080 &
        sleep 10

    - name: Run Lighthouse CI
      run: |
        lhci autorun \
          --upload.target=temporary-public-storage \
          --collect.url=http://localhost:8080 \
          --collect.settings.chromeFlags="--no-sandbox" \
          --assert.assertions.categories:performance=0.8 \
          --assert.assertions.categories:accessibility=0.9 \
          --assert.assertions.categories:best-practices=0.8 \
          --assert.assertions.categories:seo=0.8

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run dependency audit
      run: |
        flutter pub deps --json > dependencies.json
        # Add security scanning tools here
        # Example: Use snyk, safety, or other security tools

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD