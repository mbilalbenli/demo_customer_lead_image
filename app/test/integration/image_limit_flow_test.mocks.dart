// Mocks generated by Mockito 5.4.6 from annotations
// in app/test/integration/image_limit_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app/features/lead_image/domain/entities/lead_image_entity.dart'
    as _i5;
import 'package:app/features/lead_image/domain/repositories/lead_image_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LeadImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeadImageRepository extends _i1.Mock
    implements _i3.LeadImageRepository {
  MockLeadImageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.LeadImageEntity>>>
  getImagesByLeadId(String? leadId, {int? page = 1, int? pageSize = 5}) =>
      (super.noSuchMethod(
            Invocation.method(
              #getImagesByLeadId,
              [leadId],
              {#page: page, #pageSize: pageSize},
            ),
            returnValue:
                _i4.Future<
                  _i2.Either<Exception, List<_i5.LeadImageEntity>>
                >.value(
                  _FakeEither_0<Exception, List<_i5.LeadImageEntity>>(
                    this,
                    Invocation.method(
                      #getImagesByLeadId,
                      [leadId],
                      {#page: page, #pageSize: pageSize},
                    ),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<Exception, List<_i5.LeadImageEntity>>>);

  @override
  _i4.Future<_i2.Either<Exception, _i5.LeadImageEntity>> getImageById(
    String? imageId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getImageById, [imageId]),
            returnValue:
                _i4.Future<_i2.Either<Exception, _i5.LeadImageEntity>>.value(
                  _FakeEither_0<Exception, _i5.LeadImageEntity>(
                    this,
                    Invocation.method(#getImageById, [imageId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<Exception, _i5.LeadImageEntity>>);

  @override
  _i4.Future<_i2.Either<Exception, _i5.LeadImageEntity>> uploadImage({
    required String? leadId,
    required String? base64Data,
    required String? fileName,
    required String? contentType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadImage, [], {
              #leadId: leadId,
              #base64Data: base64Data,
              #fileName: fileName,
              #contentType: contentType,
            }),
            returnValue:
                _i4.Future<_i2.Either<Exception, _i5.LeadImageEntity>>.value(
                  _FakeEither_0<Exception, _i5.LeadImageEntity>(
                    this,
                    Invocation.method(#uploadImage, [], {
                      #leadId: leadId,
                      #base64Data: base64Data,
                      #fileName: fileName,
                      #contentType: contentType,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<Exception, _i5.LeadImageEntity>>);

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.LeadImageEntity>>>
  uploadMultipleImages({
    required String? leadId,
    required List<Map<String, String>>? images,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadMultipleImages, [], {
              #leadId: leadId,
              #images: images,
            }),
            returnValue:
                _i4.Future<
                  _i2.Either<Exception, List<_i5.LeadImageEntity>>
                >.value(
                  _FakeEither_0<Exception, List<_i5.LeadImageEntity>>(
                    this,
                    Invocation.method(#uploadMultipleImages, [], {
                      #leadId: leadId,
                      #images: images,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<Exception, List<_i5.LeadImageEntity>>>);

  @override
  _i4.Future<_i2.Either<Exception, void>> deleteImage(String? imageId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteImage, [imageId]),
            returnValue: _i4.Future<_i2.Either<Exception, void>>.value(
              _FakeEither_0<Exception, void>(
                this,
                Invocation.method(#deleteImage, [imageId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<Exception, void>>);

  @override
  _i4.Future<_i2.Either<Exception, int>> getImageCount(String? leadId) =>
      (super.noSuchMethod(
            Invocation.method(#getImageCount, [leadId]),
            returnValue: _i4.Future<_i2.Either<Exception, int>>.value(
              _FakeEither_0<Exception, int>(
                this,
                Invocation.method(#getImageCount, [leadId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<Exception, int>>);

  @override
  _i4.Future<_i2.Either<Exception, bool>> canAddImage(String? leadId) =>
      (super.noSuchMethod(
            Invocation.method(#canAddImage, [leadId]),
            returnValue: _i4.Future<_i2.Either<Exception, bool>>.value(
              _FakeEither_0<Exception, bool>(
                this,
                Invocation.method(#canAddImage, [leadId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<Exception, bool>>);

  @override
  _i4.Future<_i2.Either<Exception, Map<String, dynamic>>> getImageStatus(
    String? leadId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getImageStatus, [leadId]),
            returnValue:
                _i4.Future<_i2.Either<Exception, Map<String, dynamic>>>.value(
                  _FakeEither_0<Exception, Map<String, dynamic>>(
                    this,
                    Invocation.method(#getImageStatus, [leadId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<Exception, Map<String, dynamic>>>);

  @override
  _i4.Future<_i2.Either<Exception, void>> reorderImages({
    required String? leadId,
    required List<String>? imageIds,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#reorderImages, [], {
              #leadId: leadId,
              #imageIds: imageIds,
            }),
            returnValue: _i4.Future<_i2.Either<Exception, void>>.value(
              _FakeEither_0<Exception, void>(
                this,
                Invocation.method(#reorderImages, [], {
                  #leadId: leadId,
                  #imageIds: imageIds,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<Exception, void>>);

  @override
  _i4.Future<_i2.Either<Exception, void>> clearImageCache(String? leadId) =>
      (super.noSuchMethod(
            Invocation.method(#clearImageCache, [leadId]),
            returnValue: _i4.Future<_i2.Either<Exception, void>>.value(
              _FakeEither_0<Exception, void>(
                this,
                Invocation.method(#clearImageCache, [leadId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<Exception, void>>);

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.LeadImageEntity>>> getCachedImages(
    String? leadId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedImages, [leadId]),
            returnValue:
                _i4.Future<
                  _i2.Either<Exception, List<_i5.LeadImageEntity>>
                >.value(
                  _FakeEither_0<Exception, List<_i5.LeadImageEntity>>(
                    this,
                    Invocation.method(#getCachedImages, [leadId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<Exception, List<_i5.LeadImageEntity>>>);

  @override
  _i4.Future<_i2.Either<Exception, void>> cacheImage(
    _i5.LeadImageEntity? image,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheImage, [image]),
            returnValue: _i4.Future<_i2.Either<Exception, void>>.value(
              _FakeEither_0<Exception, void>(
                this,
                Invocation.method(#cacheImage, [image]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<Exception, void>>);
}
