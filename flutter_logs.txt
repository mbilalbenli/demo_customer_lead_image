2025-09-17 18:42:25.510 | warn: Microsoft.AspNetCore.Hosting.Diagnostics[15]
2025-09-17 18:42:25.510 |       Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'http://+:5000'.
2025-09-17 18:42:25.562 | info: Microsoft.Hosting.Lifetime[14]
2025-09-17 18:42:25.562 |       Now listening on: http://[::]:5000
2025-09-17 18:42:25.562 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 18:42:25.562 |       Application started. Press Ctrl+C to shut down.
2025-09-17 18:42:25.562 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 18:42:25.562 |       Hosting environment: Development
2025-09-17 18:42:25.562 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 18:42:25.562 |       Content root path: /app
2025-09-17 18:45:58.306 | warn: LuckyPennySoftware.MediatR.License[0]
2025-09-17 18:45:58.306 |       You do not have a valid license key for the Lucky Penny software MediatR. This is allowed for development and testing scenarios. If you are running in production you are required to have a licensed version. Please visit https://luckypennysoftware.com to obtain a valid license.
2025-09-17 18:46:02.439 | info: Npgsql.Command[2001]
2025-09-17 18:46:02.439 |       Batch execution completed (duration=26ms): [
2025-09-17 18:46:02.439 |       SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.439 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.439 |                    ,n.nspname
2025-09-17 18:46:02.439 |                    ,p.proname
2025-09-17 18:46:02.439 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.439 |       FROM   pg_proc p
2025-09-17 18:46:02.439 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.439 |       WHERE  p.proname = $1
2025-09-17 18:46:02.439 |       AND    n.nspname = $2]
2025-09-17 18:46:02.543 | info: Npgsql.Command[2001]
2025-09-17 18:46:02.543 |       Batch execution completed (duration=90ms): [
2025-09-17 18:46:02.543 |       select column_name, data_type, character_maximum_length, udt_name
2025-09-17 18:46:02.543 |       from information_schema.columns where table_schema = $1 and table_name = $2
2025-09-17 18:46:02.543 |       order by ordinal_position, select kcu.column_name as key_column
2025-09-17 18:46:02.543 |       from information_schema.table_constraints tco
2025-09-17 18:46:02.543 |                join information_schema.key_column_usage kcu
2025-09-17 18:46:02.543 |                     on kcu.constraint_name = tco.constraint_name
2025-09-17 18:46:02.543 |                         and kcu.constraint_schema = tco.constraint_schema
2025-09-17 18:46:02.543 |                         and kcu.constraint_name = tco.constraint_name
2025-09-17 18:46:02.543 |       where tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2
2025-09-17 18:46:02.543 |       order by kcu.ordinal_position, SELECT *
2025-09-17 18:46:02.543 |       FROM (
2025-09-17 18:46:02.543 |           SELECT
2025-09-17 18:46:02.543 |             R.rolname                AS user_name,
2025-09-17 18:46:02.543 |             ns.nspname               AS schema_name,
2025-09-17 18:46:02.543 |             pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,
2025-09-17 18:46:02.543 |             i.relname                AS index_name,
2025-09-17 18:46:02.543 |             pg_get_indexdef(i.oid) as ddl,
2025-09-17 18:46:02.543 |             idx.indisunique          AS is_unique,
2025-09-17 18:46:02.543 |             idx.indisprimary         AS is_primary,
2025-09-17 18:46:02.543 |             am.amname                AS index_type,
2025-09-17 18:46:02.543 |             idx.indkey,
2025-09-17 18:46:02.543 |                  ARRAY(
2025-09-17 18:46:02.543 |                      SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)
2025-09-17 18:46:02.543 |                      FROM
2025-09-17 18:46:02.543 |                        generate_subscripts(idx.indkey, 1) AS k
2025-09-17 18:46:02.543 |                      ORDER BY k
2025-09-17 18:46:02.543 |                  ) AS index_keys,
2025-09-17 18:46:02.543 |             (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,
2025-09-17 18:46:02.543 |             idx.indpred IS NOT NULL AS is_partial
2025-09-17 18:46:02.543 |           FROM pg_index AS idx
2025-09-17 18:46:02.543 |             JOIN pg_class AS i
2025-09-17 18:46:02.543 |               ON i.oid = idx.indexrelid
2025-09-17 18:46:02.543 |             JOIN pg_am AS am
2025-09-17 18:46:02.543 |               ON i.relam = am.oid
2025-09-17 18:46:02.543 |             JOIN pg_namespace AS NS ON i.relnamespace = NS.OID
2025-09-17 18:46:02.543 |             JOIN pg_roles AS R ON i.relowner = r.oid
2025-09-17 18:46:02.543 |           WHERE
2025-09-17 18:46:02.543 |             nspname = $1 AND
2025-09-17 18:46:02.543 |             NOT nspname LIKE 'pg%'
2025-09-17 18:46:02.543 |       ) ind
2025-09-17 18:46:02.543 |       WHERE
2025-09-17 18:46:02.543 |             ind.table_name = $2 OR
2025-09-17 18:46:02.543 |             ind.table_name = $3, SELECT c.conname                                     AS constraint_name,
2025-09-17 18:46:02.543 |              c.contype                                     AS constraint_type,
2025-09-17 18:46:02.543 |              sch.nspname                                   AS schema_name,
2025-09-17 18:46:02.543 |              tbl.relname                                   AS table_name,
2025-09-17 18:46:02.543 |              ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,
2025-09-17 18:46:02.543 |              pg_get_constraintdef(c.oid)                   AS definition
2025-09-17 18:46:02.543 |       FROM pg_constraint c
2025-09-17 18:46:02.543 |              JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE
2025-09-17 18:46:02.543 |              JOIN pg_class tbl ON tbl.oid = c.conrelid
2025-09-17 18:46:02.543 |              JOIN pg_namespace sch ON sch.oid = tbl.relnamespace
2025-09-17 18:46:02.543 |              JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)
2025-09-17 18:46:02.543 |       WHERE
2025-09-17 18:46:02.543 |       	c.contype = 'f' and
2025-09-17 18:46:02.543 |       	sch.nspname = $1 and
2025-09-17 18:46:02.543 |       	tbl.relname = $2
2025-09-17 18:46:02.543 |       GROUP BY constraint_name, constraint_type, schema_name, table_name, definition, SHOW max_identifier_length, select
2025-09-17 18:46:02.543 |           col.column_name,
2025-09-17 18:46:02.543 |           partition_strategy
2025-09-17 18:46:02.543 |       from
2025-09-17 18:46:02.543 |           (select
2025-09-17 18:46:02.543 |                partrelid,
2025-09-17 18:46:02.543 |                partnatts,
2025-09-17 18:46:02.543 |                case partstrat
2025-09-17 18:46:02.543 |                    when 'l' then 'list'
2025-09-17 18:46:02.543 |                    when 'h' then 'hash'
2025-09-17 18:46:02.543 |                    when 'r' then 'range' end as partition_strategy,
2025-09-17 18:46:02.543 |                unnest(partattrs) column_index
2025-09-17 18:46:02.543 |            from
2025-09-17 18:46:02.543 |                pg_partitioned_table) pt
2025-09-17 18:46:02.543 |               join
2025-09-17 18:46:02.543 |           pg_class par
2025-09-17 18:46:02.543 |           on
2025-09-17 18:46:02.543 |                   par.oid = pt.partrelid
2025-09-17 18:46:02.543 |               join
2025-09-17 18:46:02.543 |           information_schema.columns col
2025-09-17 18:46:02.543 |           on
2025-09-17 18:46:02.543 |                       col.table_schema = par.relnamespace::regnamespace::text
2025-09-17 18:46:02.543 |                   and col.table_name = par.relname
2025-09-17 18:46:02.543 |                   and ordinal_position = pt.column_index
2025-09-17 18:46:02.543 |       where
2025-09-17 18:46:02.543 |           col.table_schema = $1 and table_name = $2
2025-09-17 18:46:02.543 |       order by column_index, select pt.relname as partition_name,
2025-09-17 18:46:02.543 |                 pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression
2025-09-17 18:46:02.543 |          from pg_class base_tb
2025-09-17 18:46:02.543 |                   join pg_inherits i on i.inhparent = base_tb.oid
2025-09-17 18:46:02.543 |                   join pg_class pt on pt.oid = i.inhrelid
2025-09-17 18:46:02.543 |          where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.543 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.543 |                    ,n.nspname
2025-09-17 18:46:02.544 |                    ,p.proname
2025-09-17 18:46:02.544 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.544 |       FROM   pg_proc p
2025-09-17 18:46:02.544 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.544 |       WHERE  p.proname = $1
2025-09-17 18:46:02.544 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.544 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.544 |                    ,n.nspname
2025-09-17 18:46:02.544 |                    ,p.proname
2025-09-17 18:46:02.544 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.544 |       FROM   pg_proc p
2025-09-17 18:46:02.544 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.544 |       WHERE  p.proname = $1
2025-09-17 18:46:02.544 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:02.544 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:02.544 |                    ,n.nspname
2025-09-17 18:46:02.544 |                    ,p.proname
2025-09-17 18:46:02.544 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:02.544 |       FROM   pg_proc p
2025-09-17 18:46:02.544 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:02.544 |       WHERE  p.proname = $1
2025-09-17 18:46:02.544 |       AND    n.nspname = $2]
2025-09-17 18:46:02.569 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:02.569 |       Marten executed in 4.1478 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d;
2025-09-17 18:46:02.569 |       
2025-09-17 18:46:02.595 | info: Npgsql.Command[2001]
2025-09-17 18:46:02.596 |       Command execution completed (duration=35ms): select d.id, d.data from public.mt_doc_leaddocument as d
2025-09-17 18:46:03.116 | info: Npgsql.Command[2001]
2025-09-17 18:46:03.116 |       Batch execution completed (duration=27ms): [
2025-09-17 18:46:03.116 |       select column_name, data_type, character_maximum_length, udt_name
2025-09-17 18:46:03.116 |       from information_schema.columns where table_schema = $1 and table_name = $2
2025-09-17 18:46:03.116 |       order by ordinal_position, select kcu.column_name as key_column
2025-09-17 18:46:03.116 |       from information_schema.table_constraints tco
2025-09-17 18:46:03.116 |                join information_schema.key_column_usage kcu
2025-09-17 18:46:03.116 |                     on kcu.constraint_name = tco.constraint_name
2025-09-17 18:46:03.116 |                         and kcu.constraint_schema = tco.constraint_schema
2025-09-17 18:46:03.116 |                         and kcu.constraint_name = tco.constraint_name
2025-09-17 18:46:03.116 |       where tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2
2025-09-17 18:46:03.116 |       order by kcu.ordinal_position, SELECT *
2025-09-17 18:46:03.116 |       FROM (
2025-09-17 18:46:03.116 |           SELECT
2025-09-17 18:46:03.116 |             R.rolname                AS user_name,
2025-09-17 18:46:03.117 |             ns.nspname               AS schema_name,
2025-09-17 18:46:03.117 |             pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,
2025-09-17 18:46:03.117 |             i.relname                AS index_name,
2025-09-17 18:46:03.117 |             pg_get_indexdef(i.oid) as ddl,
2025-09-17 18:46:03.117 |             idx.indisunique          AS is_unique,
2025-09-17 18:46:03.117 |             idx.indisprimary         AS is_primary,
2025-09-17 18:46:03.117 |             am.amname                AS index_type,
2025-09-17 18:46:03.117 |             idx.indkey,
2025-09-17 18:46:03.117 |                  ARRAY(
2025-09-17 18:46:03.117 |                      SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)
2025-09-17 18:46:03.117 |                      FROM
2025-09-17 18:46:03.117 |                        generate_subscripts(idx.indkey, 1) AS k
2025-09-17 18:46:03.117 |                      ORDER BY k
2025-09-17 18:46:03.117 |                  ) AS index_keys,
2025-09-17 18:46:03.117 |             (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,
2025-09-17 18:46:03.117 |             idx.indpred IS NOT NULL AS is_partial
2025-09-17 18:46:03.117 |           FROM pg_index AS idx
2025-09-17 18:46:03.117 |             JOIN pg_class AS i
2025-09-17 18:46:03.117 |               ON i.oid = idx.indexrelid
2025-09-17 18:46:03.117 |             JOIN pg_am AS am
2025-09-17 18:46:03.117 |               ON i.relam = am.oid
2025-09-17 18:46:03.117 |             JOIN pg_namespace AS NS ON i.relnamespace = NS.OID
2025-09-17 18:46:03.117 |             JOIN pg_roles AS R ON i.relowner = r.oid
2025-09-17 18:46:03.117 |           WHERE
2025-09-17 18:46:03.117 |             nspname = $1 AND
2025-09-17 18:46:03.117 |             NOT nspname LIKE 'pg%'
2025-09-17 18:46:03.117 |       ) ind
2025-09-17 18:46:03.117 |       WHERE
2025-09-17 18:46:03.117 |             ind.table_name = $2 OR
2025-09-17 18:46:03.117 |             ind.table_name = $3, SELECT c.conname                                     AS constraint_name,
2025-09-17 18:46:03.117 |              c.contype                                     AS constraint_type,
2025-09-17 18:46:03.117 |              sch.nspname                                   AS schema_name,
2025-09-17 18:46:03.117 |              tbl.relname                                   AS table_name,
2025-09-17 18:46:03.117 |              ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,
2025-09-17 18:46:03.117 |              pg_get_constraintdef(c.oid)                   AS definition
2025-09-17 18:46:03.117 |       FROM pg_constraint c
2025-09-17 18:46:03.117 |              JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE
2025-09-17 18:46:03.117 |              JOIN pg_class tbl ON tbl.oid = c.conrelid
2025-09-17 18:46:03.117 |              JOIN pg_namespace sch ON sch.oid = tbl.relnamespace
2025-09-17 18:46:03.117 |              JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)
2025-09-17 18:46:03.117 |       WHERE
2025-09-17 18:46:03.117 |       	c.contype = 'f' and
2025-09-17 18:46:03.117 |       	sch.nspname = $1 and
2025-09-17 18:46:03.117 |       	tbl.relname = $2
2025-09-17 18:46:03.117 |       GROUP BY constraint_name, constraint_type, schema_name, table_name, definition, SHOW max_identifier_length, select
2025-09-17 18:46:03.117 |           col.column_name,
2025-09-17 18:46:03.117 |           partition_strategy
2025-09-17 18:46:03.117 |       from
2025-09-17 18:46:03.117 |           (select
2025-09-17 18:46:03.117 |                partrelid,
2025-09-17 18:46:03.117 |                partnatts,
2025-09-17 18:46:03.117 |                case partstrat
2025-09-17 18:46:03.117 |                    when 'l' then 'list'
2025-09-17 18:46:03.117 |                    when 'h' then 'hash'
2025-09-17 18:46:03.117 |                    when 'r' then 'range' end as partition_strategy,
2025-09-17 18:46:03.117 |                unnest(partattrs) column_index
2025-09-17 18:46:03.117 |            from
2025-09-17 18:46:03.117 |                pg_partitioned_table) pt
2025-09-17 18:46:03.117 |               join
2025-09-17 18:46:03.117 |           pg_class par
2025-09-17 18:46:03.117 |           on
2025-09-17 18:46:03.117 |                   par.oid = pt.partrelid
2025-09-17 18:46:03.117 |               join
2025-09-17 18:46:03.117 |           information_schema.columns col
2025-09-17 18:46:03.117 |           on
2025-09-17 18:46:03.117 |                       col.table_schema = par.relnamespace::regnamespace::text
2025-09-17 18:46:03.117 |                   and col.table_name = par.relname
2025-09-17 18:46:03.117 |                   and ordinal_position = pt.column_index
2025-09-17 18:46:03.117 |       where
2025-09-17 18:46:03.117 |           col.table_schema = $1 and table_name = $2
2025-09-17 18:46:03.117 |       order by column_index, select pt.relname as partition_name,
2025-09-17 18:46:03.117 |                 pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression
2025-09-17 18:46:03.117 |          from pg_class base_tb
2025-09-17 18:46:03.117 |                   join pg_inherits i on i.inhparent = base_tb.oid
2025-09-17 18:46:03.117 |                   join pg_class pt on pt.oid = i.inhrelid
2025-09-17 18:46:03.117 |          where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:03.117 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:03.117 |                    ,n.nspname
2025-09-17 18:46:03.117 |                    ,p.proname
2025-09-17 18:46:03.117 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:03.117 |       FROM   pg_proc p
2025-09-17 18:46:03.117 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:03.117 |       WHERE  p.proname = $1
2025-09-17 18:46:03.117 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:03.117 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:03.117 |                    ,n.nspname
2025-09-17 18:46:03.117 |                    ,p.proname
2025-09-17 18:46:03.117 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:03.117 |       FROM   pg_proc p
2025-09-17 18:46:03.117 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:03.117 |       WHERE  p.proname = $1
2025-09-17 18:46:03.117 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 18:46:03.117 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 18:46:03.117 |                    ,n.nspname
2025-09-17 18:46:03.117 |                    ,p.proname
2025-09-17 18:46:03.117 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 18:46:03.117 |       FROM   pg_proc p
2025-09-17 18:46:03.117 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 18:46:03.117 |       WHERE  p.proname = $1
2025-09-17 18:46:03.117 |       AND    n.nspname = $2]
2025-09-17 18:46:03.130 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:03.130 |       Marten executed in 7.4968 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:03.130 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:03.134 | info: Npgsql.Command[2001]
2025-09-17 18:46:03.134 |       Command execution completed (duration=11ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:03.138 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:03.138 |       Marten executed in 1.4164 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:03.138 |         : f91e8528-c438-4beb-9646-722709ffaf02
2025-09-17 18:46:03.138 | info: Npgsql.Command[2001]
2025-09-17 18:46:03.138 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:03.139 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:03.139 |       Marten executed in 0.8448 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:03.139 |         : 59c9996f-6dc5-4585-8e5b-427b30eddc1a
2025-09-17 18:46:03.139 | info: Npgsql.Command[2001]
2025-09-17 18:46:03.139 |       Command execution completed (duration=0ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:11.355 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:11.355 |       Marten executed in 3.0333 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:11.355 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:11.355 | info: Npgsql.Command[2001]
2025-09-17 18:46:11.356 |       Command execution completed (duration=3ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:11.371 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:11.371 |       Marten executed in 1.0332 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:11.371 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:11.371 | info: Npgsql.Command[2001]
2025-09-17 18:46:11.371 |       Command execution completed (duration=1ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:11.946 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:11.946 |       Marten executed in 1.146 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:11.946 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:11.946 | info: Npgsql.Command[2001]
2025-09-17 18:46:11.946 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:11.953 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:11.953 |       Marten executed in 0.3153 ms, SQL: select d.id, d.data from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1 OFFSET $2 LIMIT $3;
2025-09-17 18:46:11.953 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:11.953 |         : 0
2025-09-17 18:46:11.953 |         : 5
2025-09-17 18:46:11.958 | info: Npgsql.Command[2001]
2025-09-17 18:46:11.958 |       Command execution completed (duration=8ms): select d.id, d.data from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1 OFFSET $2 LIMIT $3;
2025-09-17 18:46:11.963 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:11.963 |       Marten executed in 10.4661 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:11.963 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:11.963 | info: Npgsql.Command[2001]
2025-09-17 18:46:11.963 |       Command execution completed (duration=3ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:20.631 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:20.631 |       Marten executed in 1.4661 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:20.631 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:20.631 | info: Npgsql.Command[2001]
2025-09-17 18:46:20.631 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:20.828 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:20.828 |       Marten executed in 1.1702 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:20.828 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:20.828 | info: Npgsql.Command[2001]
2025-09-17 18:46:20.828 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:20.928 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:20.928 |       Marten executed in 1.0066 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:20.928 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:20.928 | info: Npgsql.Command[2001]
2025-09-17 18:46:20.928 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:21.191 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:21.191 |       Marten executed in 1.1545 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:21.191 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:21.191 | info: Npgsql.Command[2001]
2025-09-17 18:46:21.191 |       Command execution completed (duration=1ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:21.193 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:21.193 |       Marten executed in 0.9372 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:21.193 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:21.193 | info: Npgsql.Command[2001]
2025-09-17 18:46:21.193 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 18:46:21.194 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:21.194 |       Marten executed in 0.6205 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:21.194 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:21.194 | info: Npgsql.Command[2001]
2025-09-17 18:46:21.194 |       Command execution completed (duration=0ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:21.259 | info: Npgsql.Command[2001]
2025-09-17 18:46:21.259 |       Command execution completed (duration=12ms): select public.mt_upsert_leadimagedocument($1,$2,$3,$4)
2025-09-17 18:46:21.260 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:21.260 |       Marten executed in 14.5364 ms, SQL: select public.mt_upsert_leadimagedocument($1,$2,$3,$4)
2025-09-17 18:46:21.260 |         : {"Id":"3d647cb4-37d9-48b8-a814-975527ee6cde","LeadId":"ccf1ee4d-e60c-4365-add1-282f75b0e418","Base64Data":"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\u002BiLdHOHnKaKoEtLSO9T\u002BLUju94Q1AKpHbZCka5h7Lrp3bptIKbomzMQoHcJ1F\u002B5DutJiSCkWuB6r3N80vjQTZr/YgYh7dIcEi\u002B0FrfUnDj85jm\u002B1MalMmN4T3hAxaxwu0BC6m2Ya8g8ijeDu6epAQd7X1oIyx45HwQTHAqcbwP3J5b84DzCioQ4EalBUo0X6sE8\u002BKndTY4dWAe5RmnUbpDkEDsNu9io4eN1FUZiWmwY8eoqyd/iCEBcRqgrCteHscw94sjkESIPgpHGdYUb6dMjsgeFkULpcNUDmcUD6T23ZVd4OuhL6ws6mHd7SgMgjkUMgG4QmuwHrhzfEFECyoJY5pRSLWu0JQupWsU4tqEi52oUwRlhHAIXW7VlI5xPCUxcDqEEe8Y4FA6DqApYpnuQOaOBVEQAFgSEx3hp7EZYYmFG6RwhAulOhHsSBaTcIST3HyTTPCPBFFui5CB1xpCY7wPVPrSDjHWCATMaSgJBN2keCkLmm0wU0HnKAHNHAlAWnmjeYdCY\u002BCCMuKRIhGYMwEB\u002BqEAnuKB7J1AKIwO5MQeBVEXRAXY9zfNC/pBwa72KQkiyXghiIVmaOlp70YNpBB8EnAfObKB1NsdXqHusgLpL3RioeSrkVWCxD/rJxVt12FnlKYJ95Ad0mCIPcoxUY49VwKKeKB3NjQygmNUQeNCnMdyAZvolYpObexQbrhwVBFrSgcxpCbeM3S3u9APRwO0UO88cJCkmRZCeUIGDwTdKx0lMddAVDVkCWkjzQSO7wEIiQiI6gTDggJ4UblLV0UR1AQJ3aYnOqTx12gp3WsEDu7ACjAlSP7IQt0Q0I5oao6pKIWshqnqlCgwXyA8SpXaqPAj4kKUxKAWgwUjG6k3slM4WRCb2kcw0oWRvp36GEETTYhO3RCwGEcgM80APuUx0T8U5vwQKnYpibyiaLpokoBGhUdAWPipXAwfBR0eyUErbhMI3kQHUQtHWQI8SmBsnNzCcCOCARYJMElO42gJmoGcLoUT\u002B0hKuj3ciRYx4oYcOEqVoDrghw8U7m2u0\u002BSjkhBJTknQlOYm0pjKKbdae7wTbpGjvWErykDI4oAeXj5s\u002BBQdI2etLfEKfxumIZF0EZO8LFrkN\u002BIhGabJnq\u002BpCWEmQT60UBaDKYstYoiHt1aHexNwkgj2oI3Mg3AKYtvAJCkDxMSD4hFA1hQQAO7nJjIJlhHgp4BPZHkkWjg8juN0FYRwv4pOYCLgFS7h/NKF1O0wQe5UV3MLeyXt8043pjea72IySOM\u002BKB0TcBSgHEtPWY4d4Mpb86EEd6NrhM8EXxbtWN9SioZH0S1OHkCJlEadMiA5zT3FCabos5r/ABVAl94IKE7pNknSNWlvhdAHCbEeYUAuaOcICCBZ0KSCULh3BFRvEi4QFgOhjxUpA5wgc0k2QROpniJCgfQpkyG7p/NMK0QmLTylFVBTqMuKsjkQmdUqDtM3hzaVaeLEXCDcIvqgrtrUzrbuKlEOHVdKTmg6safEIDSpnQOYebTCB3NvoUBbezoQup1mn4utvRwckH1YO/T8wZQIlw4IC5uhS6VhkFxaeRSMEcCigLWE2cmLCLgynLWzyQwZ6rj5IAcSOCGUZLgb9ZA8DUSCgExpCEyLiUUGNUzpi4QNvG8t3kBe0HiE5N\u002BSE\u002BRCocOJuIKZxtdCNzQiD3JjPAygcyWoSBqkS4DRBvCdUDlpJ1TAEJSfJIGe5A9wLiUJg20RiYQGCLoAe08AhKkMcJCbQ3goIKlJj9W\u002BpRNoVGOmnWcB9FwkK31U0yITRXdUqMHWp73e0pMrU3EAOg8ipnBC\u002BmxzZLWnyVDl5jSUwc0nkonUoPVc5vmmmoI3mh4TBMW8oKA2QGowdouZ5Jw4kWcHeaBGE4hNrwSZMzwU0EAJUNcDd81ObFRVh1Ae9A7rMCHiET7NbKYahUO8y2FH84I\u002BKb54KAX/ACrQnKTvlRKTz1bIHeeqEwIjRJ4O6EhZsnVAzhBUdUdUqR1yoq3YKJSwY\u002BIapCIN0GD\u002BRb4InXRQtNk57KFoMo5kIgWHron2BQtPXT1eygBnZSAgJURYowLQgi4ynGqMxCbd0QIWumBTlMECd2T4KGiOrKnPYd4KOj8mEBjswlokEuKBm6yiN0zdURQRuCYWTuQgyEDON0BN0TlEZVg95OHpAWL6Z5tcipMrMPWxBcO9qnLHaxITbs23VHIDn1AYLGu8CgdWpb0Pa5nipnNHIhAWnQX7kEbd0mWvCKHcIckKbW60m\u002BO6o30wTZ72902RROtq1IbphAfhDR1ajHj86yHpnggVMO/xaJRUjmgGyZzQRrdI1aPzoYe\u002B3vRN3HXDp70RHDhxlPukDQI3NIE6hDLuEooC0OHWYm3WAQCWlSbxGoRSx3aCIhLCOIPsUcOE9U\u002BStubSIgKM0uIcPNBWDm3BdHjZEDAmVI\u002BnOrZ8lHuMGnV8LIoHBp1aD4FRPptm5I9qmNIi7Hz3G6FzXzdvqUEQozdlQHuQ7j2yC2fNSlp1g\u002BYQSb3PkUEZjQgtStGsoyTFxbvQwCNPZKCN2vJA5gdrBUr2N\u002BkB4FRmmZ7XrUVD0bQTBITODxxB8lKQdEAETKCJ7nD5nmEPSti8T6lPugCZB7kLmNcOtCKjLmpAckxos4WPjCbo3DRyGnPfBQlg8PBM5zxYgkJBzTqS0oBeyBYyonC/JTEiODvNC8TrbuKKgOt7oQBe5ClO6Pm\u002BpRuHET5oAexrh1gCoDQHzKhb3KZ0RxQm40QQubVbydHko31CD12FveLqwbcUDo4wUVCKjHaOSadbQicymTdg8won0j815b5oDseCFzRzUfxzLdV4HkUhVk9YPaeZFlQTwoiL3lSh4JjfafNO5rTqCO9QVnDklPBTOpiOqQVE5kc0CseITFo4pGfJMQgY07yChcOEIusORCEu8lQIcQE\u002B8SE1uCbqxcEIC3\u002BDggtOtkzh9F8\u002BKbedN2jyQGfLyQQI4gpBw8PFECCI1QC4kDSQhm4RFoOhQOaQLiVQ7teKZCDeIISmTaUCgcvWo2hoqmGgKTiULb1IKgIC5SFmeacauS4NCgRu9R1/k/7QUjYJKCs3qD6yoVTRs8Ew4FE\u002BdxsoToEDalMflESGOuqBf8oE5HVQuM1vJGeygTh1QmdZiJ3YCZ\u002BgUAcQgrmGFGBeSgxEbhKoWD\u002BRbPJSGJQ4cRRb4J3J9kCk3slKRCYXCBM7YT1LgoYgp6h6iIal2Si4XTUx1JSI4oE4QER0QGbI2i90AG5gJhxRxBQjVAxPUd4IaHYUjm/FO8FHREU0BxohJO9KPQBANUCbqURQjtFEQAEEfApgnchBugZyhLu8KYmVXMSqPoRtRosXFpRh88QfFN1COSYsbwLSo5nJE6R5oS1pNpTOY/v8jKYl4PBARY4aOKYl0Xg\u002BSHfcNQfJOaoiEDQDwhMWQLOT7wPelPGfWgBwtBIPcQonUGT2N082mFOTJvHkUiBOvrQV9x7DAqOjvEp3PqDRrXecKVw\u002Bj7ELgdZCKg\u002BEX\u002BMY5viJRdLSdYOaT4o78bpixh1pMPi1AJBmQSmveHmeST6LXaF9P6riAouirNPUqh3c4SgmD3N1gpjUHzgoHVKrbVKBPe26XTM1dvM\u002Bs0hBMdxwsRPcmLHfT8lD0lNxhtSm49xCLrC8keaBOc5vAkKNzgfmgqUOcBe6EOYdRB8EEVjoSPG6Ygjl7kbt3gWnzQO8PYoI3yNRbwlAXtmykJ70Lt0nQIoSQbkg\u002BxBfUSE7qbOFvAodxwFnnzUCsdYTOiYiEiXDtNn2pbw4yECLQRYz3Id3kEpvZzXBMXQbiPBABF4J9aBzSNAic4X6w80Dt6LSfAoqOoxrvmweYshLXiwqT3EIy4jXXvCZzxyQQP326s8wUIcI7UHkQpnuaeP2KMxoQD5IqOdbDyQuMhE5reAjwUZaRo6fFFM4SEFhYhOXRqPUUDnidbIERxFkDgeBRBwNg4HwSCCOToQmOvBSX4QmdHzm\u002BxUROpBxu3zTCk5nZqOA5aqRwabAx5ptx4PVdKCM7w\u002BYHewpulb86W\u002BIUhL\u002BLL\u002BCYuEdYDwKgBwa8SIPggLROqMtZEhoHggLTwf\u002BsgFzHcLqEyNWqVxqNd2JH5pTB4\u002BcCO5whUQ24WRAy2JB8QpJY42jyTQ3jCgiLe6PBLdvZwKkc0A20QOAm/sQDuuvIUZbBtIUhgaOQGRcmQroRLhyKHpTvBpbdImXCAhPyolNBPkpAe0pEWRCIBCASEIb8YPJSRYoR8t5KB/pdya53UUWJTckDNsSmr9gHvRixKjrg7o\u002BsqCfdrUDhwRE6BM4dcjuQMAhnrFEeQQnUoIzHTeSP5qD\u002Bd8lINLqhP7LUzhKKpoEN5QNFlDirU1KTdQ4qTTshUlG9JvgnOqKjApMHchdqgDUI26IEVM2QDq9Kp2U3zrJ39glEJhsAncbQEgOoCmKBxwCN1ghJsIRC4ugAyhHFE5C25hAbvkXHuUTOyO5S1PkSO5RsFggTjKEXKN4sAELBdAQsmJSJQHkgTtFGdEZ5ICEDcPJQEhTumD4KvCsH0WYFjCAgERCk3AGwCR5z71HuPFw4Hxt7lHM26RoSEnOOjrjwSqF41YfFpn3oQ7nvDxaQgYidAfWhA1vfvCffE2eD3SnkjUII3N4kBDEaEhS7w0Kc7p\u002B9FREnUQfKEO\u002BQes2B4qRzATZwTGmRq31IAFRpNiB4pzPBDBHA\u002BYTAXuFA53gkSRw9qfukhM6RyVBhzTxCFwBBsEBgnQ\u002BpNLQbOhEOG24oXC10\u002B\u002B8ixlCXPi4CKiq0KD\u002B1SB7wLqPogy1Oq4Dkbqfe52TEA6X8QgjLXjUtd7EBc8TvUXEcxdSlruAI8EEubPH2IagD6TpAeJ5FHu2lp9qd265vWZPlKBtOkBIBB8SoHeD84\u002BxRkEGwCJwf8ysR4gIC6q3tNY/vBhFATe7SmtzIUge0idx7fJBvU36VGHuJQMWzYEFC\u002BRZzERbbs\u002BpC4u5keIUEUNJhMQQbFGZm4BQODZ0IQC5riDYFRbpHAtKJ\u002B8OMod9wEX81VhpPEz4qN8zojcSe0hN/FFBY3mChLdSBKJwM2N\u002B9RlxGrXDwulDH/1KFxMXTlwI1Hmh8ZUVG5w5IYB0hG6J4IHNM2QAWNPAA80Aa4aFSFt7ymM80A7zgLtkpt9vElviEUu3biUMyIPtQEdx3I\u002BaEAfSQlrSZEJrjQkeN1QW8QTBlM528IcJUZJ3jofAwn3p1keIQPuA6EhM9jmiRdDvgGI9Sc1HcHeRUAh5GoS3wbFPvT2hKE7kW1VEbqdM3gtPMISxwFnz4hGfGEDtJkFBHUfUabskcwUIr0yY0PepHG3JQuh\u002Bokd6A5BuAFG6SCmwg\u002BLeO8oiLEBQM0S5MflGnxTt7RKaPjggJ0bpSAEBKoI8JS0AQNwKf\u002Bd8k0W1S0rnwQO7sodXBO89UJN7SBQQUNc9Vv1kbtVHV7LfrKh/opnHrQnJgtQHtSgcaoXWJRDVC/VAA\u002BU8kXzQhj4w\u002BCIaBA7xdIaJPneKXNNAFRYo/FlTOUOJjo1Spmj4tvghJRT1AO5RlQMdU9LVIhM2zrKoXEpnk7kIh2io6miCQaBM/VE3shM63igR7Kk4INQERQCYugb2kR4pqQlyB6vyTlHT0AUlcxTIUdNAVQxAQj3p6uqG8WQPxQfOKMaFANSgRCDjCObIAJcgep2SoN0qep2T4KEPMCysSvoswRz80xgjiO5FAcI3vWEMEaAHwKjmaLRKAyER8HDy\u002B5CTBuR61NULmNcOsGnxURoAXYSzwNlNAOht3hDoUEXR1BeQ4d7fuQu3weq0etT78JHrBBXNUN7bXDxbKkp1WO7JHkUcD6PqTOpsOoHmFQVjqJ8UDqYOgCTWbvZ9hKThUuRv\u002BBZIQMaRHzvWFG5jpUgqVQIc1p8Le9MagJEtf5t\u002B5BCad7qMjUK05zJ6xaPE/ehcwEzY\u002BSKqboEyCO8FIBwb2z5hTmmyeyR4JjTAFnKCu7e5Nd4FAXFpgscB61YLJtKYtLTF0FcVBNij373TubJ60eYUZYNQ0eRQJwYeJCE0xwemc06hxHiEMuAuAVA7mOF4lAZnsot8jmPJLfdpvCFVRkwUFQMeOvTae8qUQR2QfBAQ0jQhBB0QA6jnt85TTVYO20\u002BIhSPBAs4EqIh03aT4IBdVdPWoW5tcg6WkXRvFh5OCMgDiQhIJHA\u002BSqmPWHVLXKJ4cLbsJOY0HT1WQ30D3N8pQRm9jZIC/NO/pAP5up7Cg3hPWpub4XRTmZ0Qk/mymL2TG\u002BB4lNqJBBQC6CLCEBa09k7pUnWgx7kBjioBIPMHxQODps31FSEgjuTjdOjkEMnjr3pcL6KQtdNnAhBu/mkeCGgJZGkHuKaO8\u002Bad4POEI3gNJUUNRp1AB8FCXka\u002B0KYkzEEHvCEuMwfvVEQdzRNdbRIxqWj3JoaRaQoE4sNnNCFzQB1XEJ7xZC7eHBUCS69pQ7/BwI8k8ydCmc4gckDSCOqUDnAG\u002BqCq6TACYA7rSVA75JhABqEbtUOhKAcJ8m6OZTundQ4T5N/1ijPYKAW6pG1VvgnbrCT/lG\u002BCB3wR5oRoU5ImEM9Ykc0DgGE388fBEbBCY6Z3ggepG626TTfwT1BIahCBzeSoap6rR\u002BcpTy5qOsAAz6yCQjTwUepKl4gIA25VCJgAoCjeICHhPegEC58E02RD53ghA0SAiZKY2EJcUnIBeICixV6cKZ2sKvizDQhU5MDyQTbzRn7EDrXQJ2iandyc6IWdpVD/PIUdUWRg9YqOqbIJqZkApP1TUeyE51koCTOTk6JnzIQCbApUTcpj3p6ViSgbEfJlA0w2yWJdLEqQ6qAn3IlKQnfa6E2CBuCAXJRNNih8EDusELblO7RM0BA9XslQNbYXU1bsFQiIF1Ur6MjuKZ2nH1Jt50WcUt4jkfYsOZQToUxnSE\u002B\u002BCNCmJ5W8kAFovYeVlG5tj1nD2qXVIixRUEO5tI9SRDhBgnwKl3eYKHdHAooN8DUEeIRB4tf2ot0\u002BPmhcyToJ7gqh\u002BqdbJxpZx9aANe0GJ9aGHG9z5SmmJQ5w1M\u002BKFwaTJZ5hA5zmjQetN0g0LXDyQw5YJsT4FCcPfeAAP5phFvAntD1pdbVt1QDukbqfIiUJdOob5FSlzuM\u002Bd0DnCJge5FRPLRwdHgg6SmeqHweRUhLCLAgqN4BsfapoAujUSEDi2dE5pMBkNA8CQgfTns1HN9RUDAmOqbpF02e0KMtqtuHMf7EJdU\u002BdSf5XQG7c5Ed6EgEiHetCXiJuB32Sa5jja/gqoXUjJIIHgVG4VQeq7eHeFMd3iCPEKNwnsmPOUwRF7gOs0DwUZqbptvDvhSvLg28HxUU3uz1KhGqCYkHxTOcORHhohduGZkeIUZbGhnwKKc9abwULg4DWUDi7WTPeEBqP/APZFE6Dq0IS2DYlCX3vPqQ9JGiBOBNjBb3qI0mAy0R9UqTfnUod4HhCCI9IDZ8\u002BITb7ouze\u002BqjJF5Kji9j60Amqz5wLfEJ99rrt9ie/EoH02E3aD4WQMXHe7SW\u002B4G5sgcz6LnNjvlRnpeDmu8oQTuqCLj2IZYQIMFQ77gILXDwumc5o7RjxspixM4OHEFA55mHNKAPBuHz4GU2\u002B4G7ZCByQdBCExwhIvabQQhMRaECcTHNA545p97uQVDOiKc1AL2Pgo3EuEnRRUuwfrFSjslREcdZF81qQ7XknbPVQC/tIS1G7WUJmD4IAwg\u002BKd4lFFiEOFHxJA\u002BkVIBY\u002BSKFnaSq9pqQu9J46wKBuKEWJ8UTpmyHhPFEEdQgbes9SHgo2D4x5QE46JjwTntJyAgE9oFR1L7g5FSOGiid22eKCXjKZvFGe3CaBulAL7oeHmk8wSOCQ4IBHzvBJt08RvJhZWBDUpgb3SkpHUKBvnlV8ZoFP88qHFaBUSuPWTFJ3aSJkIE6zUDVI7sKKSqhNN0NY6ImhBWEkIJaRhoTkpmDqhPCBG5SKR1hJAD0dICCgfoipGGlBFiBbzRMs0IcSeqPFPT7KIJ1ygqItXShqG9kU40Q8Clo1MDZAztEzLp3REpmlAqxhhUIBhS1bsKEaDRVK\u002Bid1paIdKEtJHBZdOqQzsN8RLfcQrDMbIgtqN8DPvWNTsq5uk2S6wPH1Ks3FMOlcT\u002Bez7lKKrj2Wtd9SoCms9tiQye/xQhvkh6Zs9dr2\u002BLftRMfTd2HtPcCpqFungU\u002B676IKRAI0KQMcYV0NABuCPJLqniEQc7mCkXNPaYCgG/wD6KE6dkBEBSdO6CPApFrC2zyPagieJGqidTOu8rG4QJ6rkLrdph8iixBuHTeB80oc3gR4KaKZ1lvih3W/NqIIg530vWEzi48B5FSOa7/2UbgBqPsRUbiR82fCEDnCbujuKlIaR/igIFxr5oIzzBBQyDrITlgnQD2JbsWg\u002BuUASCdR5pGI09RS3Dw9qAyPm\u002BooHczvB8lDVotcZLWlG\u002BpF94hA5\u002B9oQVVQuZujqve3xv70L\u002Bk/Md36KRx\u002BlPmoiRwB8lQFQkCQ2VEXiet1fGylcQRYqN0jvCCNzgoy4ePkic1hNmjxQEWIAPrRYbeHAkIHQdQhcHibz4j7lGXO4D1Io3N4gqN5JsRKHpANTHjZGHz3\u002B1BCYHZMJg8i0qYtZPZBQPpjgCPFABgjSfAoDA4oi1wBso3BwCB94g2PrTF3Ej1KN\u002Bo4oC4jiUEpqNHMIHPB/xCAknRwPcUBeR2mnyQSkmLFR7x4wUG\u002BOBPmnNQ8SIQC9lIuuyDzFkxaRenUPg66OQTyQuAiZCKYGpo5rD5wmNRs7u64HyQb\u002Bu6gaOt3qWg7l4J9Sc/ambMjwT8DJ4hZaQsHUP1ypG8ULRY/WKLQQlQwF3eCYaAom/O8ELOyArAjrCFwIBR23nHkgedQiBwvyR8SjHFDhvkT4lPxhAzR1pSqHrgJ29oBNU7c9yBjMIQY4InTCYaoCIugZ8o9HxKBo670BFLmnTRqgEgyFG75ZnipeN1E/5Zvigl\u002BekBMnkkO0fBOy7UET54p2XITvTM7SBnWLkGiM6uQPF1QhpdPdMdO9JpkKBj2pUGK4QpwOsocVq2FoSVdUPBFUuUPAqYlO42QG6fUpEWKoZuhQP7QRiyB\u002BqCVhSBkpmaeSduqBj2inJsmjrJnIAcjp3agfonpWCAMVw8UVPRBi9W\u002BKNkFoVQ5MKN5uidqgfMqKcGyFOLJuKBOuEm2CZ5MIW6oHqHqeaTW9UeCap2Ug4xqqlfYmK2QyeuOthWtMRLbFZGK2AwzhOHxVWmeHWn3yu5BtCUrvelxeWdXlHmeJ2CzRpmhjcNUA4PBB9cKlW2QzukCXUqLx\u002BY8n7F6yYPBNutPBZvRjpPyOTxTEZZmWFcekwWIb3tE\u002B5Vziq1I7r3vaeTx969xfRpusWgqpicpwGIaW1cLSeDrZYvRrXry\u002BY8abiARLqdN3eLFSGuwCQare6Q4e1em4jY7IKx3jl7Gnmxzm\u002B4qhidhcrcwiia1Ll1y73rF6fKNTqcK4NuKg3IP1mx7pU9Oqx4s9pP0Wu/8AZb\u002BL2DxDTOFxpPc9o\u002ByFkYvZXO8MD8Qys0fRNys9tjX\u002BC\u002BKgLo7THt8p9ybeDhG8PWqj8HmOEkVcFiqR5taT7lA7F1Cd11W\u002BkOAn2qHZ\u002BmkSRyT7zuazm4h7QAN09wke5SnF6Asc3vaQfeh2Vc3wT1mg\u002BKB7WGeqR7lXGJadKjf7TY9yNlYONmtd9R0ozlItZNjHhZM4ECQSR3py9hFw5viPuSG64dUtd4G6CMkkQY9aBw8VMW34qN7Lm/kqIpAP3hMXJ3tIN/aFGWgjsg\u002BBUU\u002B/Gg9RQvqQOKjMAdo\u002BYUNRzwT1pVnumDfWBNzCic8Hk7wUT6kahA6ow6hw9q0qRzmXO6WoHuERM\u002BIBURqNiA/yKBzhqmBy4kR9qjqOM6exC6oFE\u002BoNJVxRmq3iSCo3VBwKF1SR2rKBxEzAHhZMVOKohM54ItdVyR3\u002BuUO8fpesJBYJaQgeZImPMKA1XDkfBI1uZ9YhETgciPIoCagJtPkozUBPDyTCpEpijNUxefWgdVE3a5qE1TGsjvCbeZ9H1FMDuIcbQfFRua2btPkndunsuA8UBLgeqfaoGcAOYQkWmZTPc4kmY8lG57/og\u002BaCQkxqUJIcIIB8lEa252g5o8ED6hIsYEIDeWt0JkXhRNe57ZdqmZqe9PS7Mqaoh3Im9tMNIRMv7VmqQsDzhG3XzQcPJGO15oI2xuk/nlLT1pN0I/PKWokIQgeq71IW9kJ\u002BDkzOxCqC03pQO0Ujjdyj59y2025-09-17T15:46:21.260871071Z gHDD4gnvKc8SmwvyB8SlxVDkXCZ3bCe8tSI\u002BMHggREJBFA3oSIsEAC6Fghz/FSAXQgdZ470C43Si3in4ojZoQR6FRO\u002BVapRdyh1xDUEosSip8UHzynYbIE9BT7RKJ2sBJsIIzO8UxTk9ZyYwqB1TtKEpxZAlBij1mqYXUGM1YBzVRM/UoQbFE7ihFmwgYBK4CcaSmd2UDFR1NQicSo6p6wQT04ie5OELbN8kmlAjqnJlDN05MoI6iemhebp2FBHijdqkpdlRYky9oCkZZsqp9ntvIH6pA3lMblRSSQkwYT3QJ5shaE74hCOCoasdB3qRroaPBQ1zonBsn0lfdKYp4SK9jwmT6JJHkgZJJKLIFKU2SSUxSKYtBTpimATTBCgq4LD1QRUpU3TzaFYTrN4yrOVYeN2YyjFD43B0ieYF1jYvYHL3yaFatRJ0hxMLtCkVi9Pi3OpyeaYj0f49rpw\u002BOouHKo0/YFRr7GZ7TJJZhagHFlQ/aF6xYoS1qxelHSdfk8UxeTZrhTNTA14HFl1RqVsRRMVOlZ3VGfevdX0mO1Cq4nLcHXBFTD03TrLQs3p1udaXzHiXwqbllNxH0TBR/C4bvDpW9wO9716jjtj8kxGuEa082WKyMTsBlpnocTi6XIB4I9oWLxsanLhXBDMGaPbHeWx7pTjF0CLVBPIOH2rp8dsDUa0/B8bJ/2jB9i57MNi85ouO7To1m9xhTFkl8MfN83pYRpaKRfVDd4tMCB4iVjf50UCPjMPWYfzSHe\u002BFBtHgMyy7HNo4jC9FSrUnSSLyAb66LnX9hJV7XSjaXBvdunpWDm5n3Eo25thal2Yhh84XI1AChcOrC3qY7A40d8IPhjTxXG031KYIY9zfAqUYzFNFqpI/OEqmOsOKYeJ9aB1dugJXLjMcRuzustyBRDNKg7TCPAoY6Q17oTW8QsFuZMJ7ZHiFKzHk2D2lMGwK/fPinNa2gWSMZI6zQnGJaeJHcmDUNZuhsEPSN8Vn9OI7aYVXG4gpgvPfwFxyKjLovukHuVQ1yD1p9aQrN134KC42qYiZ8Qn6UEXb6lT6afnNPihNW2gQWzVAFg5B0rZ1uqxqiRcp9\u002BeNkFjfvxQPqDQ3VR1W53bd\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\u002BgRfNQuNginq\u002BSog5pcEwuD4pXhAx5oXJFCSqhwZICgricVTUx1lQPd\u002BNsQSlM42SeeKElAzjJQOuU5N0xNkCMaoR20pslPXSA3FMTLUxKHesgaUROiAGSnJhXE0iU4QOIKdpulNRvcOmIREqJx\u002BPKM6KoKU0oUjogR1lOCglPqEBEyhOqQTTdA1TthPKiqOPSI5KXwPvIJkkl7HhwpSSSRSSSSRC4JJkuCBFJMnOqKZJJJAkkpSJUDHVCUSEosIoDoilMVlQFRuUjkDtVK0icDKifqVM5QPWK1HObbDewNEcnn3L59y\u002BkG5\u002BKUWBc31FfQu1w3sJSH5x9y8Bwg/7zeNV49q4c3fp\u002BHM31WRTO7VqA6hxC2Gi5BCxq3VxlZo\u002BmSnF0qwHJ571Xa\u002B6MG2q0zqWbQkdLKHesn3uqipt7qpF2vgot6yW9qoaMEQU8iFCHFGTaVRJPJASlvWQk2CB3G9lHUMUySiJ6yixF6TwOSqI6jajmdWFB0hp1A11jN1cben5LMzFxZX9RVnul9m/hjYK5Q0as/AmadM8SAr2GJLGmeCzWotDQxyU1Ls\u002BpQgADyU1IdWFkHVPxbvAqQ9lp7lFW\u002BTf9UqT\u002Bbb4LIIHrBPT7JnmmHzUbAI80ocDinIuE50TkS0FRTRIjvSI9iNgEhAdSgBhsLcSpAJYgp3aD3lSN7CKZgiVHoPNSsJgqKLIhJ3cU3FOdCgiA\u002BLCeJHclTnomkp7oAi0J2DrpifcnYSHoiXifBCQYlEdCmPZhA1GJcoqfaf8AWKkpES4qOnq/vcUCd2Sm4x3J3dglDqZ7lQ384FHf4THcj\u002BcowfxkjuQHHVhNeydxgIZsUBO7KZxtZA50WSnqKwRt7J8UplpQtNo70h2ZRNMhTzdA/WVQ83hQv/hbJUpgGVXcZxbfBBKTdNKQ1uhJAQJ/chcYRSJQPMlApsh3uukLIJ65VTUjihLrJiZBQIgpunebICU5VCFyjJCjm6beJKAJHTG/FSEyq4Pxx8VMTZKH5JnE8EwKTigTU7ZQgwnBugfgUPJPwlCgB/yqklRP\u002BUUkhUfeSSSS9bxEkkkhhilwSMpIYXBIpJEohkkkkUkkkigY6JJFJShISiQlFMmKdCpVC7RA5G7RA5SrET1DUNyp3qvUtJWK1GJtK3ewbDyf9hXgNJhp7VdG4QRiKjT6yvf8\u002BvhWj88e4rwfFgDbar\u002Bm1f2iuHUjv03L4yn0WPxNIiNyq5scoKwMXSq1M1qU6TC5zoIjwXT7SU\u002Biz7Hgf69zvWZ\u002B1ZWAcPwu/mWA\u002B8fYnCa3yuRjuPRPLH2OifeMQo82cadSvUAu2SAe5VsNiX1A2WtBNrLpeP6YnL6q7vW1Rb3VE6qDe1KLesDFuaw2mBMxKU2Ki3\u002BsnBlAYdCMO71BvSn3iEEwdqmJ0uoweM8E5NgqCLjvQo65\u002BLd4JT17Iap\u002BLeglpH4nyWXnQhzHf\u002BtVo4UzTcFn5/anTI7/AHhXj5Tl4a\u002BWOmjTP5oWlhPkmRyWRlDpoUifohbGEHVYpy8rFttxdS09FGwEqRnHxWFHUHUPgVI7QBA8dU\u002BBR6wsgm6NPeiZ2UI0ARU7tUqpQDuJfMCf\u002BblPEMYimaesED\u002B15omoH6oGozuDxKkH2KPDjqx3lSC10CBhnmozopQBuqPhKMmOqR0KUSQl80oAp/ItTjXyQ0/kmomiZRQkSfJM3toiY9SZl6iIkdqYTHspzYlMSIQR07Eoad3Ov84oqZklDT0ee8qh33EcFENUU9VCOaBnQHhRA/jJ8FI/tKIH8YPggkqHSEHNOdQhcYBVCNwELj1SlPVQk2KIZh6spB3VQ0z1Ch3rKhwesUD3Jb3FA4oCcZNyoZHwwcoUk3UE/jfkiVNN0DruSDjBQONpQO4oSUieKBzlQXBACS4pwdVG3toiQlMTITE3KGVQRNkib6oE8oHJvZJpQpA3KgjHyrvFSk2ChYSajvFSk2VpCBTFwlMCmfYgIDm0hJukptGpA2RCBkJXTTDU0oAdO\u002BpFET11L5qj70SSSXreMuKbinSQLimTpIUySSZAkkkkCSSSKBFMlwCSBuKYp0ygYlMU51THRFgHICjcgcpWojeq9XirD1Wq8VitRjZzegPrfYV4TjRG2tX9NqftFe7Ztel/a\u002Bwrw7PGBm3ZA0\u002BGE\u002BtcOo7dNh7d0zT2mxfVgODHD9UfauYwT42hNOf5lhj\u002B09dn6SKe5tACPn0Gu9rh9i4WmdzaimT86gB6nH706bXL4qmd/KYgeKyKTnNw\u002B80wZstjPhFbEeaxWH8V816J4cq18mk4eo1zi\u002BHcUWFcTgSSZh7h6iVFkrupWH532BFgj\u002BI1ByqP95XPm6cas4kDd0CbCtaaL94Ane1PkliD1R4JsJ8i8/nH7FJ4X7Un1HNqwDbeUoeLyYVTEnrO\u002Bt9qtsax9Mtc0EEDUK8onGmFZnSBu\u002BCTaBdT1hubomVg4eqWVae9cjdB8wFu4gzueCnKYvHloZF1HVPUIRA6hR1TYrK1JgHcJ1Cp7RyKNM8ASPaFPgDdveFFtIPxAO5PCs\u002BUL4WskdOGpX4Bb2E7LVzeQP8AiGBdFgjIanLycb7L7NVLT1PrUVMdchTM5hc2hHskdxRcQmIse8Ihqsh\u002BAjmiodg\u002BKHiB3oqAt/aUolPZhE8nqhCdD4J32LfBFMEMXCOOrMpDtCyEBQECO8ok1PTzKOLIpR8UVCLNU7R8WoyLIgeITHTyT8ULrg\u002BCIGn8m3wTjjKal8mzwT8CigqHklS\u002BUKRNilT7RRBk8e9ANTOiJ2iDikD0\u002B0ULDZ9uJSDoKGn2Se8qhnQGoQU9S90PNAz9QoR/CHeCmeVAD8e7wVEjjJQvNkjaULjaFAxMNQOJuU5PVUbjYyqhMJ3EzTqha6GpgbFUOSo3m0ApTdA89aEBF0KGfxufzVIXKBpnEnwViVPvWKjckDAKYmyqE5yFxTSmJUD/ADEDD10Tj1YCjYesZSCSZlMdEw43TcCqECd4BEdULe0ENarTpXqPa0d5RLRlyEHWFnVc6y2nW6J\u002BJDTzgwreExOHxILsPWp1QNS10wreNibKOmRvE96ld2VXZqfFTE9VSqQ4BJ/aCZru5C50uRdGE5ICAuMJiVUGSN1C6yZxsm3ryUAT11NdV9ainVH3wmRJL1PGFJOQmQJMnSQMUuCcpoQMknhMgSXBJJAySc6JlAxTIuKEoGKYp0xRQuUblIdFG5SqjfxVarxVl6q1tCsVqMjNL0/P7F4htKd3bhxH/iwvb8wuwrw/bRvQbbP7sVTd690/auHN36aH0pU93McHViz6Tmz4Gf8AmXnGMO5n2AfzD2nv7JHuK9S9K9KaGArfRe9vrA\u002B5eWZxDMbl9XiK\u002B762n7k6flrl8UO0P8JrjuK5\u002Bm4fBYXRbTUcQzFPecPVDHXDi0wVy9N0UC02XoljlWxkzodVniQfYpsK4fBagH\u002Bscs/K6kVHjuCnwlX4moPzyscm\u002BC/XcOjSwjh0Th\u002Bd9yrVavxY8EsJV\u002BLPj9yn0u\u002B6tiT1n/W\u002B1XKJ6h8As3EVJe/632q3RqQPJXl4TiyXuip/aZ9i3q7hu078PuXO1jLifqn3LbqPmnS8PuWuoz06NrtVHVd1SmaeKjrOkFc462jwL4qMUmftJyyqfokH2qpg3xVp/WCv5o3ey\u002BuJ\u002BYT6rp/uifSrs\u002B/4toXUYAyxhHJcdkD7N8l12WGabfBOfk4eGpSHWPgpWaSoqR1PcpW9kLk2lHZ8k5HLkmHZ8k4Gg7lkPHWCkpDXhdCR1wjoi58Uqid2Z5o3dpoQkdQjgndqzwUAuBnuSPbEJ\u002BQQntAhCFRuI7yjbZt1HR0meJUguIQJp\u002BKKj5o/5tAdUAG10iIBPcicmNx5IApfJs8E7tE1MfFM8EnaIAgynYTJS5Jm6kohE2uhmyTkogKhNvKAGGnxKNkRfmo/m\u002BaBjyQE3R8CgI0KBP1lQN\u002BWepXhQg/Gv8lQTjrKBxundqo3FEPNlC9xuncYBUdR0NVDg9SUINihafi0wda6Jp560oHOklImUBN1UHNrqGmZxDj3I5soaJ\u002BPd4IJ/moHJE2vZVq\u002BMw1Ht1mzyF1ZNTcTpnHgsmvnlBoO5Tc7xMKpWzys75Kk1vebrU4Vm9TjHRONtVTfi8NSf8ZXaPb7lztXF4yvZ9RxB4TZV3gMvVrNYO8rc6bF6v6dFVzjCU53XOqHuCo188qvkUmBo77rPyanQzPOMNlmHrTVxFQMa4t6o716LQ9GbAB0ub\u002BIZQ\u002B3e\u002BxdOPRv6c71a8\u002BfjsdVNqtQTydCiLMRUJc/eO6JJJ0C9iy7YjIcJul9F\u002BJeBc1XWPkLK1tPQwWA2RzQYfDUqLThKjYY0N1aQNPFdfRyOd6mvnzNBFU8e9a\u002BwhcMTigDbcbPjKyMz\u002BVIWzsLG9jDF\u002Bp/zJz/AMs4fOOmpnXxUhNlBTN/NSErx17Rh0BBN0g6Qha6XKA5lOInVCDdMTBVBvNkJNkxMiEJ0hMDA9eymnvVdvbCnVH36klCS9LxkmKSdAKSdMgSRSSQNdLikUkCKZJLggbgkkkoGKYok0IBTFOUxRQnRA8KQoHrKoXqrW0KtVNFVraFZrUZGP7JXhvpJdubXYp/0X0nf8DV7ljtF4Z6TT/3qxw76f7tq483fp\u002BUu3xxL8ke7FMILcyLaUj\u002Bb3TEdy4ScMzGYarimU3UWVAXF4BAsYN\u002B9el\u002BlW\u002BQUNf4U39l68uxw3sM9sNNuIsuc8unH4tnNMbg8fjquJpYtrd8yG72lvFUKuHw1U9d1Cr9YSudbvtPyVE/VcW/emfWxTR1MMCO6t/gunZ/Kd0bbsBg2klmHwwP5rWhQ/g7BxHwdgnXdET6lkfD8U0S7C1v7LgUjnBZZ1OuznLfuTtp3Ro1cpwzwW9do7ioPwOxtmVn3vcSq34Zpz8pHjIRtzdh0qsPg5Xt5G8UFXIcQ57iyuwyZuCOKf8ABWNp2hj7cHK03NYvAPmn/DEatHmU/wASTtc3iMpzJszhKhFo3bz6lfFDFCmwOw9YEfmFa34aZoWD1ohm9Hi2PNavLlfpOPHjPDHLKrJLqb2jvaQoar\u002BrK6H8LYZ\u002Bo170zsTgatnsYfEBZ2/prHM4Z8PYZ0IWxiG79F7Nd5hHsVs0MseJFKmOUCE9SjQDSabr8BKW\u002B5I5fI3S9o42XZZV8i1cblQ6PMDSjsvLfauyywfFtWubPT8Nah2T4KVhsFFQALSO5S09JXF0TNjd/sp\u002BUckPzdOCJt48FkE/tA9yOhae8qNyko2b5pRJ8w96a4Lb8Em8ikOHgoGedCk4dZMdU51HiihpwGnxKJnG6Cl2T4lGBBCBE9QhNqUuBT8Y5ogTxKF12nwRHSEx7JPcigpfJt8EuadnybPBMeJQCdUx4gJyUPEogX6pXhO/VNyVCbrCiabEd6k\u002Bd4qNosT3oHgQUGqJxsUB0CAXlVx8s7yUxPvUAPxz1YlO4w4qN12oiQSUBNkgB1woqptCVaoymyXva0d5hZuMzfBUpAqb7uTVqSs3lIvg9UJlhP2haG7rMNJ5l/8AgqdbOMdVncimOTVucKxepxjpqlRjBL3taOZMKrWzDB0yd7EU/J0rm6dHG42puMbVrPPBoLitvLths\u002BxjQ44boGnjWdu\u002BzX2Lc6NrnesixGe0WiKVMvPMmFnVc2xb3E0\u002BpP0QrO3eS1NkhgulqU8UcVv9mW7u7uz49pclWzXFPPU3aY7guvHoVyvVrbq4jF1G/G4ipu/nOMK7g8gzjGU2VKGX4ypTeAWvFI7pHOdFxVSrVqGalRz/ABMr6a2VpGhstlNB0b1PB0Wk84YF1nRjF6jzrLvR3m1Yg4l2HwzeMu3neoLbqej/ACzB5Xia9fFVq1WnRc9pADGghpPefau8WXte4s2Rzmo0w5uArkeVNy6Tp8YzeVfNbsXinXdiKvk4j3KJxc4y4knmSmYC4hrQXE6AXW3lWye0eaAOweUYpzCY33t3G\u002Bt0LUkjOpfRv\u002BXWUfpA9xX0cvEsFsjnOxrWbW5i3CVaeAc17sKKx33Fx3AJDSBBcOav4z0w417SMHkmHonnUrmp7AAqPXlgekGrSZsjmDH1GNc6lDQXQSZGi8azX0g7V5hvNdmRw7HfNw7QyPPX2rAZicTi8fTqYrE1a797tVHlx9pU5eFg8y\u002BWPitnYePxz\u002Bx/zLGzP5d3itfYo/wz\u002Bx/zLz8/8t14fN0lM3RkzxUTCjcQBC8r1nB6qTIlCeyEm2CAyRKY6oBrKcEooibJEy1C42SBsgYHrqaVC3tqSSiP0CSKSS9LyGSTpjqgSYp0kA8Ek5TIEUycpigZJJJAxSTwmKgSZIpkUkKIoSgYoHBGdEDllUL1VrcVbeqtbipWox8dovDPSZ\u002BVmOEf6v8AdtXumP0814f6SQP87cd/d/u2rz83bp\u002BWt6RPj9kRWDZG9TfPKbfavK696LhzafcvWM\u002BAxHo43yb/AASk4\u002BI3T9i8pdBbCxHXj4YpHNI2jlCIi8JnSCAuzKMkgalRVXGdUbphRVjokD1A0gEtB8QoXUqJuaNPzaEbyYUZd1VpKjNGgCSKLAe4Qo30qRt1x4PKk3gXhoNyo60scQVqaz7K7sMy5FWqD9clA/DvsW4l3mArVGnVry2mzeI74RuwmL06BxjWLpqYzXNxQNqjCPMIDVxbNQD4OVt1OpJBY4GeSr1ZHaBBWozYkwj69QAvquaJ0abroqPyTDzHFc1gnajkV0WEO9hafO/vXPm6dNhYV0Z3V/p3ftLs8sPxbT/64riD8XndQf7afWZXZZS/4pv/AK5qc/C9Nt0LSDyUtM9VQ0TMnuU1LRcXRIJLUbRYeCFolpCkb2R4LIY3PgpaXZ81GBeeakZ2bqVTAmUR0B7kI0JRkWF\u002BCAOKI8PFNcXTuGiEDR7J8Sj4oafZ80Q7SAToUhYhPUESlq4IBMQhPYPgjhC4fFORA0/k2/VTc0dH5ITyTOQRkS4JvnO8UY1CDi4opn69ya0J3aJRAkqxAHtoG/JhQY3MsDhRNfFUmHlMn1BYmJ2uwNIFlGhVrEczugrU42s3nxnlvu0Qn5pXIYja3FVGxh8Iyl3udvfcsytmGa45\u002B509V5doxk\u002B4Lc6VrF63H6dvWxuEp2q4qgw8nPAKy8TnuXUKj4q9Ly3L\u002B1ZmXbHZ/jyHfA302H51Y7nvuue2lFTIM6xGVYiiypWo7u85j\u002Br1mhw4ciF14/j1y5dd0GJ2lrOJ\u002BDUAzvddZ1XMs0rvtXqgngwke5c1VzXEOEUw2mO4SV636DGMxGzWLxdamypXGNcwVHNG8AGMIE\u002BZXXj\u002BO5XrWuOp5LnuLhwwGYVQfnGk8j1oNoMlzHIcsp5hmODdTpVHim2Xid4gmCJtYFe8Sea899Pf5HYT\u002BsGfu6i6zoyOffXkdXNqh\u002BRpMp95uVVfjcW90nEVB9Ux7lATdX8vybNswAdg8txdZh\u002Beyi4t9cLpOHGfTN5V9N4fD0MOzdw9ClRbyYwNHsUi4TNPSps1hWD4L8Jxzzwps3B63R7lhVvTESHChs/H0XPxf2bn2rSIv8oKrvY7KaPBlOq/1lo/5V5ewF7t1gLieDRJXs2xrsH6QvhGZ7Q5dh6lTBvFKixhcGhpEmRNzPuXd5dlWWZczcwGX4XDDX4umAg\u002BcqWzW0VUTTyHM3A8fgr49cL16p6R9m8qwFDCGpicTiaFJtN7KVI2cBBEmBYjhK7uTzXy1mlQVczxVRvZfWe4ebiUHouZ\u002Bl3GvBbl2VUaJ4PrPLz6hAWNlm2W0ee7TZZgsfj97CYjFUqVagymGsexzwCCOII5rilvejtoftzk4doMS0\u002BYuEH0HhMoynB1N/B5XgcM8aGlh2sPsCupHVJBynpen/R1mf8Ac/vmL58X0H6Xf5Os0/uf3zF8\u002BIEp8v8A4ZT8VArGWicbTWefirPKXMr13fWWvsX2cZ/Y/wCZY\u002BYfLu\u002BsVs7F2p4xx06n2rj1P8t16fzdDTROOijpFFN15HrET1QEgTCFyUwgduhSYbpgUgQEwG5IckIMhPMKhA9dHPeogesjRX6CpJJL0PGSaE6SBkkikgY6JuCdIoGTFOkgFJOmTQkxTlMoEmKdCRdFLimKdMVAJ0Ub\u002BKkKByion8VVrcVadxVWtxUrUZGOHvXiPpJ/K/Hj6n7tq9uxvDxXiXpM/K/Hf2P3bVw5u3T8trCt\u002BE\u002BjlzQJ/FKrR4jeA9oXk5C9c2Kb8I2S6CY61Sn6/wD3Xklw5cnXiyXjrFRPsZVmu3dJ7iqdQ9ZdolQ1HQFC96lp0316zaTO04wF3\u002BSZFg2ZTTp1KVOo90uLnMElLcM15w99tbKXBCm94DgHeK77F5Jl9MFtTAYeO6mBK4nPcPTy7O206I3adRoc1vK8R7FePKX2ZsxVzWnSpA1GMa1wEyLKri71w06bqsZw4nDuI\u002BiVUxJmu36q7Tw51YydxZiBTJneaStuke2ORXP5c7/tCj3sd9i3KZ61TyWeS8b7KVI/9oD6zvcVXzyk6vVosaQCZ18lNT/h/wDad7imx/8AC6H9pBkUsLVoveH7pAPArYyx84YidHWVTEnrvVzDENaIGuqnObF4e1Y2ZDo89d3lp9gXU5M6aTQuaz4bubUX/SY33lb2ROmkP/XNZ5fFePyrpaBtJVin2VUw\u002BgVqjceS411TtFipB2R4BRs\u002BxSsEsHgoHgSE8WSaOsE7YIKlDAdVEZsnaJCfiPD7lFCW2lEREeKRuI70RFgh9om6eacTdPSHV8yiAsgCoZBTE9ceCapYFDVqMpt36lRjGji4wEQfzZUbvknLJx\u002B02UYUlpxPSujSkN72rGr7bshzaOXFwOjnVY9kLU4cqzefGea7Cl8mPqqOtUp02F9V7GNHznGAF5/i9rc1qjdpvp4ZkQAwSfWVz2OzfpHF2Kxr6ztdSV0nR5VzvXkep1s6yihJqZhh55NeHH2LFxu2GDp7wwtGpXM2JsFn7FbJHaXJ/wAJtxwwtM1HMa11LfJiL6hbWbbB4HLdncxxz8dXrV8NhKtVkNDW7zWki1\u002BXNduP41cuX5DnMXtZmtV3xPR0B3NB98qk3MM4zfE/A6eJr4qq6/Q0bmONguLq4nEVvlKrz3TZdl6Egf8APph1jD1PcF24/jSeXK9a1rZfsPtBjDNTDtwzedd8ewSVjbfZViNlcRhcMa1Ku6vTL94NIAgx5r3uDyXk3pywGOx2c5Y3BYOviXCi5pFKmXQd4RMaLrOlxjn315m7MMYQR0sDuAC9u9DFOdiaOIqMBqVK1Q75FyAY18ivNsr9G\u002B1eOALsEzCMPHEVA0\u002BoSV0eF20xGwWHbsliMopY2tgZ3qzMUWtdv/GabnDfW5xk8RLbXri\u002BfPS6CfSJmUAknoY/3TFq5n6V9ocR1cFQwmCb3NL3es29i9B9G9Olm2zGEzzM6GHxOZVzUdUxDqLd87ry0XjgGgeSqPDcJkmd4tu/hMnzCu3nTwz3D2Bej\u002Bj7aHBbE5BiMt2io4zCY2rXdiadB1Bwc5ha1oPLVp4r1gARA0Xh3p2qiptnQYNaWCptP6zz9qDdzb0v0g0tyrKHud9PEPgeofeodj84xHpCzurle0mGo1svo0TiWUaYcwNqBzWg7wM6OPFeVr0v/J/aDnmZOIuMM0T/AGkHpWV7K7O5a7eweUYVjvpOZvn1ukrZaA1u60AN5AWSChx1U4fA164uadNz48ASg\u002BV0kkkHsnoBY4ZHmNQjquxIA8Q0T7wvSl596BvyPxX9YP8A3dNegoEvlFfVrnBrS5xgASV8pIEuh9GwJ27yiBP4wPcVzsjmuo9FrqVDbfL8ZintpYWj0jqlV5hjfi3RJNhchB9D8UlzGYbfbJ4MO382p1nD5tBpfPmLe1c9jvS7k1MkYPLMbiO95bTH2oN30vfydZn40f3zF8\u002BL1qhtlR2/rjZKvllTL6WOkmuzEh7m7g6QWLBrue1bmX\u002Bi7ZbDNHwinisY7iatWB6mwg8JV7LKFdtdlZ1GoKUxvlh3Z5TpzX0Xl2zez\u002BX7pweT4Ok5uj\u002BiBd6zdc76Y2tGzeDgAbuObH\u002B7es8/jVnl4nj/AJd31itzY/8AgmJ\u002BuPcsLH/wg\u002BK3tkmxl9d861YjyH3rj1Pg69P5tulxRHWyCmeqYTgryvWdyUlM43CTiiCbcFMPFIaSkEBt7KZN3J9AgYaqSVE271LKLH6DHRMiTL0PIZJJJAx1STpkDJJ0xQIpkk3FAkycJlAkxTlMUCTFJMgYpk6ZRTHRRuRusED0VG/RVa3FWn8VVrcVmtRk40XHivFvSbTLdrcY7g9rHD9Ro\u002Bxe042ZHivHvSkCdq6g/wBixcObt0/K96NX72TYinxbXLvCWj7l5hmdLosyxNGI3Kz2xyglehej7G0sJh8d05O6alICObiW\u002B\u002BFxe1dHotpMxbrOJe71mftXJ14\u002Ba5bGHdqP7is\u002BsV1OCyB2ZU8djamJFKhhgZAG85zoB00i6yquSU3NJZi3m/Gl/ius5QsUcgdT/CbW1I60gHl/6Er0WljaLGNawggCLFcBTyfEUcRTqU69M7rgbyLLZacRScN1zSOUlOWVJrpMbi6dWluu3SuM24w1OphKWNYQKlB4Bvq0n74WlXrVNyzSTylcltJhM6zHF0tyj\u002BLs624Hi5ninDNTn7RUzJ80Bfgq1Z81WH81W8fl\u002BP6HdGFqEgRaCqdXC4xrml2FriGweoV3lmONlFgHfj1F0izSPYt2m/rPvyXOYfpKeKpF7HNidRHArWp1us5TkvAzXgY6fzz9qWOd\u002BM0PP7FU6SMX/bKLF1Aa1I\u002BP2KqWJd8Y9WsMbNCzq7/jHd/3K7gnAkeCnLwcb/iVdo2xWwlTnIPsWrkD/iws7aRs4Sg/6NSPWP8ABXNnzNMHvWf9rU9ubrcN8m1WqWip4Q/FtVyjceQXGuqdmh5wpqfYHOFEzQ\u002BClpz0Y8PsWQ4HWCJmh5pNF0TOalUTR1Uok/8AruRN7MpC58ZUA7otPNIoo0ScLIImHq2\u002BkUR0QsHV8yjI6qCJ9wvLvSLmNSltDiaVRz302BgY2bCWg\u002B8leouNivIvSZSqVdq8VSo031HkshrGyT8W3gu/483llcPyLnFz9XNnx8XSaPG69j2H2WyPH7L5dmGNwXTYmtS33uNV4BMngCAvL8r2F2pzJodRymrTYfnVyKY9t132B27y3ZLK6OzuOweMrY/AM6Kr0Yb0ZdrZxdMX5L6M6fGfTwd1rU9J2VZZgPR3mZweAw9BzeihzGAG9Vk31XhHBeu5ftgdvc1ZsziMrbh8vxALqxFUmpDOsIMQLgcF2WU7FbMZY5jsPlFB1Rmj6w6Q\u002B1bxHP8AogzLLsDsNSGNx\u002BEwp6eoYrVmstOtytjaHaDIMwyrF5Phc6wFXF4\u002Bi/C0G06oeC97S1olsxcry30z06dPbd9OnTaxgw9OGtEAWPBYGxkf54ZL/WFD941B2mWeiLNajv8AtDM8Nh2jhSBqE\u002B5Wtp8gb6Ocno5zkWPrnMK1YYZ1Wqxjm7rmucYaRbsDmvXDqvPfT3\u002BR\u002BD/rBn7uog81xu3O1mNZu187rhvKk1tP9kBen\u002Bg7EYjFbJ4uria9StU\u002BHvG89xcSOjp8SvDV7b6BPyPxf6e/93TQeg8V8\u002Bel7\u002BUXNP7n9yxfQfEL589L38ouaf3P7liDlF9B\u002BiH\u002BTvLf77969fPi\u002Bg/RD/J3llj/AD3D/bPQdWvB/TZ\u002BXL/0en7iveYK8R9L2W5hj9uX/AcDicT8RTbNKkXCY0t4oPPl6Z/k/wD8dZn\u002Bjs/aXPZf6PNrcYR/2WaDTxr1Gs9kz7F0uQUK3ovr1Mdn4ZiBj6fR0mYN285paQTvb26AL8JQevBVc5/ibG/o9T9krzDMPTA\u002BC3L8laDwdXqz7APtWPS9JG0\u002BZZpQwzn4WlQr1W030qdAEOa4wRLpPFBwQuYF1fwuS5zi6YfhcozDEMOjqWGe4HzAX0fgMjybAHewWVYKg76TKLQfXErQ5RAQeX\u002BjPOMBsls3iMHtFUqZdin4x9VtGtReHlpYwA7sTFvetLH\u002BlfZygS3DUMZizzawMHtM\u002BxcP6b3udty9rjIZhqYHtP2rh0HqNb0q4vMMRTwOGymjh6eIeKRe\u002BqXuAdaRAAkLrqPo12Opth2WVKp5vxNSfY4LwvJROc4L9Ip/tBfUaDCwGx2y\u002BCcHYfI8IHDQvaah/wCKVm\u002BlinSo\u002BjjM2UqdOkB0W6GNAHyrBoO5deuK9NTi3YSuB86vTB9aDwbgEkkkHW\u002Bh5jnekPL3ASGNquPd8U8faF9Arwf0Jfl3T/R6nuXvCBLg/TLVIyjAUPmvxJcfJpH/ADFd4uA9M38Ay7n0z/2Vjn8avHy8Zxny58V0Gytsqq/0x/ZC5/F/LnxK6PZqBk/jUK5dT4R16XyalOzU8oWnqJxovM9RTJTk3HJMkCFBJPVKYG2025-09-17T15:46:21.260871071Z AhlOIhUFMpSgRAyECHaJRSULdSnnvQfoYUx0TlJd3lNqknTQgZMnTFAkikhc8QiiTRdNvhIVBKIUJoUgIKEoAKY6InDRMVAN0yc6plFMdUxTlMdEAu0QPRoHKKieq1dWXqtV4qVqMnHfN\u002BsvIPSiP\u002B9lTh8Sxev47hP0gvJvS43d2npEfOwjSf1nD7Fx5\u002BHbp\u002BVL0f0aOJx\u002BJw1dm\u002B0021QJi7Hgg\u002Bsrn/AEgUxS2vxkNhrtxw82CfbK6H0amc/rforv22LJ9KNPo9qGk/zmHY72uH2Li6z5OQrYrE4bfp0MxdhmVCHOp9GCHHSTbwVSrjcW3XM8M76zGqfFvHShgI3iCQO4arNr1qbnxIJPCF14zYW\u002B5VM2rNP8Lwbj4tCiOe1J\u002BUwzyOTwq9YNJu1vqVTEU6JPyTPUtzjxY7q1Bnrz/NMI/NcETc8aD1qRHguffQw5maTfUoH4ehBhpA7ir2cU7\u002BTqfw9hyILCPJEM9wnE\u002Btce6izds\u002BqPBxQGkf9bU9aenE9Su0/DGAcbvZ5pOzDLHm76J8YXEOp1AbVj5gIC2sJiq0\u002BSvpT9nq39O3Dsle/eIw087SndQyOob9AY065\u002B9cN8f9NntTb\u002BIbxaf7Sen/ACnq/wAO3dl\u002BTPvFOe6qfvUlPAZew/FwPCoSuGp16\u002B81pqRJEwVtZOB0433vefzipy4WfbXHnLfC3tVQpsy2aZ3g1zSbzF4\u002B1DsxDqB7nKfOWl\u002BVV2jg2fVdVdknfFvb\u002Bd96k\u002BK35Ovw3ZAhXKGnkqWGOiuYfs\u002BS5V0WW/YpadqbZUbICmZdjVkEwHePgipCyalco6QMFQG0EjzSaOsPBE0cO5OBdMAgdYTok8WRRJ9aZ32qCCn2B4lF81C2QwD84ogOqUVE7U24LisMAfTXhgRxJ/8A1yu4M3jkuDyuoanpmoOPCpVb6qDh9i9H43zef8n4vWZO8L8F84ekf8us3/SD7gvo49oeC\u002BcfSP8Al1m/6QfcF9N4Gt6E/wAu6f6PU9wXvPFeDehP8uqf6PU9wXteYZvlWXgnG5lhMPGoqVmg\u002BpB4p6bPy6q/o9P3Ln9jPywyX\u002BsKH7xq7rbPZrMdtNpKmbZA/C4jAFjKQruqgNLmi8cePJUGbAZ3sy\u002BltFjcTl9Shl1RmJfTpVHl7t1wMCWge1B7adV596e/yPwf9YM/d1FiZh6YMS8fiGS0aZ51qpf7AB71JsNnmK272gq5dtFQw2IwdCg7E06LacNDw5rQdZNnHUoPKWjeMAE\u002BF17H6Gcxy/Kdla9HNcfhcBVqYx1RjMTVbTc5hYwbwDiJEtI8iu\u002BwGU5XgB\u002BJZdhMP306LWk\u002BxeP\u002Bnv8AK/CfoDP3lRB6Xj9udk8EJq53hqh4CiTV/ZBXF51sRiNtc6qbTZfmWGpZfjgws32O34a0Mndj83mvJ19Hejf8g8n/AEce8oOXy70RZTSM47M8ViTyphtMe2Vy\u002B1O0GebH53iNm8hzJ\u002BHy7CBoosdSpvcN9rXu6xbPae4r3BfPnpe/lDzT\u002B6/dU0GbmG1W0mP/AIVnWNeOTam4PU2AvYvQx0h2Fo1KhLjUr1HBzrk3j7F4IvoP0Q/yd5Z/e/vnoOrK8o/yhSd3JBJia/8A5a9XXlH\u002BULpkf/3H/lIPKCtXY9oftfk7HCWnH0ARzHSBZS1tjPyxyX9Pw/7wIPphLiPFJLkg8H9Nn5d1f0en7iuJXY\u002BmWt0m3\u002BNZHyVOkw/qB3/MuOQamyLG1NrcnpvEtfjqLSOYL2r6aXzNsbI2wyd0GG46i4nkBUavojGZ7kmDE4rOMBRtMPrtB9UoNFcR6bCBsLUkgTiKYHfqruM9IeyGGB/7WFYjhSovd7Yj2rmtos2wvpJwg2f2ec\u002BjiKLxin1MW3cYWNBbALd4zLxwQeQJL0nCeiDN3OjFZvgaQ4mkHP8AeGrZwfogyxn8MzjF1j/sqbWe/eQcv6DaTqm27ngH4vCVHH1tH2r3QryrbTI8NsBklPNdm8RiqGMrV24Z9Wo4PJYWucRBEC7Rw/x8\u002Bxm1G0eLM187x5HJtdzR6hAQfSWIr0MOwvxFelRaNXPeGj2rzP0uZlgcdUyyngcfhcVudMago1mv3T1ImDbj7V5HVqVKry\u002BrUe9x1LnElXsl7dXwH2rHU\u002BNXj5VsUZqnxXS7OgtydpPFxI9a5rFfLO8V0uR/xPRH1v2iuXV\u002BLr0vk0WHq3TzxQs7Cc6LzvTpSnBQgp9Cij4JTZCLhKEBA2RA2QBFIiECBuiQMKKUH6HFIpcEy7PKdJNIlSNAcYBCojKAlWDSMWhVasgkFSkC59tVC510z5UbiSVm1oReQdUYffVV3apt4gymi61/IpbxVRlRTseChiZpJF0ihBCPVVkJTIiLoTxRTcExTpipCBKB6MoHG5UVE/VVq3FWXqrV1KlajKxuon6QXlHpc/Kah\u002Bht/bevVsfJb5ry30v0iM9wtX6WG3fU5x\u002B1cefh24eWT6Nnhm0j2k9rDuH/ABNP2Kh6WZG0lA//AEjf23qXYR\u002B5tbhRPba9v/CT9ib0vUy3PMJV\u002Blh931OP3rlXT/c86x0tzjDPm3Q1RHjufcsXMnupA1KZhwOq2s2IbiMM8675aPNpP2LDzb5J/wD64r1dPw5c/a1XGIrOfd82nQKM1XueQTw5JmdofV\u002B1CPlT4Lrkc9pjVim5zz2Tqq7MR0tUsDXNtqUVa9Cr4hRzD6Xj9hTIndUjQekDHkEOBIgREIjSbpf1of8A4ikeG64e1Sk3TISozRbMbxlAcOJgPI8lMT1kpG8EwV3Ycg9v2IKmGfwc3zVp3aHimfomCi\u002Bg9g3iWmORWlldSMWz6w96gxF6XmFHTIo4iluyJcs8p7LxuV1GZD/s3En/AGTv2SsnZN0GoO8LZxzekwNZo\u002BdTcB5hYGyzvjnNXHh4rvy\u002BUdzhSJar\u002BGHU8lnYIyGhaeDu2O5cq6ROzn3KakPimHuUDdJU9H5NvgpRJT7SlpCx8So6Pa81PRHVKyHaBuz3ImgSEwBgBSNEi/GUEcR6kxHvREWgpwOtCCo0dXzKL5qJrYHmUztAgA9h54ryfOM4dkHpBqZsygK7qFZ8Uy7dDt5pbrHevWCPi3FeJ\u002BkQRtFjf6Ur0fjfJ5/yPi3cx9LeeVT\u002BJYDBYVsfODqjvXb3LsNnNldn9osmwmf5xlwxOYY1nTV6nTVGhzj\u002Ba1wHDkvCj2Svo/0cfkNlH6OPeV9J4XM\u002BlHJMpyXYmrVynL6GDq9NTb0lNsPje03tYsPUvF3S6S65OpK949Nf5C1f0in714MdEHvXoUaW7B0CRAdXqEetavpI/IXOP0c\u002B8Kp6Iv5O8r/vp/3z1a9JH5C5x\u002Bjn3hB85cF6D6BAf878YYt\u002BD3j/APqU159wXpf\u002BT\u002BAc7zQxcYZon\u002B1/7IPY14Z6cqpqbbBh/msJTYPW532r3NxDQS4hoGpJXivpVyjNM321q1sry/E42l0VNnSUKZewOAuN4W4hB52vo70bfkHk/wCjj3leO4L0c7W4nXLm0Bzq1WD2SSu5yvbrKdk8tw\u002BzmZ4XHVMbgGClWNBjHM3tbEuBOvJB6Svnz0u/yiZn/dfuWLuMX6YMrb/BMmxlX\u002Blexnu3k\u002BE2Rynbzd2uxVbG4Q47tYZjmnd3D0fa3eO5OnFB42V9B\u002BiH\u002BTvLP73989Q4L0abI4eN/A1sSedWu73NIC8z9IuKxWTbVYzJcpxeKwWXUBTFPD0azmsG8xrjaeJcSg99Xlvp4wmMxtTJqWDweIxLmCsT0VMuiSyNB3FeS1KlSo7eq1HvPNzpK9g9AH8UZn\u002BkN/ZQee4PYnazFmKWRYtvfVaKf7ULZwexO0GztShtHmNGgzD5fWp4ipTbUDnkNeDAi3tXuoXP\u002Bkj8g83/AEc\u002B9BxeN9MNKIweR1HGdatePYAsXGelnaKoT8HwmX4dvD4tziPW6PYvP0uBQe3bKbO5LtfkOH2kz/AjFZjjN/pajar6YO64sFmuA0aFu4TYfZLC/JZHh3f0pdU/aJUPolaWejzKg7WKp8jVeR711KDmNtsHgsu2JzepgsFhsO4YZwBpUmtiRHAd6\u002Bd4HJfR3pI/ITN/6A\u002B8L5yQJeg\u002BgUf98MUeWXv/AHlNefL0v0AgfhrMnEXGHaB\u002Bt/gg9j4pJJIPOPT7VI2by\u002BhwfjN/9Vjh/wAy8YXsXp//AImyz9Id\u002ByvHUCWhk2tY9w\u002B1Z60Mn0reA\u002B1Y6nxXj5VcReqV0\u002BUgNyqgB9GfbK5fEfLHxXUZYP8Asyh9Vcur4jr0vK809ROUDOyiJXnegpunCYpxqgeTESlKZLRFOCjPZQSLIj2RCB6fFHA5IGaSn80V\u002BhxFkyMCyFxHNdnlRvMKF1ZwNipaihdTkqNJKeJqDRyT3F8k6lCxkKQNREJaoyxWi2yjcIUsVAWhMaY5KeEJFkwQFlkhZG7wUROtkEgceBUrHm0quxwBU7DKCUmyZJMqhJinQnVRTGEDtSjcUDrFKInqtW4qy9VqtyVmtRk4/TzXmHpf/jPBf0Lv2l6fmEhvmvMvS\u002BD\u002BEcC7gaTh7f8AFcufh14eXIbMv6LaXL36fHBvrt9q1PTJSHSZZVAuekaT\u002BrH2rFwDuhzPB1voV2O9TgV1HpfpTlGDrD5uI3fW0/cuNdf90eNbSP3PgLtJxQB/UesjN/kHnuWttcIy6lVj5PEMd9n2rHzN29hXEfRXp6Xhz6nlTYesPBAT8afBCH3b5oC/43yXdxNUd8TWHeFGdad9CmqO\u002BLq95BQOd2PFGVgH45n9pSE3VXfHTs81KXXCVZfZKTcJE9YKNzrhIuG8FAbjyTVDZA50\u002BtM91igesfivMe9QV3RicP4n7FJWd8WfJV8Q78Yw/ifsQ\u002B3cU\u002Bvhqc3lon1Ll9nvi8a9vJxC6TCmcLR\u002BoPcubwnxWdV28qzvevPw\u002B3p5eY7nLz2VqYTSe5Y2VundWxg\u002BzbSFzrcW29jyUtETTbHJRgdQeClo/Jt8FlU9IQ9S0rAqOmPjFIwHrDkVKDbcBGNBHema1HGnmoBIuU0daE7xD051QQNA3f7RUbhJ8ZUjBbxcUJEhBE75Fy8T9Ix/7xYz\u002BlK9sdZjgvO8vo0sR6YKNKvTZUYa1UlrhIMU3EW8QvR\u002BN8nn/I\u002BLy46L6G2EzDAYPYbKfhmOw2H3aAB6WqGwZOsrqKbWUwGU2NY3k0QPUvnL0j/l1m/6QfcF9J4XqPpBxmC2pyM5HkGOwuPx76rXilSqjstuTOllxWC9FO01bd6d\u002BCwwOu/VLiP1QR7VD6E/y7pfo9T3Be8jtIPIhtlidgsMzZP8HUcbWwM71fpi1p3/AIywifnc1Bl23eabWZxhtn8fhMHTy/HP6Ku2mHbxbrG9NtFz/pd/lEzX\u002B5/csVT0cfl1lH6QPcUHsQ9G\u002BxjbfgcnxxNX/qXKelHLsLsjlODfs02plb8TVdTrPoVnhz2htgTMr1g6rzL/ACgP4nyv9Id\u002Byg8lxeNxmLM4vF4jEHnUql3vXuHoT/ISl\u002BkVPevByvePQn\u002BQlL9Iqe9B23EL5u9IVQVduM4cNBinN9VvsX0jy8V8zbZfljnX9YV/3jkGUvoP0RfyeZX/AHv756\u002BfF9B\u002BiIEejzK5H\u002Bt/evQdWF8\u002Bel3\u002BUTNP7n9yxfQYXz56Xf5RM0/uf3LEHKL2L0AfxRmf6Q39leOr2f0BUSNncwr8H4vcHkxp/wCZB6Ouf9JH5CZv\u002Bjn3roIK5f0rPe3YDMm0wXPe1jQ0amajZ9hQfPKSvYfJ83xJjD5Tj6x/Mw7ne4LSw\u002BxW1dcA08ixYn6bQz9qEHt3o3EbCZR\u002Bjj3ldAvPcj2yyPZjIcHkmbVa7Mfg6fRV6VOkXbrtYnTjzRP9LWzLXQMLmjxzbRZHteg2fSpWNH0fZs8cWNZ\u002Bs9rftXzwvY802tyvbzAv2TyuljcPiscRuVMTTaGDcIqGd1xOjDwWZh/Q9jHfwjPKFP8Ao6Bf7yEHl69N9AAP4WzMxboGX/tLUw/ofy0R8IzjF1Oe5TayfXKz9q6L/Rk3C/5t4mqXZiHis7Ehr\u002BxuxEAR2yg9dS8ivnqv6Q9sawLXZy5oP0KNNseYbKzsRtTtLiCTVz7Mb6huIc0eoFB6D/lB1HNo5LSnqudWcR3jcj3leSr130C4jE4p2c1MXXq13MNHcdUcXRO/OvgF6nJQfK2HwmLxH8Hwlet9SmXe5aWFwGOwLanw3BYnC746nTUizejWJ11C\u002Bl5PNeW\u002BmtzvwhgWE9UUHEeJd/gsdTw1x8vKK/yrvFdVgrZfh/6JvuC5SsfjXeK63DDdwdFp4U2j2Ll1fEdOl5qcdkQnKHQBOuD0CAS4pkhqgKUiZTTKRiUwFayI9lC3REZDZUU9MDdTpU\u002BwnhFfoEazosUg8niqhY9E3eC28\u002BLW9IRKFjrKZrmmxMKhpKEudzU4pb/ZcCoajSx265VCa90apyd5MLhPwRTFJJJABbqonMurCYhTBWDVMwRoi3VIxkkJhoQJTwpxT8EnMACuIr8UJ0RvQHRRQlC9ESgeVBG9VqupVl6q1uKlajLzCSwrzn0xAb2WGL/Hf8i9Gx/yZnmvO/TALZWe6r/yLlz8OnDy87qSA1wNwZC7v0oMbX2VFYXAqU6g87fauFLd4ASu72kbWxGxNd5jojgMO9vc4Hed7N1cXbl5jxDa5k7P4kj5u671OBXMYqtv4LX5n2LvsVhqeIwrqdUb1MkbzYneEgxHfotXOsTlVWjhqWW4BuFZTZFQfBN0E\u002BQuuvDqdsxnnw2vHOks1CX9fyXqFR2G3SH0qTgf/pz9ypvoZQTLsDhP/wAUf9K6et/DHo39vNqjpa8IHv7HivRa\u002BEyJ4IdhcMAeVHd\u002BxVnZbs\u002BT8hQ9q1OtP0z6N/bhS/49nmpS/Rdk7KdnnukspgjSKhH2pjk2QH6P\u002B9P3p60PRrji5IuMrrn5DkxMtquHd0qE7O5W7Su8f3gT1Yelycm56T3WXUO2Zy8m2LrfrD7kz9l8G5sNxlQeJBT1eJ6XJy1V80z5KviXfHUfP7F1rtlaTmwMa6PqqGvshvuY9uOjd4Fkz7VfV4p6XJdwD5wVI/mhYOIG5n1aNC4H1gLp8JltShRbS6ZroETELnc7YaWctJ1c0H2kfYuXC\u002B9dufiOpyp3yfetvB9m6wsqHUpu7gtvB9nyXOtxot7PgFLSE0WKJnZA7lLQn4OzwWRZpdsKVouYUVLtBTUtXHvRRsElE0T6j9ianqiAuPD7lAzx1jKTxcHvRESZQu1AUFdnuJQi4UjB1fMpgLSggqCx7157lH8s1D\u002Bmrfunr0V46pXlOMzfDZF6TTmuLp1alGhWqbzaQBcd5jmiJIGpHFej8b5OH5Pxe1ntDwXzj6R/y6zf9IPuC9NPpc2bmRgc2/3VP/rWJi9gcTtdjam0mHzGlhcNmLump06lMl7GnSYMTbmvpPAw/Qn\u002BXdL9Hqe4L3nivI6\u002BzjvRpSbtKzHtzKvvdAyi6j0besLmd4k2CzcR6W9o3yKODy2kOB6N5I9bo9iDJ9Lv8oua/wBz\u002B5Yqno3/AC6yj9IHuK9O2U2dyXa/JaG0ufYIYnH4ze6Rzaj2N6jiwWa4DRoR7d5Bkmz2x2OzLKctpYXGUGs6KuwnfYS9rZDiZ0KDvjMrzL/KBtk2V/pDv2V5ViM2zXEj8YzPGVvr13H3leg\u002BgBzzm\u002BaySR0DTfnvIPM6dOpVdu06VR55NbJXtXopzTLco2Np4bNswwuAritUcaWIqtpugmxhxlehyeZXz36X7\u002BkXNJ/2X7liD2DE7dbI4cTUzzDu/ow5/wCyCvNMx2Az/Ps3xecZeMKcFj678TQq1Ku7NN7i5pIiRYhefHRfTOxn5HZJ/V9D921B5dQ9EOeOBNfMsup8twvd72hWKe3mI2Nw/wDmv\u002BCKWJq5eTSNcYghrzJM7u73817AF84ekj8uc3/SD7gg6Wv6Xs9Lvicsy5g4h4e7/mC3cn2Ry7brLaW1Wb1sXRxuOnpWYVzW0huE0xAc1xFmDU6yvHTovoP0Rfyd5V/ffvnoKeH9F2ytL5SnjK/9JX/6QFxvpFxGJ2MzijlOzOJrZdg6uGFd9Om8mXlzmkyZOjBxXtK8S9PX5X4T\u002Br2fvKiDkcRtFtBiBFfPMyqDkcS\u002BPVK3PRRWrYj0i5aMRWqVt7pd7fcXTFJ5Gq5Bdb6HmOd6RMucBZjarj4dE4fag\u002BgpKaTIuklxHig\u002Baduajqu2mdOdEjG1W\u002BQeR9ix1q7Z/ljnf9YV/wB45ZSDsPQ5SNT0hYF4/m2VXH/duH/Mvfl4P6Evy8pfo9T3Be8IEvJ/8oMickE3Arn92vWF496fyfwtlYm3wd/7SDzJJJJB7D/k/tAynNXxc12A\u002BTT969NXmvoAYRkeZPjqnEtA8mj716UgQXlnpqc05phGcW4ck\u002Bbj9y9TXkfpottLTP8A9DT/AHlRY6nhePl5lW\u002BVPiuupmKFL6o9y5Gp8o7xXYubDQBwC5dXxHXpC1ASPAJN0CTolcXfT8E41TTIRNBRSm6STRdOgRECUerULtERncUxRMs0IkLT1Qn3gmK/QEAEJ\u002BjEKM4ljRZRfCxIWnnypngjRV3vdKkdiGEaqJz2k2KLElGrUBsSFZEvEuMlUptITNq1AqWL\u002B5CbRQUq5iCpd8EWRBJDVCnCoKJT7tkdFoKm3BGqsiarhvci3g1PUG7oqry4uU8C02rPFC\u002BrcqsDGpRWjVNMO50oSUuCXBRTHRA7W6I8kLlBG7iq1XVWXKtV1KlajMx/YK4H0vU2/Acvq/Oa97fIgfcu\u002Bx3YK4P0ux\u002BDMB/Su/ZXPn8XTh8o8zJhs969DpD4V6OagN/xGoB4tDgPcvO6kGy9H2LBxOxooamKtP1k/euEdufiPIe1TjgVRfhabJLX1mzyqEK62zFTFXpsq\u002BGFsPD3NLeFrLfCWrysnlSrUSf/AIjFf75yqOpEO/hOK86pKX4QpEltZzWO\u002Bb3qpicxa153KRqN\u002BlMLpONYtg6oeZ/GK/63\u002BCqva8On4TX83f4KWvWIFgD5qocRvDe3e7VbnGsd0J5qyfxmp6m/coXGrxxNX1N\u002B5SvNlC8iFQLjUn5Z58go3vqg2rO9QTVXENcZ4KLDVJfL5I5wrIzbg3Vq3\u002BtPqQdPiBpVhXKrGbpO43Tks466K5ialbi8UB8s71q3ga9es5wqYiqIiIdCzAZVrAu3ax7ws2RZfd0\u002BXT0Jmo9xn5zpWPtO3dxeGqcSCPVH3rUydwcxw8Fm7WWfhP7f/KuXH5OvL4t7JnThqXgtzC9ghc7s\u002B6cJS8PtXRYQyCs8vLXFoU9FYoiKDPBVaUQJVqjAot5QsLU9O7gp6YBnxUNKOqe9WaYsfFATG3RkdYeBTtbAunINlKGLbIHBSkce9BUFkVAwWjvKYttPBSUhLB4lM4dVQV3jq2XhnpG/KXHf0xXuzmmy8J9I/wCU2O/pivR\u002BN8nn/I\u002BLljovpnYtobsfkoA/\u002BAonzLAV8zHxX01sd\u002BSGS/1fQ/dtX0nhcn6evyPwn6ez93UXiPBe3enr8j8J\u002BnsP/wDTqLxGRCD6D9EP8neVf33756f0vfyd5r4Uv3zEfoopOpej3KmvBBLajr8jUcR7Ch9LDTV2DzLDUhv1niluU23c6KrCYHgCg\u002Be\u002BAXqv\u002BT0xpq54/wCc1tAA\u002BPSfcF5xSyfNqp3aWV457uTcO4/YvR/Q84bNDNnbQzlIxAo9D8MBpGpu78wHRMbw9YQesjRfPnpe/lFzT\u002B6/csXsR222UFjnuDt\u002BcV5ptjs3nW1W02Mz3IMGMZl2JLBSrCqxgdusaw2cQdWngg89K\u002BmdjPyOyX\u002Br6H7tq8R/0c7Zn/8Ahv8A9mj/ANa9NybbXZnJ8nwWUZjmXQY3A4enhsTS6Co7cqMaGubIaQYIIkEhB2y\u002BcfSR\u002BXOb/pB9wXr9f0lbH0my3MqlY8mYap9rQuHzzYbPdpc7xGeZeMMzBY8ivRdWqwdxwBBIAPBB5wV9BeiH\u002BTvKv77989efj0R7RkwcflMf0lT/AKFtYHbKhsHg6eyeNy\u002Bri8RgB16tJ4DHF56S03\u002Bd7EHqXFeG\u002BnKsam2rWH\u002BawlNntc7/AJlu1fTHTDvi9nHOHN2LAP7BU9LZzA\u002BkmkNpq1bEZdUf8SaDHCoBuWmSBzQePrtvQn\u002BXlL9Hqe5dhQ9EGSNPx\u002BaY945M3G\u002B8FVdodmcJ6PssftHkWKxT8Y1woj4SWPaA43sGjl7UHqSS8Gf6UNrXNIGIwre8UAqx9I\u002B2cyM4A7hhqUfsoMTaiqK\u002B1Ga1xbpMbWd63krOX0ThNktmcZg6GLxOS4R9atTbUqO3YlxEk271do7K7M0mbrdn8tI/PwzHH2hB5F6D2F\u002B3IcPmYWo4\u002BwfavdoPJea\u002BmTBYLJ9lMPWyjB4fL6rsa1jn4ak2m4t3HmJaBaQF5BXxeLrt3a\u002BLr1RyfUJ96D6pg8ivHP8AKAtnGWfo7v2l5lA5r230CW2OxX6e/wDd00HiYuYCsU8Bjqjd6ngsS9vNtJxHuX1PJTSUHmXoazPLco2bxWEzXHYXAYh2MdUFPE1W0nFu4wAw4i0grssRtbsvR7efZefqV2v90ryn061Gv20otbrTwLGu/WefcQuCQfRdbbvZGi3ffndAgfQa5x9QBXmXpGzzAZ9nTsZl1U1cNToMpNfuFswXE2IB\u002BcuBK0cH/F7vrLHPw1xU3Auq7o4mF2LybLkKX8LZ9ce9dg/Vcur9OvS\u002Bzt4J3aJhaE5uuLsQ4I5QHVHCEK3mnaNUwAlO2xKKc6JfMSKRsxAQENAST6gJ4KLH3E/FuFkLsVaTCfEMvoqNYEBWSVha\u002BGEKalig43ssVxIKnouMiSriOgoPDgCDKn6sLPwElohXw0wolGwBStsIUVNpUjZ4ozREwmL4ukVFU0Konp4kNEFOcc0Dgsuu4jiqVWqRfeTavbroDjaRFygNek7Qrn215Oqu4Uh0XU07WibmyJoIUTZBspWFVBBMYRQlBhABlC7mVLFkLmqCByr1Rcq29qgqt1StRk40dVcH6W6ZdlGBqDRtaD5tP3Lv8a07phcP6Wfybwv6Uz9h659T4t8flHlDx1l6L6M3F2QVfzcS4D9VpXntUDVeg\u002Bi\u002B\u002BQ1xP/xTv2Grg78/DyMkhgWdhI/AuJZPZxdX2mftWri6RpVH0jqx5afIrMpAtwuPabD4RI82M\u002B1demz1PpyGY2xlAdx\u002BxMPkYT5p/DMP4O\u002BxM35I\u002Ba9M8OH2mBJw7DzaPcqn8wR4qyz\u002BDsHCAqzT8SfNIVDRcW06Z5wp9XR3KtTPxFPyVgH4weCYktG3DU6rjvF4jkU72ijSrU2kloZInzUlA9c\u002BCjxRk1/6P71I0F16Q8FUoUGVD1i4eCszNEfVUWC1VqAxmHZQY0sLjJ4lRYd0Vm94VvMdKQP0igDWC\u002B60WtZZzTcrXyCpNQs7lFte34vDv\u002Bi8j1j/AAVfK3bmY4aLbziD\u002BqVe2qaTloP0agPvH2rjZnJ23eFWNm3zhad\u002BJ966bCcfALktmH/EsHeuswZ\u002BxZ5\u002BW\u002BPhpUh1QrVIfFtHcq1K4CsUvk2DuWGqsUtB9ZW6Sq0/tVqhcFRFgNlqRFgUQHxfmijqN80A7sgc5QPapmC4Ub5uoK9MdUDvKd4G5KemOq3zRObNMBQVolq8nq5bg839LBy7H0jUw1WtV32BxbMU3OFxfUBeuBpLD4ry/LP5aqX9NW/dPXp/G\u002BTh\u002BR8XYM9HexrHgjJQTHzsRVI9RcvJ9odqNoMuz3McswObYnD4TC4qrQo0mOgMY1xDQPIL6CGo8F8y7Zflhnf9YV/3jl9F4XZ\u002BiXF4naHabEYTPsRVzTDswjqraWLd0rQ4PYAYdI0cfWvWqWUZTSaGUsrwLG8m0Gge5ePegX8sMX\u002BgP/eU17cNUHzh6Rrba5pSaYp06\u002B6xg0aIFgFa9ETQfSJlY4TV/dPVX0j/AJdZv\u002BkH3BW/RD/KJlXjV/cvQfQhJkryf/KF/wD4Pv6ee\u002BOjXrB1Xk/\u002BUL//AAX/ANx/5aDyiByX0H6IbejrKv73969fPh1X0X6MaYp7A5S0caJd63E/ag6OSvmbbL8sM6/T6/7xy\u002BmV8zbY/lfnX6fX/eOQZJ4L6a2N/JDJf6vofu2r5lPBfTWxv5IZN/V9D921BrDVfOnpNqOq7eZs52orBvkGgD3L6LGq\u002BcfSP\u002BXOb/pB9wQc8vePQn\u002BQtL9Iqe9eDHRfQHodphno/wAA4a1HVXH/AHjh9iDr1wfp1rGnsTTYBarjGMP6r3fYu8Xn3p7/ACNwn6ez93UQeJJFJMUH1NlALcpwbXCCKDAf1QrKUQABYJIPPfT3\u002BR2F/rBn7uovE17Z6evyPwn9YM/d1F4mgS9t9An5HYr9Pf8Au6a8SK9t9An5G4r\u002BsH/u6aD0FJJJB4P6a/y7q/o9P3FcSux9MtUVNv8AFsH81SpMP6gd9q45AlpYW2XeLis1aVD\u002BLWd5PvWObXFWwjQ7H0WnQ1QPauveIddcjgL5jQ59K33rrquq49X6del9kNU8Jm6JzAXJ2OjUcowbopuKdvFMRdIapgIlEfkwgKP\u002BbCAjYBEDZC48E4lFfdmIorOxNMBq0K\u002BYU40us3E4xjwYF1ZHNQqC6Ol2gge6TKOjZwWsRuZYOqtVtOwWLgMQGQtOnjmEKFi02mBwRCmoBjqfL2IvhzE2MpTTPJQ1KeuqRx9NRVMfTE2T2MqtiKZCzcQwgGVexOPYdAs6vig\u002BYCkbnsgabrVy9swVkNN9FqYLEBgaIWqn01qbCp2U1UpYxg4KZuNbyU9mbKsBifo1CMaxP8OZGiuxPdNuJjTURxzExxzOSbDKM01DUo6m6TswZyUNTMmDgp7LJVTHUOoV576WW/8AdygOWKb\u002Bw9d9jM0YWEBq4j0mbtXZc1CP51jh3ahcup8XXh5jySq3qruvRW\u002BcDjaX0arXR4j/AAXFVGjc0vK6z0WP3cXj6XEsY71E/euEd\u002Bfhwe0tLoc9zCk0WbiagE8t4wsGoN2liR9Jwd/wgfYus27pGltZmNOACXh3raD9q5DEvjEV6c6Umn2uXTp\u002BU5\u002BHIZqPxqge4oAfij4p84cBXonvKgNQbhEr1Tw898rLHfi7T3KuwzRPinpVPiACeCha8BjwOZViWgYfiKfkpg7rjwVRjviWidIUgf1h4KJF\u002Bi7rlDXhzqgPFsH2qKjU6xumqv67jPBRr6FTM4dv1VFg3QfJNSf8Q2/zfsUeHdB1VqRYx56tM/nIN7qoca4bjL/O\u002BxAHCNUhfK1gnRmOD/pQPYVtbQt38qrjkA71ELAwjvx7C3/nW\u002B9dJmI6TBV2ak03e5cep8o7dP341nbMPMAd8rscC7Urh9m3RUA0XaZc6Wk96xzb4eG1RFmqxSs1o7gq2FMtCtUhYHuWGlhmk96s4U2d4qs3URxVjDDteKmC821MIwOoxRjS5UloZ4KBN7SjfqVIOCjqaqfYhpCabfNGR1EOH\u002BSHmEZHBBDHxZMryQ47CZZ6XhjcdXbQw1OtV36jtBNNwHtIXrpEU14B6Tvyox39KvR\u002BN8nD8j4vY/8APbZP/wCe4Sw5n7l5FnOyO0mcbQZhmGXZXUr4XF4qpXo1d9rWvY5xcCC4jgVxpAjRfTWx35IZL/V9D921fReF5lsDluN2Ezitm21VH8H4Orh3YdlTeFWXlzXAQwk6NK7f/SNsZMjOT/8AjVf\u002BhZPp6/I/Cf1gz93UXiMCNEHebSbJ7QbR57jM8ybL/hWX4yp0lCr0zGbzYHBzgQptkNm882T2iwu0Gf4D4Jl2E3zWqiqx\u002B7vMcwWYSdXDgvTfRv8AkLlH6OPeVU9L38neaf3X75iBH0jbF/8Azn/9Wt/0Lk/SH/3/APgP\u002BaX/AGj8B6Tp/wCa3d/dj5Td\u002Bgf/AEQvJ4ECy9h/yfmNGWZtUAhzqzGk9waY95QcV/o520/\u002BTD/8mj/1r0jZvazZ/ZzIsHkedY/4LmGDp9HXpdE9\u002B67lLQQdV3a\u002BcfSR\u002BXecfpB9wQex/wCkbYzhnN/0ar/0rzLOtitp83znG5tl2V9NgsbiKmIw9Q16bd6m9xc0w5wIkEahcQQOS\u002BmtjfyPyX\u002Br6H7tqDxWh6NdsarofllOkOb8TTj2OK9Ayzb3Z7JMtwuTY\u002BriBisBRZhqwZRLm77Ghpg8bhegDUr5czxzn53j3vMudiahJ7y4oPbP9KOyf\u002Buxn\u002B4K4rO9jM82ozbE7QZSzDvwOOf0tA1Koa4t0uOGi87OhX0rsHS6HYrJmc8HTf8ArNDvtQeQn0W7WG3Q4T/fhdjs5tRlexWTUNms\u002BfVZmGD3ulbRZvtG\u002B4vF/BwXo6\u002BffS9/KJmnjS/csQemf6Udk/8AXYv/AHBWPtdmeF9ImV08l2bL6mKoVhiX9M3oxuAObqe9wXj69L/yfwPw3mbouMO0A\u002BLr\u002B5Bl/wCi7az/AFOD/wB\u002BEx9Fu1n\u002Bpwn\u002B/C94ThBxB9KGygs6tig4axQJUdb0qbLMbLfh9U8m0B9pC8LSQeuZ/m\u002BG9JuDZkOQsrYbE0Knwt78YA1hY0FhALS68vCxf9Ee0v8A43KP97U/6E3oE/LDF/oD/wB5TXtqDxL/AER7S/8Ajcp/3tT/AKFt5Dm\u002BG9GWCdkOfMrYjE16hxbXYIB7AxwDAJcWmZpngvUl4l6e/wAscL/V7P3lRB1f\u002BlzZr/wWb/7qn/1pf6XNmv8AwWb/AO6p/wDWvE0kHpmb7I5lt3mNXarKK2FoYPGx0bMU5zXjcAYZDQ4atPFVf9Ee0v8A43KP97U/6F6T6MKTaOwOVMboaRd\u002Bs8k\u002B9dGg8SPoj2lj\u002BG5T/van/QuczbL6\u002BUvq5biSw1sO8seWElpPdK\u002BkAvANvqoq7SZm8f8Ai6jf1TH2Lnz\u002Bmo57Kv40of0i6mobrl8naXZtQA\u002BkT6gV09S7ly6vmOvS8DAshN0Y7KZoXN2OG6IwEJJlPKBjqnCXFMiwRTz1QEI70R\u002BbCgMi6MJnaot3vRX2fUqAhV3uUBqGNUJetuaYlEypCrF3enD4QaFLEEKxTxVlkipeyfpLap7DabixGoCc4vwWL0ven6W2qmRda5xQlA/EgrL6XvQ9KOaZE1fqVAVCXDQKt0ttU3SLUFoPiFNTxBaRZZ4qpxVCI12YuOARjG3hY3TDml0wnVTIrcGNEcEvhoWJ045pdOI1UyI2zjfBCcbZY3TjmmNcc0yK13YyVBUxUrNNbvQGtOhTD3XK1UEQsH0hne2Qkf61nvKvOreKo72025-09-17T15:46:21.260871071Z ZsNXYh7h8x7Xf8cfaufU8NcfLy943iQui9G1LENz7EVN38X\u002BDlpdPzpaR7FghsPW5sPiKrNoqdDpIpV2uDmQIJDSZnXgvNHo5eGL6S6bW7WVajTIq0WPnn1Y\u002BxcLicJjK2Z1DhMLiMQXUGgikwuiC7l4r0X0oYYYfOMDElowjaYPPdJ\u002B9YezuOfluOqYqk1rnlgaQeS1x5dtTO7i8uzTJc9qVWEZTjOqTM0iFVdkmdgGcsxI8WFen1AZLjUeSTeSVBVfu2knzXWdasXox5qzKc3azddl9cHvaoxlWajenA1rk8F6Oaw3SYv4qs/GVATDWR4H71Z1uR6M/bzwZTmu5HwKtPgpBlOaSD8Ef7F21TMKzQerT9R\u002B9V6ma1wexS9R\u002B9X1OV\u002Bk9LjPty9PKszBn4I/1hNUynNHOJGEfpzH3ro3Z5i2kgU6HmD96gqZ9jiIAos8Gn707uZ6fHGDSybNhTa04N8gfSH3pU8lzZrr4R36zfvWs7P8xBs9n6qB20GYz26f6qvdzTs4M/EZLmr2NAwpEHi4feh/AWax/Bx\u002BsFoHaHMj8\u002Bn\u002BohO0GZfTYP7Cd3M7eClRyXNGYijUNAQx4cesF0TqFU0z0lMgEQSqNTNcaKjR8KcJuQGN\u002B5aja76jG7zy4OAOi587b5dOEk8OY2eEYrcPAldtlohp8VxmXAU87qM4Cq4e1drgezZOacGthDZqu0ew0EcFSwps1XKJG63wXNtZZqFaw\u002BphVW6tVvDdoolWeBUjplngo29gqYwS0RwUUOiFzdIRkcEv5wTogr4YRTHmiiPUio2pgjvScEETx1F8/\u002BlD8qcf8A0pX0HUBFPxXh\u002BbYPDZ16SauCxe/0NTEVWv3DB6gdx8Wrp0\u002Bc6cvO\u002BI8n5vV49Lo3ny8T3cAQY0X0zsd\u002BSGS/1fQ/dtXBP9H2zpbAZigeYqrs8uxT8Dl\u002BGwNBjDSw9JtJm9JO60QJv3LjP69\u002BJ/P/AMflZ/aX8L\u002Bf/jnfT1\u002BR\u002BE/T2fu6i8ROi992ywDNp8qZl\u002BLeaLadYVmupi8hpHH6xXN4P0TYDFYdzxnGJY8O3RNJpHvXq/G/qf4/5PPs6d93s/E/q/435fP0\u002Bnfd23o3/IXKP0ce8qp6Xf5O80/uv3zFyf8An9/mdOzDco\u002BGjLviRXOJ6Pfi87u6Y15p6u2X\u002Bf8AhnbJU8u/B9fHxu1nVuka3cPSGRug3DCPNfQfUeTjQL2L/J//AInzT9Ib\u002Bysh3ogzMNgZxhCe9jgFfyHF0vRfTrYDPg/FPxrulpOwYDgGi194tQeqBfOPpI/LvOP0g\u002B4L1PD\u002BlXZeoDvszCjH06Iv6nFcjtFsTn20Wb4naDLKFF2Dx5GIob9UNeWOAi3BB5yV9NbG/kfkv9X0P3bV4kfRxtnvR\u002BBxE6/CqX/UvTMm222XyfKMHlGY5oaGMwNBmGxFM4eodyoxoa4SGkGCDoUHbjivlrOf44xv6RU/aK95HpG2M/8AnM//AGtb/oXlmM2C2txuMr4vDZSalCvVdUpv\u002BEUhvNJJBgunQoOOOi\u002BmdjPyOyT\u002Br6H7tq8MxGwO19Ht5JWM/QqMf\u002By4r1zZ3afZ/Lshy3LMdm2Fw2MwuFpUa1Ko6Cx7WAOB8CCg63ivn30vfyiZr40v3LF7Y3afZowRtDlMfplP714x6TcNicx2zzDMcvw9XF4OsafR16DC\u002Bm\u002BKbWmHCxggjyQccvTP8n/\u002BOc0/R2ftLz05bmIBJy/FgDUmi77l6R6AaD2Zjm1WoCyKVNkOtJJd9yD1xOE1\u002BSRIa0l1gBdB8ohJNISkIPQvQJ\u002BWGL/QH/vKa9tXjf8Ak/02uz3Mqvzm4YNHgXifcF7JfkgQ1C8R9PLg7bLDAG7cBTB/XqH7V7dfkvCPTaSdu6knTD0o9RQcQkkkg\u002BjvRv8AkJlP6OPeV0CyNiGNp7GZM1ogHA0T5lgJ9610CXz3tvbaDNP06v8AtlfQi\u002Bc9pnuqZhiqjjLnV6jie/eK58/prizsj/jej/a/ZK6Z4665jIv42o/2v2SumdJeFy6nl16XhJFkwBhEBYp2iy5uxh4JGxREXSMWQJh4JEXSaE\u002BiKaER1ATwmI64UEnzkUFM7VKUV9fbphNBhaDcOeSXwb81bY1nFpT7pK0Dhu5P8GMzuoM7dKQaVpfBu5L4N\u002BaiM3dMJ90rSGGt2Uhhj9FDWbuGU24ZWp8H/NS\u002BDEfNQ1mbh5JujcVqjDHkl8Gj5qDK6N0JdG5avwb81P8ABj9FBk9G6UuidK1hhjOif4N\u002BagyeiKXROha3wY/RS\u002BDfmoe7J6JyY0XStf4N\u002Bamdh/zUNY5ouQmk4LYOHvogdhwOCGsd9Mwodqhu7C4n\u002Bz\u002B9C1qtCBoFnbX0z/mTi2tGm6f/AOoFy6nhrj5eWDtK9sy/o9pMC7Sau76xH2qgRBUuW1OjzXBVD8yuw/8AEF5Y9N8NT0wU4r5dVA1FQH/hhcThDL3iLlq9D9LlKcqwlaB1K\u002B7Pi0/cvOcMYq\u002BIKv2nD4pap6sqpWuTZWa5EaKnVd1dbrUXVeeq4cFTqOvCsF9iJhUqjhvG61EtQ1Osd3SShODL/wCcj\u002BymafjRebq4zXvW4xaxMbQdRa9wdvkCYiFQw7\u002Bmqim8OpzoSCtjNfk6v1SsFhINI8d8LpxmxztyreKwT6YLmPDjyNlXbharqu5V3WSLEXlauM7HmFXqH8Zo\u002BBVhUFPL94uHTdmPm/4qpiqPRYqnQ395z7gxZbNJ0Vagm5A\u002B1Z2Zk/CaZ72\u002B9J5Sli6VZhD4BFrA3WthK29QpjQgCQqmJ7DfJS4EfGO8B9qxyns6cL7s8/F7QvHN4PrAK7PLjLCuKxp3doj4s9wXX5W74onvWeXhrh5rcwxs1W6B7I5BUMNMNV\u002Bh2QuTdXGcO5W8LdxVJpsOauYTie9VmrYuCpeLPBRtu0oxqzuH3KUFGngmN324p9CCmM7wUVHR\u002BSHmnIBHJNQ7A5QUZ7KCNwmkvFMNb0rvH/1mK/8AMXtrvkfNeJYf\u002BVh/6Ziv/MWep/k9T/i/\u002BPl/1j/R9T/i/wDj0JJJJfi38cJbGSfwV39J9gWOtjI/4K7\u002Bk\u002BwL7H9D/wBVH3v7Of62f8V887d1TW20zl54Yyoz9Vxb9i0fRF/KJlf99\u002B5esrbL8sM6/T68f7xy1fRF/KJlf99\u002B5ev2z\u002BiV9BnUrx30/wD8cZX\u002Bju/aXsR1K8d9P/8AHGV8/g7v2kHmZ1X0zsb\u002BRuSfoFD92F8zFfTOxn5G5J/V9D921BqhfMO01UV9pc0rgQKmMrPjlLyV9PhfLWc/xvjf0ip\u002B0UFQ8PFfVOBpOoYHD0Cb06TWnxAAXyseHivrA6oECZ1XzDtRVGI2nzWuBAqYyq4DuLyvp0ar5czj\u002BN8d\u002BkP/AGigpkL6E9EVvR3lcf7X989fPZ0X0J6Iv5O8q8Kv756DrJK8n/yg\u002Br\u002BBd2290\u002B9HGOjj3r1deUf5Qn/8J/f/APloPLcPiMRhzNDEVqU/QeW\u002B5S/hPMgQfwhizfjWd96qpQXENAkkwEH0y7ZrZsm\u002Bz\u002BVE8zg6Z\u002BxRV9ktl63byDLh9Sg1n7IC2zqmQeYek\u002BjS2PwODxWzFNuV1sRVLKr6Au9oEgGe9cUz0i7ZsbDc6Md\u002BGpE\u002BstXY/wCUFVIw\u002BTUOD31neoM/6l5Ig7Ch6S9saZl\u002BZUq3c/DUx7gF2uzWz2A27yantFtEyo/HVi6nvUX7jd1pgW9a8aK\u002BgvRB/J3lf99\u002B9egyneiTZkuJGLzVvcK1P/oUVf0RZER8RmOYs577mO9zQvRkkHkFX0j43Z2s/Z\u002BlltDEUctccIyo95DntpncBMeCnZ6Y3Bo39ngTxIxkD9hefbZflhnP9YV/3jllIPV/9Mf/APzn/wC7/wD61web1jiPxgt3TVc58cpMrEOi1swtQpDuXPn5jXHwiyD\u002BNqH9r9krp4\u002BMXMZB/G1D\u002B1\u002ByV08npFy6nl26XhMBMpAFMDZK4XN1OmIgprynMkhAQQnVOk1RYIjqhPHXCU6JN\u002BUCAnDreaeEnXcjhFfcQw4jRLoAr4ZbRLo7aKueqJoDil8HEq90fckafciapdAEugCu9Gn6PuQ1R6AckjRB8ld6PuCcU\u002B5DVEUQU/Q3V0s7gluIapdCn6KyubiW5whU1T6GyXQq5udyW4FDVPou5LogrhZ3JbgnRDVPou5MaVlcLO5MWCNENUzSQmlzV0sCAsui6pOpqN9NXixRPbrZUZtWnZZe1Lf\u002B6eOB/wBUfet6oyxssba0f92MeP8AZH3rnz8Lx8vHXtUBcWVWOGrXAhWXDqyq7wJleWPV9Ov9LQ/7v0P0tv7D15jSMVGlepelamamzTHDRmJa4\u002Bpw\u002B1eVixBnQq/acPA8S\u002BG6KjVep8S\u002BwEqjXf5wtxahcblVKroJUlWpcmVTrPPNbkZpU3fHs\u002BsrwMHzWTQf\u002BNUr/PA9q132K1jnWbmhmnU8CsEG1L64963MyPxdTwKwCepT\u002BuPeF04eHPk3MYep5hVqpjE0fAqfEmaV\u002B5Vq7oxNC/P3JFqemfxh9vmKjmvytL6w/aCu0z8e4/mKjm561L64/aCs8l8LmI\u002BTb5KbLhNR57h9qrYg/FN8lbynrVKncB9qxy8N8PLKzpvR58130g0/Z9i6vKHTSXM7TtjMsO/SWR6it/I3zRCxfi1x\u002BVdHhdB5K/hz1As7CmwWhho3B4Lm2tMuQruEMT4qkzWVcw\u002BiJVumbqVvab4H7FXZ2bcFO0yR4H7FKCOid3aCHjCKLhRQUbUkU2KGifiU/OyAak9HHNeJYf8AlYf\u002BmYr/AMxe2v8Ak14lh/5WH/pmK/8AMU6n\u002BT1P\u002BL/4\u002BZ/WP9H1P\u002BL/AOPQkkkl\u002BKfxsl5v6S8\u002BzbAbQU8PluZYvCsZQaXNo1nNaXEm5AMaR6l6QvIfSp\u002BVtT\u002BgZ7l9r\u002Bgzfyv\u002Bn6H\u002BzUl/M/6r1LJtkNnM42fy7McxytlbFYrC061arvva573NBJJBHErP2n2bybY7KcRtRkOFdRx\u002BC3TRD6rns67gwyCb2eeK63Y38jsk/q\u002Bh\u002B7asn0u/yd5p4Uv3zF\u002B0f0FwFD0ubQtjpsBllQc2se0/tFaVDKa/pSwozrE42nlbsLUdhRSZQNUEANdMlw\u002BkvKeC9s9Av5IYv9Pf\u002B7poMr/Q4P8A\u002B5P/ANL/APzUtH0k4fZ2Nna2VVMR\u002BC/xM12VgOk6Pqb26RaY0kr1IL5n2y/LLO/6wr/vHIPU6PpdyAt\u002BNy/MmO5Naxw/aC47H\u002BjranFV6uPwuEoVqOIe6rTArtBLXGRrHAhcMV9S5P8AxRgv0en\u002ByEHgFfYLa6i4CrktYCblr2PA9RK90obTbO193czzLt8jsfCWBw8platoM8l8oBB9U0MXha0mjiqNUDXdeDHqXzFnQIznHAj/AOIf\u002B0VUBIMgwfFfTmDyzAvyzCsxWX4Wq4UWh/SUWmTuiZkIPmI6L6E9EX8neVeFX989ax2a2bJvs9lJ/wDs6f3Lxv0h5tmWU7Z4/L8mzPF4DA0HMFLD4Ws6nSZ1GlwDWmB1iT4lB7yvH/8AKAe45nlVOeqKL3DzI\u002B4Lk8PtxtbQMsz3FH68P/aBXZ7DZc30hYfE47arFV8XVwjxSo7hbTAaRJENAQeVKzlTQ/NcG12jq7Af1gvZa/ol2cfJpYzMqR4DpGkD1t\u002B1Z9f0VYPLx\u002BEKGb13/Bfjtx9Mdbd60T5IPUDqUl5jQ9MOBdHwjJMSz6lUO94Cv0PS1sy8gVMLmdLmTSaR7HIMf/KF1yL/AO4/8peUL1Hbp\u002BI9InwKpstgq\u002BJpYDpG1nVCykAX7kAbzgTZq4/EbEbWUJ38jxTo\u002BgA/3Sg54r6E9ErCz0eZU1wgxVPrqvP2rxA7M7Sf/wBv5t/\u002BHU\u002B5e2bD5rlWXbKZbl\u002BPzLBYPGUqO7Vw9eu2nUY6TYtJBB8UHWpKvRx2CruDaOMw9UnQMqAn2Kwg\u002BZtsvywzn9Pr/vHLKWrtiQdr85IM/j9f945ZSBarWzP5Nngspkb7fFaubGGs8Fz5eY1PFBs6JzVh\u002Bi1x9i6YDryub2aB/Cg\u002BoV0rbvXLqeXfpeEgFpTcER7MJjouboFqIaphqkLOQONSEmjVKOKQN1KowEhIqhMPYn/nEBk9ZGCUA1Tor77LbJbpRpLeOAN1LdCNOmCPdSDUaSAIS3UaSACEoRwEyYB3U26jSQBCW6jKYoBhNCIlJAMd6YhEmKAHCyBwujcbIXFZaRuGqicLFTOUTuKmrFeo2yyNpqYqbP5g08MM93qBP2LZfosnaL\u002BIsxP/ANLU/ZKxy8LHizhEgKCtA1Vp8SqeNFUsIo0atZ8Tu02Fx9i8z1u525AxOwlStMncpVPW5v2FeTL1rFipiPRpFWm9lQYAbzXtIcC1t5B8F5OQrWen4ZWIrCPBU6lWyOvgs2/\u002BVZgf/tn/AHKvUy/OI/irHedEhdZEtQPqC8qnXqCVbflmcHTLcUPFir1MqzeTOArDxC1GarYd04yiP9o33roaossPDZZmNPGUn1cMWMa9pJJ0AK36sbq6TwxWHmbobVHcVz73fFs\u002BuPetrNXgV3ibXXPOqdRt/nBb4scm/iXg0gfBVcQ/8ZoeaatVBoi/JVa9X4\u002BgZ5\u002B5SFabHjpj9VUs2dPRR9Ie8J21fjCZ\u002Baq2Y1J3IMmeHik8l8NCu\u002BaTfJaGROG9XPGG/asV73Gk2ATYLQyR7216m81waWDUQNVjn4b4\u002BYbasT8FqDgXD3LQ2fqTQCpbRjfy9jhfdqC/kVPs3JoeBWP9rf8AudfgzZi0cN2fJZeCPVZZaeEkj1rm6LjDceKt0tVUZqPFWqB1lEWafY8VZHDwKr0bNU7eA7j9ilQ51RHh4piLIiLhRUdD5IIj2k1GOiCL5yCN/Y814nQ/lZf\u002BmYr3VF7Y\u002BzPNeHYzEDAekfE4\u002BtTqOo0sZiN7dbJuXi3rU5cby6XOTzZXzv6rw5dT8Xnx4zbZf/HoySx8NtNk9cD8ZNI8qjCFebmWXuuMdhv96F\u002BR5fi9bj543/4/knP8D8nh8unf/lWl516Qtls\u002BzLPDj8vy2risO6k1ocwg3Eg2mV6BSxGHq/JV6VT6rwV0GTT8DEfSK\u002Br/AELjeP5XvPp9n\u002BzfDlx/M959VmbI4/AU9nMswFTHYZuKw2EpUq1E1W77HtYAQRMgggqj6XnN/wBHWZneEO6KO/41i8S2yj/PDOhw\u002BH14HL4xy1vRWBidtsvwOJAr4WoKofRqdam6KTyJabGCAfJfsn75ycr230C/khi/6wf\u002B7prrXbNbN7x/7v5T/wDh0/uXmvpLzbH7IbSUMHs1VZlmGq4Ztd9GjSaGF5c5pO7EaNCD19fM\u002B2X5ZZ3/AFhX/eOXQ4T0pbVUbVamDxP9JQj9khdCz0at2hwVPP3ZwaGJzNgxlSmMPLGuqDfIHWmATCDyYr6rwtIYfC0qAM9GxrJ8BC8bxnojzmnfD5jgqzRJhwc0nygrusN6R9kKrg1\u002BZuouP06D4nxAhB02aOLMrxb2mC2g8j9Ur5YGi\u002BjsZtPs5jMrxVPC53gKlSpRcxjOnaHOcWmAATJK8Eq7P59QZv1sjzOm0SZdhHge0IM06L6vOgXylUp1Kbtx9N7Xci0gr6sHWa0i4I4IEF85ekn8u84/SD7gvo4L5x9JH5d5x\u002BkH3BBzy9l9AFMjIMxq8HYoNHiGj7140vbfQL\u002BR2L/rB/7umg9BWdtPVNDZnNa4Emngqzx5MJWisrbL8j86/q\u002Bv\u002B7cg\u002BZuCSXAJIPYf8n/\u002BJs0/SG/sr01ebegGm4ZBmVb5rsUGjxDR94XpKBL5v9Ij21NuM3cLxiXN8xb7F9IL5m2z/LDOv0\u002Bv\u002B8cgyYCnoYvF0GltHFV6bTqGVCAVClxCD6KyXZjIa\u002Bz\u002BA\u002BG5NgK9d2GpmrVdh27737olxdEyTPFDX2B2Qr9vI6I/o6j2fskLbyb\u002BKMF\u002Bj0/2QraDz7aP0dbL4XJcfjsLhq9KrQw9SrTHTOc0FrSRY\u002BC8nzfRngvoba1zW7LZqXEAHB1R62EL54zf5vgufL5RqeEmy38Y1J4UT7wujb2lz\u002Byjfx6s7gKUe0Lfb2rLj1PLv0/ilOibxSKc3ErDoEahEdUItwTppDg2TC5SiQk0XUUQTs7aTeATgdcoCiEXmhFynhFffyUoN6ybeXRwSSmJQFwTb3egklKVHvd6W/3oJJslKi30t/vQSSlN1EXidU2/3pomlNKh3xOqXSd6gm3k0qE1O9Manegm3kt5QGp3hCavegn3roS5QGqOaY1O9RUznIHOF1A6tbVA6rfVRU7nKNzoUDqveo3Ve9RZEjnzKz88aauS46m3V2HqNHm0qd1W2qjxZ3stxB/2TvcscvDTxWpEKXK8xOW404gURVloG6X7sQTfQ81HUHVkKpXXlj1PSH46lmuzznMpuaMVQqt3TwIBBC8aDC4r1vYIMq7PND2gmlWe0d0gfYV5VVYaVZ9I6scQfJarHD2tjv8AC5tj8RkwzJ\u002BFy5lDdBkvfMepZeIz9hg7mD/sh32rlH5pjqWVnLGViMLYdHujgZF4nhzWXVr1WgQ72LXuuR2GIztptu0f1P8AFUK2aBxPUp\u002BTP8Vx\u002BJzOtTqFnSwQY7IUT8wzItljKxB4il/gklPZ09fFB4PUZfuVGvTo1e1SbPdZcniMTn5LnUziNw8A2EqH4QrUS\u002BrjsQwgwWEldJx5ftnZ\u002BmvicjwFeoXva\u002BTr11XOy2UtbPRkX4uJWBmdWtRo1WCtUcbGZMqDJKdPHViys588w6CtdvL9s7x3w6V\u002BTZQ0Q6rTAHN4UbsDs\u002BB1sRhZHN7VTxWS4OjSc9vSuI5vVbGZfhqeEe9rHbzWkglx5KTjv2tv8NMf5vNkGvRty/wQjF7PsMCq2O5jvuXJwSOyU5Do7JPkr2fyz3/w65uLygM3gwkRI6imw9TBVDNOiY72hcy0kYS02Z9i0dnq4rNIBBhS8Zjc5e6faVlN2U1Sxu7uwfaFBsid6lUngQrmcN38qxIP\u002BrJ9QlZ\u002Bxrr1Wzy\u002B1Tj8UvydhhtGrQwbuqCs3DnsrQwdmAd65ttCndzT3qzSOsKtSu4Kxh9SqLtDTzU7NR4H7FBR7PmrDBJHn9iiD\u002BaER\u002Bb4pgNPFFGigjoj4sBOLuSoXpA\u002BKcjigiqjUd6ws32VybMa769bDFlV93Ppu3ZPONPYt2r2fNIjrlWXC5Z7uFxno9wLr0cdVpj8\u002BmHfcqOI9HRZTL6WatJGgNEj3OK9EcOqocVah5j3rU58mfT415lidh8\u002BoEmjWo1x\u002BbU\u002B8Ko3C7W5YDu0saxo/wBUSR/wletPEuMBQu4yrOpZdc7\u002BPw3ZHg2ZYGhXxVSti8LVFeo4uqOLy0kk3NwpdlThsh2gw\u002Bb0qdaq6hvRTLxB3mlusd69sq0aVVpbVpU6gjRzQVlYrZ7JcRerl1CTeWDdPshdZ\u002BRWb\u002BPPpkt9I\u002BHJ62Wub41v/wDFcR6RalTanOaGY4QUabaeGbR3HVZJhzjOn5y7\u002BpsnkRs3Bub3is/71mYzYrL3E9Bia9Ik2mHAexdJ\u002BSxfx68oq5JmlPXCOd3sIPuX0HsbicN/mtlOG\u002BEUulpYKix7N8bzXBjQQR4rz3F7J43DN3sPj2PBMQ4Fvulc1WzKvhsTWwtWuRUovdTdxEgwbldOPV7nPl088voIWvMCOa\u002BTxZoXbUdocbSYW08wexp1DXwD6oVFuHyx4FR\u002BX03NN95r3gH2wt\u002BpPtnsrCyb\u002BOMD\u002BkM/aC\u002BpTqvn3D4bJWYmlXZh6tJ9J4e3dqbwkGeK9CwvpBJI6ajRd4bzPvV74nbXdYqlh6tJ3wikx7ACTvCYXzhhtrdpsO4GlnuPAbo11YuA8jIXsGK23wGIy\u002BvRFLdq1KbmNiq0gEgiTMLxWpkuZM0oCoOdN4dPqKvdEyugwvpK2uoRv4\u002BniANBVoM\u002BwArr2ej6htVgqO0OKzKth8bmFJteo1tMOYC4DQa8uK8qfluYgXy/Ff7ly\u002BitjMRQOyuUUempmqzA0WOZvCWkMAII1mVrUcH/AKHOW0g88F//ALFPl\u002BbYL0Xh2z2YDEZgcQ74W2tQY1tnANjdLvzDxXp68M9OVU1dt2sOlLCU2D1uP/Mg77CelDZOvapiMVhj/taBP7MqfO9qMgzfZnM8JlmaUMTiMRg61OlRbIe5xYRAaRK\u002Bf10Ho3/LrKP0ge4oMXE4TF4W2KwlegZj4ymW\u002B9QSvq94Dpa5rSDwIWdjMiyTGEnFZRgKzj85\u002BHYT64Qcf6BPyOxn9YP/AHdNegryD0i55jtj8\u002BpZTsvVo5dhHYZtarSp0GOBqFzgT1mk6Bq56l6SdsWO62Z06nc7DU/saEH0AvmTa17am1eb1G9l\u002BOrOHgXuXX4X0t7Q0yBXwWXVh9RzT\u002B1C0MT6KsRmAOY4fOqTTih03R1KBG6XdaJBvryQeWpcQu8xfop2npAmjVy/EAaBlYgn9ZoWRitgtrsO\u002BKmTVXNAnepua8ewoPoXC0hQw1KgDIpsDAfAQpFkjabZsiTtBlLTxBxlOR7VbwmaZZjBOEzLB4gf7Ku13uKDP28/I/M4P8z9oXgGb9pq989IVQUtjMxeTrTa31vaPtXgWcdsLny\u002BTU8LOyh/GK/1At\u002Bn2isLZQDexLuQaPf9y26d5XHn5d\u002Bn8Yk1KTjuoZunJtqsOhyU6AXCJqAuCTEuCYEyoqQapwesUzTokNSUBBPKYc0kV9578jVLpLKj0/CUJrwNV0ccX\u002BkTdIL\u002BCoOr/nJunvqhi/0qbpVQNe\u002BqHp\u002B9QxodKEjVCzvhB4lMa/JyuGNE1UJrBZxxHehNfvTDGl0oQ9N3rONfvQnEGNUwaXTd6Z1ZZhr96E1zzUxWma4Qmusx1czqhNcxYpg0jiEDsRAusx1c8CgdXMapg0nYkRZROxSzXVzGqifWPNMVpuxV1C7FrMfWM3KifXj5yzY003YtWaNTpcoxTh9F4/4Vzr69tVvbMxVy2qHXBqkHvsFjlPY\u002BnklUQ2yq1gZlXKwJYqlQGYXlel2vo5qTleLp/RrBw8wPuXnee0jSz/H0ho3EVAPDeK7v0bPh2YUidWscB4b33rkNtKfRbV49sQTU3vWAftVrPH5OWqZ1i3Yytl0tFOjAB3RcEA/aqOMrvc4gkGEGNBp7Q1bRvsa7xtH2KPEGXu8Au3GSpaM4ajVw7XvbLiJN1PgTOEjg1xAQUj\u002BKN8EWXn8VeP8AaFL4Tj5Gz5IrL/nMR9ce4LTYfiysw2q1\u002B9wI9S1xKp0gDmBBA7M\u002B9Vcvw/Q5/Uqb8iq49WIhW6P8Y/2VG22dUgOZ9wWv4ZxqZh/B3eCo4n\u002BDnj1Vex3yDvqqjiL4c\u002BCzxWoGUqQobwpsBjWAgaAHtgDUKUfwbyUIPXb4raLmKAOEqTfqH3Knk9NlLM61Ok0Mb0bHQOcuVvE/wWpP0D7lVy4/9sVf6FnvcsTw19xfzT\u002BLcX/Qv/ZKxtjnRXqDmFv4pnSYaqyJ3mEesLmNk3xjHDmFnh8avL5R3eGPZWhhXSzRZWGd2fFaeCMs81htp0D1grOH1PiqlDtq3hhL3awFEXaJlscirFPtjz\u002BxZtU4gMIoVmtdw3myq4xWaUgDUhxHGmAfsRMb40HijP3LnTmWLjrVXsP51MfconZjWd1fhRPcHJg6Kh8kB3o/mrlnYioYD61Uf2iVE98mS\u002BfEpg6StVpBt6jBfiVG/FYYSTXp\u002BTpXOb1tJQOIjSEwdDUx\u002BDbY1gT3AlVsRmOFdS3QXkg8G96w3l3NA4unVMNbj84oAWpVZ7wAq1TN2E9WgT4uhZJeRz8lG\u002BsBcz6lrDWsc1gGcObj6f8Agg/CrIAdRIA4h0rFdimN1dCjdjaXF4TtTXQfhDDO1cW\u002BITPq0nt6lRrvArnji6J\u002Be31oXYmkdHj1q9prVxzopj64Xi2fsqvz3MKjXdV2JqkeBcV6RmWPdTo7lKpL3aXmFzOJwGGxBJqU7nVwJBXbo/4XDqzu9nGHfFi9eo7P0wzZ/AssQaDSfMT9q89zDBUaGLFGlVD3HhPZK9DwVbDUMDh8O3E0j0dJrJ3xwELr1bsjn0ZloMdg8I\u002BmS/DUiRxDYVR\u002BT4J4lrX0z\u002Ba4/armIr03sIZVpu8HBE17SyzgfNcJa72RkVMlAPUxLo/OZP2qN\u002BU1GxuV2k97YWw8qNx0C3OVYvGMY4bMaMFjyfqv\u002B9I4rMqR67HuA5slariZumBsYV7meyKmF2lzLCn4utUp9zajm\u002BxZ2dYjD5zizi8xpVamILQ01BWvA04LZLGPd12tcO8SoamDwriZotHhb3LU51PTcy7KcA7s4nEUvrMDvuWjszg8NlOe4PNBjm1vg1QP6N1Pd3u6ZMLQfgcLEBhHfvFQvy2mbtquHiAVr1Kzem9Nw23OW1T8ZQrMni0hw94WjQ2oyWqP4WaZ5VGOH2LxmpgKzXgMqtJPiE25mFI9UPP1XStepWb00vpgr0sZtk/E4aoK1DoKbRUaZbIFxK4xdd8Kx\u002Bjm1iPzqU/YoKtWm/5fDYdx/OpgFX1GexzC\u002BpstYaWW4Wk7VlFjT5AL58FHKyQX4Cn/AGajvvXZYfb3N2xvYneA4PotPuAWvUidtesqvmTzSyzF1W9plF7h5NXB4b0iVpHT4fDPHGCWH2yreK28wOKy3E4c4R7alWm5jd2q1wuIm8K98TK8KSV2plOPYJ6AvA\u002BgQ5RHA40a4TEf7sq7EypsuxWLNZmHOKrdCTen0h3TAtaYUmc/KgKDL6VRmPp79N7bnVpHBTZz8t5rF\u002BTU8L2yoIZijwO77J\u002B9bVOw1WRst8hX\u002BsPctdp5Ljz8u/T\u002BMEmNykDKbRYdDm3FO0odUQsEDklE0ShATtsijaO9O3UoQUmG6gl0CZJJFfafTd6Y1baqp0hjVMX2XbHDVs1Uxq2VTpClv31TBa6VN0neqpqXTdJ3pgtGomNS2qqh55pF5jVXBZNSEPSXVcv70JeeaYLPSITUVfe702/3qYLDqlkJqTxUBehL1cNWOkvxQl6gLr6oS7vTF1MXoC8Qoi/vQF1tUw0bqiifUuULn\u002BtQvfcphonPPFQvfZC\u002BqBNwPEqu\u002Bq2bvafNZxYkL102xjy7BV2cG1J9YH3LkX1GgdoetdTsG4PwmKNu2PcufOezTzWsOoqVVaFUSFRxHcOC8T1N/wBHbz\u002BF8SzgcOT6nN\u002B9YfpGp9HtVWf/AKymx3sj7FsejpwOfVx/9K79pqoelIf94qJA1wrZ/WcqzPk82zwbuc0n/SpR6ifvVOu74w\u002BCv7RtIxOFqdzwT6llV3/Gm/Bd\u002Bn4icvK/RcPgrfBPgDFCp9cqth3fi4Hj71LgXfEv\u002BslTimpnqu8Vn1D8dVjuVxr7HxWdUd8fUvwCvE5IKZ/7Q/sqIkjOqTuAcfcnY6MwH1VE98Zmy/8AOf8AKVr7Z\u002BmzjD\u002BLu\u002BqfcqNY/i/krOLd\u002BLuv837FSqPnDnwUi0IP4v5KEHrN8U\u002B/\u002BLeSh3oLSOYWkX8U6cJU\u002BofcquXuH4Xq/wBAz3uUmIf\u002BKP8A6M\u002B5VMA//tZ/9Cz3lZnhfuOikFgXI5J8Tmr2fReW\u002B1dU100QuUHxO0GIEx8aT67rPD7Xn9O3wxlrStPAHqA8JWNgnzTYZ1WtgHdQeK51tr4btq9grves/DnrhaGBPxjvBSiV5bF9VE64sjrXKiMjisKHiZgqKrQoVO3SCkcJ4pnKim/AtBmjVezumQojhcUCYdSePEhXzI0kJpB1srOSYyqzK9PtUXH6twoPhDdC7dPJwhbTo4FQVWteIexrvEK9xjO350g\u002BCYm/JWfglAvIazc6smCgq4VwB6OqJ4SFrYmVXN0JbPFCKWOYD0rKdS\u002BrJFvApb5HbpVGnvbZVkL6IOrQVBVwVJ4u2FY6amDG\u002B0HlKIPB4hUZdbK2OPVMKjjcA/D0nVDUsOEropYVVzLCDF4Z1IVTTcbh3I\u002BC1KlcsZOp81VzKs7DYGrVY1znhtt0SQeBV3FZJnlJ00MTRrjlAaVScM4pEtrZVWfFiabSfdK6xxrmcFh3vea1XrOJkLVos3CC4EgK47E4djoxGGqYd3\u002B0pwpRiMI4CKtEjvcAry2pxyGp4ukLGl7ApW4jDu1ZHkh3KDoIaPFpQOoMvukjxWMb1OH0vm1HDzRdI7hUnxVJzQwSXsA7yk0OIlp3h3FFXTVdx3SkKoEyD5Kmd8ag\u002BpLePFBcbWbvXsi6Rp0IVDeM6pbxV0XnuBCGZCp77\u002BacVakcSiLBM4hqMxvKp0hFQPMyEYrAmSqJSZQug2IBQdK3mm3wSqgamGwz\u002B1RZ5CFC/L8ORLC9ng5WC4EJT1dU2p7KJwL9WV57nNQHCYgSSaRA7yPsWhvACSQB3qvXxDY3WOBJ1IKsZsii9zqTC9wIA4tKalmNupXd4SCgzWq1mDe0uG86ABOt1k4Jr6uKpMYCSXDTktzj7a525cb7sa57dx7mkHWRdY2ava6v1TK6eo1j7PY11uIQNw\u002BHaZFCnPPdCzOWN3hsUNmqZbgqjyCN59u\u002By1G6GEiYaItGiFpWLdutyZMEDCcm0oDKfUKNH70TTKAngnBugkCcWQg2T8EBhMwapmp2GQoqRFCAGEW8g\u002Bvw\u002BE29IVYPqxoEpqxrE9y9GOKyXJt6FWirM7x9SctqE3cqmrBem3iTooW0qjrAme5T08uxtQwzD4h9uDHFMNCS7jZC6oA3tBWGZNj3N3jhagv84R71OzZ7HFwDqVNoPE1G/YUxNZzqzZ7UpumZzPqWk7JeinpsbgqBHB9WPsUTsNklIzWz/BD6W44OIPhKYuqPTt5H1JumbGjvUrT8TsrSnpM6Lzw3KLo9kqF\u002BcbI0wCH5hWI1DQAHesBTZ\u002Bz3/SI1bWaUJe\u002B0NnzRP2n2ap/JZTiqoP8ArKkR6nKpV2sy0ndo7PCdGk4p8nyU7uP7XLfpYc6oTZseaYdNEQB3qGnm\u002Bb1XD4DssHk86NWr6rqxSdt1XBFDZplIHTewAaR\u002BvdO6GVEW1j86PAJ2YTE1RNNlVw5taStHDZd6UXuBaynh7akYdvuCvU8g9JVdsVs5wNEHUO3Z9jE7j/tiHJ80eQPgeKvpLHAetGNnMzeT\u002BLRGu9UaPeVsVNjNpyAcdtmMOw8WAi/2025-09-17T15:46:21.260871071Z raq1bYrLWl34T28qVHfOHSNaSPAuKl5Q/7UKmzWJpgOrV8JQB4vqj7JVXEZVhaDi2pn2TtI4HEwfctT/NT0d4c71fPcbX5gPBH/CyUzsv9F\u002BHBYcHi8VHzukqifa1YvUkWS1zGIOU0QSc4wTo4ML3H2NXR\u002BjKqzFZbisSxrmtNfo4PcJn/i9ip4n/AEcNHxOzOMff52JqN/8AMKPBbVZTk\u002BFdhMn2e\u002BD0t7eG9i3OueJkHlzXLn1Jft0nG/pxL\u002B0srMq9OgwvqODRHFadZ0EmVnuxVLD42hWq0xUpsJ32wDIPivK9P0m9F\u002BaUsTtb0NIl29h3yY7wfsVr0ptJz\u002BieBwrf23LtsgZkOKYMblYw7nNGtOxbNjI4LlPSpSjGYKrHapubPgR961fDEv8AieX7UCMPQqcqsesH7lz2IfFXxC6XasEZS5/0XtPtj7VxeKr/ABrb/N\u002B9dul4TqeWrQq/Ejz96mwdWKTvErHo1zuASpcNX6kcluz2ZlabaovfiqFaqPhD78AgFc75G8FUqPe6s5zWuIgXAU4lSioPhw8FXxFQDMmH/af8pTMbWNcPFN2h4QlVweIfiWVbNAdvGT3QrsTLjUxVUfBnfV\u002BxU3VZoeSOpTrPYWQACImVGMJVLN0v9iksasqPfHwcjuUBqaeKuswPVLS55RjLWkR0TvWU74dtV8RU/FnD8w\u002B5VcE\u002BMyc6RekAPKVrfg0lob0biO8lO3KbyKTQVO\u002BL2XVmjUHQeS5rMxuZ9Ud9INd7I\u002BxdJSwVRjd0OgeMrn8/pmnmlMni2J8CVOHk5\u002BHS5ZU3qNMLawLuqPFYOTiaFM9y28GYZ5rHLy1PDbw5u1aOBtVf4LKwrpLVp4C9V/gs1U1SZURIiFYf4Sq7hyCwpjEQmcI70iJTEOHFAJglA6xUluMKNwHNBGIPcgNhKMwozO6rBGO0fqhOQRdICXf2U7\u002BSojOqbUXARgJiDEIIK2HpP7TGnyVZ\u002BXMI\u002BLqOp\u002BBsrxCY\u002BtXcSyM04PFM7NSm8d9kL2VqYl1In6t1qkDhZA8HnZXvqdrJFan8/ep/WbCkBDhIII5gq89jHDrMBVd2DwziSGbp5gkLXdE7VarSZUbFSm145EArNxeQZViCS7CtY48WdX3LYqYVwHxVZzfb71XfTxjNdyoPCCVqcv5ZvH9ubr7IMneweOfTPJ1/dCr/AOb2eUZ3cThqjRwcTJ9i6oVHb0PpOafWEYdYwVuc6xenHC4vDZzRkVcqNYc6Tp90rExzawcS7LsXQd3sNvYvU5PEShcGxcELU6mfTN6e/byA4jEUzM12nvJCmo5rWYQXl7/EyvVXU6Z1DT4qGphcO/t4emf7IWvVl\u002BmfSv7edDPKfGg/1p/w5S/1FT1rvX5Zl7tcHQP9gKB\u002BR5W4knAYeT\u002BYE7\u002BP6PT5/tw5zmmf5mp\u002BsgOcU/8AVVB/aXZ1NncpIvgaY8CQq9TZrKTphQP7R\u002B9Wc\u002BH6S9Pn\u002B3JHN2Tam/8AWQnNWH\u002Bbf\u002BsumqbMZd82gf8AeO\u002B9V6mzeDabUD\u002Bu771e/gnp8/2585o0/Mf\u002Bskcyb9B/6y2X5BhW/wAyf1z96jOSYP8A1bh/aKvdwTs5sj8IMP8ANu9aE5gP9V/xLVOR4X/aD\u002B0hORYb/WVh5j7le7gnZzZfw/lS/wCL/BP\u002BEnAdWmJ7ytE5BRPZr1POEI2fZP8ACHR9VXu4J282JWq1K9Teed5x0HLuC38jy9\u002BGYa1ZhFRwgDkPvU\u002BDyqlhXh7Os8aOIV4dINTKzy57MjXDp570G9Bun3hopIntAFLcYfm\u002Bpc9dcRONkzTYqU0mHmE3QWO671pplDvWSBkSkaNUDSfBCd9ou0jyRDg3Rt1UIddHvXTFSzdEO9RtITzdRUrUmoWmxSBgWQSkp4QTJlHZTFfXFLavJyGjD7P1q1UC46Q3PhdWaee5nVEYPYqoQeJw7n\u002B3dV5m1\u002Ba06LKdFuFosYIAZSUTtrc\u002Bg/jwH9yz/pV/vE/bn6V/RmYzbqqQMLs3Rogdkup7hHrcFOMF6SsR2jhsMeJL6Z/6lW/zuz51jmB8qTPuVattDm9SxzPEgfmv3fcp/eJ/K\u002Blf4aDtldv6wLn57gmSNBVc2P1WKpiNh9r3CcVtHhN0n5\u002BMq/a1UnZni6ri\u002BpjMQ86daoT9qqOrCXEuvPErF68anTq87YOXk47a3LmuAvDt8\u002B0hO3Y/ZmiAMTtW\u002Bp/RYc/4rMdiGjiIUYxdPfEub61m9b\u002BGp07\u002B24Mi2FoO\u002BMxmbYk926Af\u002BEFT0cP6PqZAdlGY1e99T7nhczicwotcJqsHmqz85wjBeuyR3qTrX9Hpfy7xmM2Fw7ZpbNF55VKTXD2uKlZtNklEfimzGEYB\u002BaxnuavPWZsK09BTrVj/ALOmXe4KxQGdVmRQyPMnTxOHcPenq8/o9PjHd1Nu8U1obQy/DUxwkk\u002B6FUrbb5y8iPgtPubTP2krmWZJtdXjo8iqsHA1KjG/arVLY7bGrBdSwNCfp1iSPUFe7q1O3pxo19rM8qSDmBaPzabR7gqVbPs3qSX5pi5j5tUgexWqPo92iqfL5tg6P1KRf7yFcoejXEEfjO0FY8xToNb75Ts6tO7pxzdXG16rIrYirUv855KgdWaASXcF3OH9G\u002BWMEVswzCt9ZzR7gFcHo\u002B2c3QKmGxFTvOIqCfUU9HnT1uEeaPxNJoEketQVsdQaRvPHrXqQ9HmyQMnK3OP52Kqn/mR/5q7F4I/GZbltPdv8cQY/WKf3e/dPX4/UeSurNzFtXDYPGdDX3N5jmniCCR6pWY/NquDq/BMzpkVgPlKd2uHNexZ07ZallOKo5act\u002BEvpFtNuGLS4n\u002ByvOqmS4au81c0pb7WX3d4iPUp6cnss6m\u002B7Mwox2Yb3wDLsXiQNTTZI9cp8fl\u002BZ4OkKuZYN\u002BDpu0NRzZd3AAkqbLtqqOTb/AODMpoYeRBcarySPWuXz/aTHZzmbsTi6s6NYwdloHAKXhI3OdraybIs42iw1XE5c3DNZTqFjm1HkEHXgO9BjvRztZUPVq5cPGq//AKUtgdqsXklbG0cLToP\u002BE7r4rAkAtnSCOfsXQ4vbnPqh6r8NR\u002BpSH2ypnGG8/pyuz2wO1GT7R4HMa1bCOpUazS8U3uJLdDq3ktf0jVH4nD0nvplnwfFVKIP0gWtdKkG12euqsbVx4dTLgHDoadxx\u002BatH0kUw7IKdQNEtxDXH9Uj7lOVlnse8s15fjcpOcUfwd0wo9MQN\u002BJiDP2KDHejbB5dUY3F5vS6QtDh8WSYutF7n0mipTcWOaZBBuFBmuZ47HVWVMTXNR7GBjTugWBJ4DvKzx5WeHTlx2s4bJ5RS/wDjKjvqsSOQZUzR1d3qTvxOIuN//hCqVsTXP8671rW2pkid2U5aywpPPiVE/BZezVjGgcys\u002BtUqOBl5PiVWqOcBEq5Ro1G5ew60/K6ifiMtZwLvBqzHzrKhfzKs4prTdmGAabUan6o\u002B9A7NcKzsYd3mAsmoQoSSdVrtibWrUzoX3MOPNygq53iT2WU2\u002BRKzSe5A4wtdsS8quPzTGP1qhvg0I8Bia1WpUFSq50AEe1ZxPerGWuiu/wCqPeUyEvu1h2SVgbT9Wrhnc977PvW7TdIKxNoyOmwkiRLgfYpx9qvLw1skfvYOlHL7Vt4R3xfmsnA4em2gwUXGnaw1Cv0BiKTYe3fH0m/csVZ4buCddo71rZeZxDx3LAwFZri2DedFu5UZrv8AqlS\u002BFXS6CQo3iyKp2igm0LmqNwTOjkicHDUSEBKBEA8VE5pCkkFC\u002BQLFBC4DwUbtFK6YQOjdsqAZZ/8AYScbmyJo7R47o\u002B1C8XVEZlMQZ1RppQAZCEuJ1RyExAKIDeKRcO9JwQkXRYKWnihc0QhIKSAS0xqmMhOTATsO8boiGsJfSn6aJzab9WApVxD6X1vsTiLq7T2U8Xl9GuWkVKjHNMgtcQq7sHiWdiuHAfT1WmWiEBC13VMjNczENEvpg/VdPvULqwa6Hse3xC1ihcxru00FXuTtZjajXdl4KK6tPweHeetSHkYQHAsA\u002BLqPb4mfer3RMVyEJARPw2KZ2XNeORCjL6rLVKLh3hXQ5aEJYOSdtam4xvAHvR2OnsVRAaQPBA\u002Bgx3AK1HJDCCi/BNI0hQvwPIhaZA8ExaCNE0xlHBP4QgdhKjVsFt0O4J0V1MYxoOFyExpnkthzAeCjdRYdQE0xkmn3JtyCtR2HbFggdhhyV7kxnbnekGnmrxw45FAaMaBNMVd1OBzU5pxwTblk0xAQDwBQmjTJuweSnLAluq6YrHDNmQ4hAcM6Za4Hxsrm6lupqYqdDUDToT4pg2o0XaVc3SlB7k07VLfvdTBzYHVUxaCYLZUoo2HxXtTTH1Nhsm2mxVNj6eTV2NOhqPY32b0q83Y3aqq21LB0yfp1j9jSurft5lTGAU8NjHOjQNaB71Tq\u002BkGnpSyt5731gPcFjs6X7Z7up9Rz/wDmFtcSCK2Ut8a9T/oUtL0cbRvcOmzfAUh\u002BYxzvfC0K23\u002BP/msFhW/W3ne4hRDb/Nf/AA2B/wB27/qU/wDxhvWNQ9GGIN8RtBUPPoqIb7yVco\u002Bi7KQZxGYZhXPEdKAD6gs\u002BttxnLySx9ClP0KenrJVGvtXnlWd7M6o\u002BqGt9wV7\u002BlPo7erft1tH0bbLMA38FVrHnUxDz9qvUdjtlMG0PGT4Bu786pTB9pXm1bOMwrfLZji6n1qzj9qqVMRvEuLnOceJMlT1eE8cT0\u002Bd81640bMYCzXZXhzyBY0qOrtNs1h7HHUvBjHO9wXkTq5NoQb5nQJ/eP1D0P3XqtbbjIaXY\u002BE1fqUfvIVc\u002BkLJRP4tmH\u002B7Z/wBS8xLnFAS4arP945/TU6HF6VW9ImXD5HA4t/191vuJVKv6Rq1\u002Bgypje99afsC8/c48EJJ5rPr8/wBtTo8I7Kv6Qs7eYp0sHSHcxxPtKoYnbbaSpMY9tMHgykz3kSubM8Sm3hos3qcr9tenx/TVrbQ57X7eb4wDk2qW\u002B5UMTicTX\u002BWxNarP06hKgLpvEIXONrLN5W\u002BWpxn0chNYapi4wgdU/NUaaOR1/g\u002BLfUa0OduQ3xkX9io7V5vVpPGG3buu5TZRTNfEltwxjS95B0AXHba451XPHil1WNY0AToIXXh4c\u002BU3kjzCrUfSL9yxOgKx3b9S27ACv0qjqlAAv3hyPBN0Yc6AFdXEdFz2vbVZYsIIXTU69OrRbVaLPE\u002BC5uq5lHqzoreVYtjmGgTDpkDuWeU2LGk9zTNl3e2vx\u002Bx1SseVN/8AxAfavOX1eS9Gxf416Pp7R\u002BBNcfFoB\u002BxZng5\u002BY8yqiaJ8Fm1tdVr1G/FEDWFztfEGeCcW6erxuqdYmU1XEDmqtasJ1XSRk1V0TcKs9wCVSo1V3PBmFqRNPUcOaie\u002BNShqVBBUFSsybketXGRPdeVE90oH12XEqF9fkCtINzyQgc4xdRGqTYtIKZ28VUtHvBT5a6MQRMyPvVM73JSYRxp4hpB1MFEl929TN9Vk7UCKNB4\u002BbUj2H7lo03aLO2jvlzjxa9p9sfasTy6cvi2csqh2FpOP0Vs4OqC4QSLLm8lqb2BpfVW3g33ErPKe6zw36PRVGhtRoK08qosZWcWPJG6bG6xsORAIWxk5mu4fmFS\u002BBdqCHkqNzbKaoLlRO5Lm0ju3RO4tck4d6BwKgF7OSDdKMuIsgkSZsgBzTzUbgpiQULwCCVQA1f4N\u002B1C\u002BzkQ\u002Bee5v2pniZKojMShTkXQlDSIhAU7phCXEIhTGqYmbBPvzwSsboqM801oUkIHBENATDtRCR5pwZagGqAa1Id59xQkWRVPlqXi73FMdAqI97uTFyMgIXRCKAwUiEoRAKoE2GiaUZHNMQoBJsmsiiREpiIKAHUWO1aCq1bL6LrtEHuVsgpSeIV2pjMODxDfk63610JZiW9tjHfVK0yUxhXupjJfV3e1TqAc4TNrMdo8LTc1pEEKGphKNQ9ZgWu5MVg5LePNGcvaLsqVG\u002BdlG/D4hvZc13iFdQ8yE1uKACs0w9rfIlEJi10QxATFveiueCUXQBunmE0E96kThsoagLByQmlPNWdxLQKmqhw7jwT/BXnkPNWpSc8yiKnwU8XBIYVoF3E\u002BFlYJJTgc00QChTHzZUnRtAs0DyRGyYyUC7kQbYJoGiIC3aVH0CCRxKV1Hv96cPEarytjCVp4oDUbxTGq1AfFCdNVHUqt\u002BkojXbBvoip7JiZ0VY4kcAgdigbKGLhcAYshL281SfiRwhRuxV7qr7rzqgjVQOqAzdU6mKCrVMWBJlMJGmawHFAazOayKuNAA6wVd\u002BYMB7SYrdOIBtNlG7EgaFYD81YOKrvzgDRMHSHFTxQHFx2ZXLPzuJu1RHOajrMBcfzQSrg6p2KPNAcY0HtLnKNXNcQQKOBxD/CmVdo5PtNiD1Muc2eLzCYOi2fzzD5fmYq4kOdQe0sqbnaAPEDiqm0mUYR\u002BMqPpPFdph9Oo2Yc1wBHvVbC7G7T1zFQUKQ4mSV6HnmC/BWymW4Fx3qjWNa5x4kC63xns58rJfZwQyOrhaTHYhrabXaNbcqDGsFGAww3gFvYuu\u002BrQbTeRAMgrAziRCuErCx7YxG9zCga0E3VzH9ZjX8ZhVmi/iilWq1\u002BlcynRqVDr1Wkr1rZVtXEej6lTrU3U3uw1Rha4QR2gsT0UPw\u002BIxeKy7EUmuO50zDHWsQD7wvQ6mHp0QaTB1CNO5ZsZ5ct9nidYwFiv2Rzyo3faKIYbtlx04cFr4twazULpMFtnkbcvoYV4PT0aTab7auAgrPB15WvOa\u002ByWd07vNEN5iT9ioV9ncew9aoPIL1GvtPl72kNoi/O6x8ZmuGqk7lNs8i1dJWPd51WybENkOc71qpUyx7bkSu3xWIZU3h0ZafBZeIbJ7LgtTlDK5Z2Bi4EFRvwsagLdxFHjoqzsO4nq38Lq9xjIOHI4CEBw3EALZZl9dzurSqH\u002BzA9qmblmKAl1AgLPcuOeOFKYYRwuLLpW5XWIuwIvwPU1Tuqdsc2KBjrN9SkZhQ67YK6EZQ9F\u002BBusDLge5Xup2xgso1G6OnxQYjCPxFI0qhaWO1AHeuk/BTmmSC4e1EzLWHSZ5JpjncJQdh2NptHVbpK0MJV64BkeK1m5dT4hOcuYOEJ5FjCXAW5kg/GHfUKwqFF9GA11uANwtjIHvOMc1zY6hv6lL4VrVNSoyFM/tFRECO9cmkbm2QOEqU96BzRwKggcDPNRxzUz5BugN9B61RG4WUcKUx4KMlUMzR/g37UXA\u002BKalo/wb9qYzKBnNsoiBKMuMqMm6IZA6NSjPsQuFkAESbJovKcgTxCRnhdAMpt4xdFI0KExzQNIhNCREJK4Ad8vSH1vcURFxKFwJr0jy3vcjGqACNUBbZTkBC4ANlNEBTQQZRkydEyoZruaW8DxSIQkWsoFx1TJoKYkqgpdwKYu5pgUxUBFwPBCQDohCcEkKhiJCEhFqmIugYHmkbmyci6IAAwggxAhirPeGUnVCCQ0EkAST4K1ij1IVdpgQt8fDHJGEoCc9yYXKrJGyQcYTQkNED6pGyEnRIglUOSEB1R7vehIgoG4p5gJgL3TgAoGtCRsnLUiLXQKROiW\u002BEPFPPgg9rGNaBBcFG/HMjthck5\u002BduaH08txL2nQ7hA9q1KOzO12II3cCGA8XPXDHX2atTMKQN6iifmlAT109D0fbT1wDWrUKQ7pK1KHosxzyBXzF457jI96dtTu4xh1M3w/\u002BsCrvzqiBZwXZUfRDhH3q5jjye5zR/wAq0KHofyMAdLVx1TnvVh9gV7Kl6vF5s/aCiDG\u002BPUq789pk9Uye669ZwPo02bwGLFJ\u002BD36dTRzzMFdJhti8lwsdFgqTQOTQtenWb1uMeBtx\u002BMxHyGFxD/q03H7FOzAbR4mBRyvEmdLAe9fRFHIsCwQyi0eACs08uoNEBmivpVn14\u002BdKezG2NXsZTUAP0qrB9qF\u002BxO2bntD8HSpNcY3nVQY9S\u002Bk6eEpC26mq4KhVpuYW2IWvSZ9evnvD\u002Bi7aasfj8bRp/UE/atOh6H8Sd12IzKu76QbDV7VhqXR1OgqagdQniFbLBySdKJevXj\u002BD9EeVtP4wa1b69QrWwXo0yHDkRl9J0cXCV6MaYB0TFo4K\u002BnE9blXH09jsvoEPw2EpU3t5NF1q4TKsLAHQsa8DrNA0WzuhR1KYJ32mHjTvTtid9qqzL6TTIphGcIwaNEKfD4gPJY5u68ajgpC4E2C1kZ2qnQNHzYXGekdxfi8LSbwp7xXduMlcD6ROpjcNWGgBYVnl7Rvh71x\u002BJpv3R1Vi50HQyQV0le1MHvVDN6DamCDouHQuWu8cniGfF8NVWaOsAruLG6wg81UcQ0b3LRVT4TGVsLmlPFYaoadWi4Gm4cCF7xsvndHaLImYynDKoPR16cWa8AHzF5/xXz0XRcld96IsVWpZx0O\u002BRTxLHNLOBLRIPjY\u002BtWM8prt8Vsls289bK6LXk/Okg\u002BtVX7JZKz5PL6DPBgC6Sp1mw6COSr1C5ohvXby4pjEtc47Z3C053KDI8FVq5FRBtTbHgurlrhLTKgqsBKyvdXHYjIaDgQWSFUGz\u002BFYYOGY4c4uuzfRaQVBUoiNJCjU5OUGRYU/J02COEJOyVjf5sLo34cAbwmUJH0hI5gaK6a5t2Us\u002BgEP4LHBgXSmi0iR61C\u002BjHNRdczVyhj5IpgHmFTxWX4il2cIKjfpB32LrXU2nUEd6jfTLbgWPEKmuJdhqpmOjH9m49qidg6hsXuI7oC7DEYGhVdvFpa48W2Wdi8E\u002BiZ3d9nMKe665x2Xg3hx8SSm/B7IvTA8Ft9GNW37k4pNPcU1WI3BvYLDebyOqd9Gm27jufWt7VrupgG4jwQPptcIc0OCaMkU6cyAXfVaT7lcyyiWVy/dI6h4QrLaZYIpm30SpKDgS4Fpa7d8lbQNTtHxUbijfBJKi10Kw0F88EEnXQoi4ixQkg6oaFzx85RkA6FO8BRmWmVUM5pUbgACVIHlM8gtI4oApHtEcm/anTM0d4N\u002B1M6R4FAL9VHPCER1QlA0CELgYtdOkgjchJupHBRkIECDqEzmWskRayaSCrgEggQmBspN6dYUbokQgZn8IZ4ORxr4IG/L0/BykPFBGe4pXIuk5tpTSWoGJEXCFzQdEUzqkRfVUBCYpySExdbRQMhcLIgbIS46KgSEtdEib3StwKBoS4JgeCewCBoS8Qiiya4KAbTZPxTw2JGqEnrIIcVoq4uFYxWirgWW\u002BPhjl5MQUxEFFZMY4laZMNITBFLRwSkQgYAck6RKYTxQMYCYmSiIQmyASJSJgJ5QkzcIH4CUrJC40TGyBzGiUJpCUu7lR9rYnKqTsKWbg0hSZVTZVwjZaS5nVcAtOARB0WXl7vg2Zuw/zKoJHiumSV5dti6aIizAPEwnFExYt9SmcbJg661kZ1GylEy4\u002BUJdGIN3etHvCUBcp7CHE4VtWiRugFNg3h9MMcevT6rgpt\u002BAs/FtbRxIxA3gDZwDiPcpWmkWtBkIX1aLdajJ5b11D0dEgHca4EWLr\u002B9G1wbZoAHcrqHNamTbfP9goy7qyBPcoy6UO9a6CPFsdXpwKbg4aEkD70OHxOlKoYqNEEc\u002B9SOcq2Lph0VmWqMuO9Ztai054IsonOubqhTxVerPR4V0jXeeAPeSnPw1x0w9P\u002B05/3LO6YtmoNCYKBz7WKgptqx8bVY4/msI\u002B0oH03OJHwms0cgG/cnuosS0VGgsMPBkEcEqOKBIpVjFb3qI4SiLudWf41XR6pQ1MFhyN6nSZTqC4c0XlRfZd3u\u002BVxnpCoudgXVADDXgz4roqOJqdKaVYAPAsRo5UNr29Ls/jAQJDJHkQpfeNcfavN/huGqAYbpR030YPJNXc1\u002BBfTkF0zCqbM4GjmW0eIp197qYYvYQYhwcwA\u002B1SYii/C4nGUn60lzx2lYOaAdDPHeCwsXV6263UBamZVj0QmNZWLd9QmFZFpqTXVKoaBJJXb7Ev\u002BD55gSbDpQ312\u002B1cphWBlUPGout7KsT0dalXGtN4dHgZVS\u002BHtLjZRP5rlK22L9KGBA5F75HsC2suzJ1bCU6uKoddwkhhge2Vrt1yvst1G75kQHjQhQmoW2q9V3sK4HMNqMzo7QBz6LWdA4sfSJIDh/608l22HxVLGYWnXpOD6b2yCudjeJnc58FGROlioXF9MS07zfoomVG1Wy0wRwKgGozyKhqMvLbHipnvMQ6FC83UVA8dbeb1XIekjtdX3KSpc8lA8QboozEWUR3Y5JiC0HddHcdEG/PVd1SmmGe0KN4JMqR0gICSDcepNFPE4WnWlxbDuDgs\u002Brh6zJ3m77RxatowdFG4RyCi6w90OB3XeI4oHUzGi1q\u002BGo1Xbxlj\u002BbVSxFCtR60NqM5jVFiqWE6X7igqdIGkNJaSLSFZEOEhPE2cLIrJdiejO5iGlh5i4KMPY9sscHeCu18NTqsLXAEclgYmnWwdZ4aSWg2I\u002B1TGo0iJ4KJzTNtFUo5iY\u002BMaC3mFcZUZUEscHdyCMgjggOilcFEQDZVEbhxQwZRubFpsh5oAFi/wb9qeDAITN1d4D7U9wEAPE6WUekypCRJUd0AmClokbpjICB7FMQE0iUxkGxVCcBNlGbo96QZQ7ohABBlCRBR\u002BKZ0Sgjn8YZ4O\u002BxScSgpgGvfgxxHsRjigEyE8iLhGCHBM5oIQROYJsUxaZRObaJQyUCPeEBDSjBHFNuhyojLeV0JtwRkOATHvQQlKEZaIQxdAOicEHVEACmLOSBiDFk\u002B8RZDJCIOnVA5IhRk3RmC0kFRlBDibqAclPiNVX1K3x8Od8niyRF0xS0VQrSkAkSSU4aVQySeCmA70CmLIXFEQELggGbJA6pGyZsqh7xohiyMCyEhA0Iwhm6eTyQfc\u002B\u002BY1Kzc3JpOZimasdMq40yFDjWCrhHtPJbryz2WhVFRjXsPVcJCYvjis7JqhODdTcb0nFvkrm9eVd2GDLp0KaQdShBuUM3UBE96Gs0VKRYRMhC90EIi4QDoiq2Xvcx78NUdcXpzxHJWpgqjmAILK9Mw9plT0qoq0WVR84Se4qQqYOuhc6CgJtZImWnmrqCLwkSCLFV94ixT78KauK\u002BLD6NQVqQt89vNGys2ozfaZafYie\u002BTBuFn1S7C1i5t6Tj1hy71mtT3XyRE8UMyO9RsqWsQWnQoKjiDIQxKXxromeeIKhFSbFKYPMKauBxFIV2FpMHgRYhZGY0jTyvF0KpqueaToc6oXAiJ4mAtlwi4KyNoMaxkYQMDjUYd4k9mbKWLHnmw7tzafEuOnwVwP6zFb2v6H4RiK9JzS59MB8cxb3Lm6OLOCzKpWDomlB7xI\u002B5HWx7cVgMRWb2d4CVPp1z3c7j3dJUDAe8qrAY4hGXg1nvJFrKtiXuFTqAEcSjWrNF8ON1rZbTq12PbQLBUgkb7w1ogaybLn\u002BkDGydUAzNjKvR1KLa1NtyCYkqDVp4qtVeW1M6osM3DRUdH6rStjCY7HNo7tPOsS\u002BB1Tu1w0f8Km2dzHLa27Vo4SnReNIauyy7HYaswMLKbag4cCFNpZjjMZi6mPpsfjKtF2JZ1eluC8cJkDRdPsaKbcr6N\u002BYFpNQuFNhB3RA7jHkVp43D4HFUHNdRYDHALhMzw5y7HirhHvp8wNFNM16NTw1Jrt5tSs883VXH7YTvoNJJb1HcxqsXI8zqV6DBUImBJWw2uCLoxmBc5zRFUafO4ITpJ07lOXgtggEFQVqe634kkTwP2IoSAdFG9hHC3eoDT6QmcTWkatkD3AJNoYc2qM3zzed73qAKlfDNkGvTJ\u002BiHSfUoxWo1LAPI/OY4fYrJY1nZY1vgFG\u002BHaiEw1XfUe18No1HNPMtj3yiLmkwDfkieCFDVa11nT3EJik6b6hBv8AMApS5v57ePNBUq0GjeNVjfFwCindDuyfIoXyLCQonY2hoN55/MaT7dED8VUI6uGJH57gPdKEPWosdNt13MKnUp1mX3d5vMFWC/EEyeiaOUEkechA91RwtVLfAD7ZRVUPB0OiqY2m2oTI0crrqLC/fc6oXHUyqmMcKbarj82T7FFec4zE12Y2u6lWe1pquIANteS1sixeIx1Y0abIqtbvEtdEiQOPisCrMknWZXVbEYZtOhVxb53nncae4XPtW7irQxVeg7o8Uwzz4qVuIo1DDHyeR1V\u002BtTpVWlr2h7e8LNxGVN3d6g9zXTo429ywqUmO9CS06LPdWxWFPR1WzylT0MTTqECYKpicau8G/ageTwRjV/g3/mQFxB0RAkjRAdUToPBMRbVAxiE0pyLIe9AjBPJRua7UXRuTSRpdURyQYKexRktdZwhC5lrFUCRCEwSE9wmtvSgGnbEH\u002Bjd7wi5\u002BCFn8I/u3e9qc6wgGSNETXjilFkJF1Abt06FBuoDINkQqXAKAXNKEyNFLIlC6FRGHGIKYgIy0EWQlpAQAQh0N0coXCSgaUpTRCVigRg6JAAhIt4piCgTmwgMyje60INSggxHaUMwpsVYyoRc3W54Yvkkk5Fk3KFWT6GEt4pimQIkpiUimWgpTTdPwTd6gSYSnSVDEFKCnOiEnkgUXS3TzTEmU1\u002BaD7ga47uqYmWxwKgNWBBQmoYsta82KjKvwXNA1xhlQe1aQMvhY2ctcWNrN1bdaNKuKjGVWxDgpKtizPW1Ql0O1UL6l5Q7/ABV1MS1X3CZz5AUD3oN\u002BdFNXFl5DmwVRw1V2GxhpvPxTzbuKm344qrj2dJSLhZwuFNWRpF4BiULngXBWdgMUcRRLX2fTse9WDUERHmrpiZ794A8UDnyFGHcEJeAVDB9Je6GpD2lrhII4oS4AylvSoqi2p8EqdHVcejd2TyKsOdYEXCHGUxWpljgqWGxBpP8AgtQXHZdzUXyvyDpqhLy1267RRtcCYTvcIgoJG1DJBuFkZ9Tw9B7szxEGnRZ1mcXnh/67lbNQtMAqvjjTr0TSxFNlRh1a4AhNWPE8eaGJxrqPw0YYPHVc6XeVkq\u002BHGVZKMIMWcTUr1TV3uAGn2L0PMcpy65p4Oiwz81oC5nOMko4h8uL27o3W7p0CzrrPdwFXCHFU31G4/onB8bk62UdXFNpUCwySDGmq6F2z\u002BFwtR2\u002B0uDjO\u002BdQUNXIMM42nuuncs4uSq1qtUW3gOJUTWR3LqH5HSaTBco25Kye0fMKWtYqZI\u002BrSqi7oXZ5fWLmNlxngZuFiYfK\u002BjghxWvg6DmsF/Ys6rew\u002BPqBu5XcY4VPvUGMwgxDg8ukHRDSA3d2o4Bveq9bN8uy2W1cww27rudIJCvuy0cBQ6Ejdmy2KNSG3K4nEbc5FQB6N1eu4cGU49phZ7/STTa6KOVPc3m6uGn1AFJxrNemirYbplGasxEyvJ8T6SMeRGFwFCiedR5fHuWVjdtdosSf4cKI5UmBvt1Wuyo9nq7j79l3MaqEucy1S4Hzo968eyTbDOMvxvTV8RVx1E9ujVqa63BMx5L0XZzaTCZ5h3OoA06zAOkou1bPI8R3qXjYNzpjHAt4JnOY4WMKoS5t6ZtqWlMyqHk23XDgVlcWS4tNxIUbyDdqDpSDBCW9JtZUMb6SCq9VlNxlzQHDjF1K46lRuJdqioXEtHWEjmo3EatKni0SoatK8tO6s4ugcTxsgLkTiQYcI7\u002BCEgIoTdY\u002Bf1Ojy7FuJjqET42\u002B1a5JGqwNsX7mV1W/Te0e2fsT7VwNXtL0TBYSpg8HRw7WsO60SSePFcRlGFOOzehQ\u002BaXS76oufcvR3OvcLXIQswtR4\u002BWY3wEohg6YMvfUcfrR7k\u002B/DpHVKcV\u002BDhbmFlCfQw5ZD6FN4/ObPvWZj8nw9UF\u002BGJo1NQPmrTLgbgyEBNlcNc1VpY/BXqscWfSBkKSnjKT4DoB7wt8uBtZZuMyrDVSTTPQuPISPUmLqsC13ZIITEKricNi8E6R16f0mpqONa4Q9sd6C14pjpa6djmvbLCCnIEaQUAkA6aoSDyROBF0295oAsCUosURAPim0BCADPkozqIUxMWUL\u002B2IVAs/hP92feEU3BSpx0jj\u002Bb9qaUBhwTOA4BCCCnvCASELhfRGSOKbigi10QmZUrgOSbdtdAG9AS37XSIhARKBye5NY8UxkFMDe6Bz3oEZ5IZCBxMJSRqE3gUpI4IE8gi2qBuqMxFkB7UoitiTcqEKbEdoqIarc8MXycmyaU8DmlAVQKRuLJFKCgawS1CeE2ioZLQpO5poJQIwmTkJEKgUjZPEJOGiAfJPvJnJroPsR\u002BPfA3MHXf/aYB7SoDjMweOrhaFPvdVLvYAFM4BIt5LO1yxWrjHVqJFTFsZ\u002BbTpC/60p9n8R8W/CvcS5mkqYjhzWXh3HC5tTfHVcS0qaZ7OgLkxdZR1K1GmfjatNg/OcAq78wwglrKpqnlTYXe0CFtlaLpbMpg5URjar7UsDXPe8ho98\u002BxO2tifn0KdPwqz9imquSZTOvqqdQ4t3Zr0mDupEn3/YonUnu\u002BVxmIfzDSGD2BNDYh7sHiW1wIYbOhaO\u002B19MPaZa4SCsevgsI9k9GXuHznkuPtSyzFFpdhH2LOwe5SVcaoqAWPkncZAIVUuLk7XEEKpiUPnVJtSHQdFG4wZ5oSZCgmfUCp46iK1MubZ4uDxBUm9vJi6G3MAcSlWKmDxJcejq2qt9qsuedViZ5mWVYNra9TM8LQqNOjqgk90LKr\u002BkPZmjS\u002BMxjqlQC7aVMunwMAe1I1muqeSbhVazjBlcHjfSrlrbYPKsVW/pKjafu3llYv0o4mq09BkbWHm7EF3/KEyrjv8ToeKzcRTBM2XmeYbd7SV2Qx9DDAn\u002BbpCfWZWDjM5zfFknE5jiXzqOkIHqFlOytR6dmlTAUgRicRQpj894C56rnuT4Wv0fwxlSmfotJjwgLgXSTJElAWmeSvpxddxi9psnYPi\u002BlrngG0498LJxG1zZ/FsvHjUf8AYFzZZ5phSsr2SG1rV9p82qthjqNIfmM\u002B\u002BVTfmubPdvOzHFNP5tQtHsVUsgIS7d1Wu2JqeticVX\u002BXxVer9eoT71XLU5dfROC46NVARZIAqQMcdRCLop4QgjA4owWWsJUrcMCBYlSjCidY8lNEG48xusClwoxlGqKtB76VQaPY8hw8wpmsDHaqxTrNpjtW5Jq46/Zzah7aLMPm7HSAAMQ0TP1hz711rXUq9JtRjmva4S17Tr4FeTjGsaZuVoZVtUcscd2k19J3apufA8Ray53hqvRpew9eXNHzuKka5pEtIIWbs7nmAzrDCphqrekAHS0Sesw\u002Beo71oupje36RDTxbzWPAR4yhgeSTXhzi1w3X8kiLIBIEaeaF0wingmOlroALQRz7lC\u002BmNaZ3Ty4KciTIQkBx4AqCqbOhwg965jbvfGXAtpVXkVgSGsJtuu5LrngEbrwCqtai9reqd4cimLrzLZbNcLl\u002BLrVsXRrBzm7rCaZtzXUUtpcrqmBXPmCFpYrA4XEb3SUGk8bLHxmzWEfenA8lb7qvNzPCVL0qwPckMbRJ7cFYFbInUTNOo4KF1HE0u0S42025-09-17T15:46:21.260871071Z c0wdOMXS4VI8ETcbTI6xgcwFyra9ZtiUQxdRXEdWK9F4ltQFMazQesQQuTdjKrTIMHuKc5o\u002BYe2O8FXB1D61LhUEclnY1uAqh280MefntELFfjpu0\u002B1VquOdebq9qLr96i49HVkcCDCnpY6LVfWsGpi78lD8Pew2uOSXivc6\u002BnXp1BLXApzBOkLlsPmzOkG\u002BDSPMGQtehj5aDZ7SLEFYzFaJHrQneF1FSrsqaFS6tkFRQnQKN9kTtEDu9UKmeu76v2pWjmmZ8q76v2pfO7oQOQCLWQw5vglvDlCQeIugRcLSEnDi1J0FIgjS6Bt4zcJTKW9JuExibIBJ5oCEZFlGUCKEwnJhIXQCCkfBOQEwsgFENYlLVJw4oGJgiUxHFPxCR0KIqYgdYqFT1u0VFuk6Lc8MXyaBATmCnLO\u002BE\u002B60WWkB5JXUkQErIIjKQE2RkCUoQDF4ShObapigaExHknlA4yqGdOgQk2F08EpADigaLqQNtwQF14CUnkg\u002Bv94FqdrxF/eoWulqjD7kQsOWJ6rmzZZmcsDqJcQDF1aqOtMKtXl9JwI4KWrFrKG4Wrg21W0KIcLEhgBlWnPABAsO5Y2z1fo6lXCnid5qv4zE4bDUzUxGIo0WjVz3hoHrWt9ks902\u002BZQPPGVzmO2z2awri2pm\u002BHe4cKUv/ZBWHj/ShktJpbhcHi8S4aEwxp89fYnlcrvt62qDf1C8srel1zSQzZ9p5E4yf\u002BRZOK9J\u002BfYlxbhqGEwgJsWsL3DzJj2J21e2vZxY6rMzWpSwx\u002BEPqspbh3pc4NsvFsXtPtLmBIqZpjCDwpHcH/DCy34TGV6hfW6Z7iZJeSSVManCvextVs62mKlTOsvBi4GIaSPIFZeP9I2y2G3gzF1sS4cKVIkHzMLxwZXV4gNHekctEw56vsvY9ExvpaoXbgMnqP769UN9glYWM9Jm0lfeFBmEwrTpuU94jzK5cYSnTcQ4uT7tFps2VdXti7X2p2pxbutnWOaf9lULP2YVWti86xTYxWaY\u002BsDqKmIc73lQGoxpkEIm1atVwbSpOeTyCaskAMI0XdfzlDUosboB6lpUMux9U9bDuaPzjCv0sndbfLBz4rPcuOcawEwxknuCfoK2nQv/AFSuqZlTWn5Qx9WPtQ18FTpN3gC7xKl5Ha5f4BXfYta0d5QHKyBJqieQatnE1G02kiAFlVcxBdAYT3qy0yRlYhhpPhwUU9yuYzECrbo4POZVbcbN3eoLpGAeUpzp2UpA0KEvHFyBROgRNw8nshCKhGiIVHosTtw1ORMIxSot4t8yq5qOJuAEBce5BYIpg6DyTNqMFiLc1BqIJJTtgC6GrQq050sk/EUxoAqj3t3Yj2qNxkJhqw/ETYAKJz3mwlQF5abJjVd4FVE/RVSCdx/mEqVOmT8Yd2FC7E13NjpDCGjv73ziTzTBqUKzMLVbWoV3Uqjey5joI9S7HZjbTDV6nwTNqzaVT5lciGu\u002BtwHj7lxmEyvGYkjdpPg8Q2VrUNjcZXg1DUb/AHf\u002BKzZKuvTWGhiKQqUnsqNIlr2mQfAhR7z6Z3Xy5vA8li7MZLmOT0BRZiXVKEz0TxYeF7LcLjBD2wVyswlIOa4S0ym0uFC9sHfpug8o1TMrku3Xt3T7CpFTxNxqmIHGxTX1CbfmxVwM7kQonAgSLhSE\u002BpDwUwQ1KdN4uBKp1qLmfnDuCvObOhQEIMuoA6xAVOvQafmj1LarUG1Lg7p5qjXpOp9oSOYRWHXwrSewFQrYWB2V0NVm8JVSrSsrKOeqUSOBKqVabxzW9WoieSqVaAK1KMGpvtNiW\u002BCiNQ6PB8Vq18P3KjWoRMX7lrUU6lxLTKr1CRMqy\u002BkQerZRVNIcPNBVc4\u002BKenXr0XTRqub3Tb1I6lMG7SoXAixQa\u002BBzm\u002B7ihuHg9ostnC4/fbNOq2q3udJC40jkUNNz6bxUpOLHDiCs3iTlj0FmJY8AEwe9G6DEEFcdh87qNAbiKQf\u002Bc0wVtYPHU6rA\u002BjVDvzTqFm8WpZWtpVP1ftTXMlQ08YwseKghxgD2o2VARa6imcmItqj1FkJEIGaeaLeQGUtArgkDgbIS26Hv0SDjzUQ7XRqhMG6eQQm3eKAHAyhEg3Ru1QkydEUJJTghNcpGIVBGEiI0Ufmja5QIlNfdRGHAoTZqqKtXUqM6CEdUy4oSBZajFMPFEHAIDCRuqgt71Jt4JgEoQOXJt6AlBQkKhOKG5RAJBUDBhNoiJQ2QDJlNdFwgJiLaoGJungc027olu96D6Sr7bbM4Vvxmb0nkiYpgvP8AwgrCxvpSyalPwTB4zEOHNoYD5yT7F5S7BYh43hSLR\u002Bcgr0KlFo34v3qZE7Y7vH\u002BlPNKhjB5dhaDedUl5\u002BxYGM252mxIc12aOptPCixrPaBPtXPtNP5zSTyTvNM2DY81cXIuOz3OXOLvwpmLidSMQ/wC9Uq1SvXeatZ1Ss83Je4uJQtqMpzFOfNP8KdHVYArgdtN7h2IHIqzSpUiOuIjmqgruI1PrUbnvJkOI7pTFatNuCaOu1hPeJVvC4nL6PWdTpW/MC53efvKWnTLu05S8VldMc5wbR8VTA9QVatm4fO6GD2rJpYdpFz7FKKdNqzJDamq5jWfZof5CFD8LxD9DB7ymO6BayhqOa14Id4hWQTA1ajuvUPknFME9Yk\u002BJVYVxvCAURxJ0DSgsBjBo1vqV7L8Q1kM3oI0Kxn1qouGkeSjdUqO5\u002BtLNNdxSzKgKY6WqwEfScAhq53haYMYij\u002BuCuJFKq\u002BOr60QwtTjuhTsi91dDi9pqYEMe531WrMxG0NZ5O4xxH5zlTGD4ueY7mpDBtJsfWrnFNqCtj8VW0O79VVnGsbkukrWFAMZ2mjyUDizevBha1FIUqzvpFOKBBhxcD3q4ax4MgcyVDVeXOkwnueyrVY5psJCj6Pe5gq0HNJiU5dTFmiT4JqIYcG9mPEJNMC4BVhlHE1rU8O8z3Qp6OR4\u002BtFms9pQUXFp1IUTntBtC6XDbGY2q4F9V4H9HH2rVwmwjDepUBPeJQ1wfSk2aJ8E4ZiKnZo1XeDSvVcFsbg6MEgOj81atDIMIxsBjB4NTU14yzL8c/TC1RPNpVmlkmYVNMPU/VK9opZXgacHoGuPephSpNsyk0eATU7njWH2XzKo8D4JWg8d0rbwGweLq3q02sH5xXpjGAXt6k7iQLFTaa4vC7B4KlHwgzzha2G2ayWgyG4Ki4ji5gJW2683QFqJtV6OFw9AAUqTGAfRaArIqgC0BDuIS2Iuh5F2iTIQVA0iC0FC6tQpz0j2tjvVPF5zgaItvO8EBV2uYN5rS8d2qq1X1Ht7DAO\u002B6ysdtfh6Ti1lImNJcAsh\u002B2lNtQuOG3wfmh/8Ags3h\u002Bm5XT08RWoPDXy5nuV1lSnVEsc0\u002BaycqzPB5vhRWwz76OpuPWYe9Tmi\u002Bm7fpmCsX28tL5sShhQUsW1x3Kw3Hc\u002BBVg2QCY5IXQdbIko5IIiIKFwBEWKliP8VE59MfOvyCCpXwzXiWjdPcqNWk9tnsI74Wo6pyYT42QPc5zSC1setBiVaImwlVKuHGoC3KmFOrHz3EKlVp3giCisOtRvcKnWoTJhb1Wl5qjWoi5FlZRg16F7tVOrRIm0rfq0yJkSqdWgHaWK3rLDfTINrKFwEkOA8VrV6EG6p1qJE2V8ig\u002BmD2bqJzSOBVp9Mg2sVG91iHDzCYisRbSUIc5jt5jnNdzBgqY05EtMqNzTMILmCzevRO7XmszmdQtnC5hh6oBpVwCbbpMH1LmHNugLeKl4xZyruqWJIs9WG1GvbLXAriMJmuJw43X/HM4BxuPNa2AzWhXIEmlUnsOP2rF41qcpXRSOKRE3CpMxR0cLeKs06rXDqlZaPBlMim6cwqIw4jVEHJFk6IS0ogjrohOqbePFPIUAzdMQUSYBUMIi4SLRISJ7k8goph1dEnXCcNSNhCIqVB1j4oH8EdTtFC/gFueGKA6pAXRASU\u002B7dENB4JAWui0shJBQNKEpEgpvBUJIkAaprnwSi6ASh70ZE8UEQFQ0pTCR9iWnBA10W6U10pKDoKuPxBEB8j6oVd9Yvg1XuIWhVyptOkXnEzbTdWa7o26wUmL7i3qDj1KbnnzUT6NYultJzfJSMxDaRloumfj6rrCAr7gG4d57ZhF0VJmp9qidXcTLpTb7nGzJQTfFNFgoyWnjCKnhsTWMNZC0cNkWJfG8YnuTRmSBpdSsNQG1J58l0GE2ee3tVR5NV6nklBhl7y7yU0xyjfhT5DWbvipqeExb4DnEE8A1dU7AU2MPRMJPgmp4Csb9FHeSpKuMBmS4h/adu/Wd9ytUtn6Yg1KhP1QugZhHQA57Ae66lZg3hph7j/AGU0YbcnwrR8i4\u002BLiPck7L8OwEMpNBjvK2TRqXlrR4lUq5fJktaRyCaYxa\u002BEBtoFW\u002BDMae3CtZhWFM9Z8grOfiZMMBcqifowDAfbvUjdymLlpPeqUYmr2Gx3kqWnlOOrkdcweQKYakq4xgEdUKnUxbN4neAWxg9k8XWfG68jmQtjCbEwB0hAPHqykxNcUcQ546jHu8GymZRxtTsYZ/mF6bh9k8NTHWcT5Qr1HIsLREtaD5Kp3PL6GS5nXN2PA7mytHC7J4mpBrNqedl6XSwlNg7MeSl6NjdBKJrhsLsVR3uux5HK61cNslgKYvQE/nOK6UAzySvCibWXSyPBsA\u002BKbZXKWEw1IAMYAO4KYunUpQCENpg1nAIwQNLINwnjHena0DtGUBSeKUuiyQLBYxCTq1Noj7EQgXcU5d4KtWxlNlzA8SqGKznD09agQxqOcBo5RPez5zwPErmsVtLRYDDS7zhZOK2pbHVpifrSmLjt3Ymi0fKNPgVBVzGky5eI7yF57V2hxlS1Ob8rKs6pmeKElrgObii9uu7rZ/h2Ej4VSEcAZKpYjaag1s9PPiQFxxyzFVB8ZiQJ4AKtWysAw6o496mxrsrfx\u002B01A78PY4kazJXN47aCvVJbTd1e4QoX5dDjcQm/Bw1JnyWpiWM\u002BtiK1VxImShazEv0a8\u002BDVqDCCnEQPJSNBBs0k9wWtTFLLqWaYXEtxGFqOoVG6O/wNiO5d3kG0LqnxGadHTqAWrSAx3jyK5bpHtsWSUz216ggGAe5Y5e6\u002BHpRZSrNDmlrgbggoN\u002BtQvBqU\u002BS4rJMxx2W0\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\u002ByUnGFA7bFJ90gbpPF0VVdqfFA\u002BZRv1PihcYW450EGbpQE880zjyQPbkhLrEISSU0KhFxTgWUL61OmDvOEqF\u002BOYBZrvOyYLRF0FSoxvae0eJWdXx1R1t6Byaqr6hJ09auDTq4yk0EN6x7tFVdjKp7JDfASqrZJklGArgmotqYnrPqGJi6stw1EatLo5lR4A2cFZHNEZ2NAGJc1oAAjTwUUKfGEfCXz3e5RSOSsqPcn1abgN6oD4vUZq0GiQWeKejlFQtuJV2hk4cIdcdwXON7Ga/MGss0F3gohjMbUMUqDh/ZldLQyihTFqDT3lWG4cNMANHgFe1O9yraGb1buFVo\u002BrCsUMpxtTtuI8SulFEDUlHTAbYwr2s9zDpZCyJqOk\u002BtXKWUYdkdWVqb1k28OJFkxO6qbMvwzDak0eKsso026NHkmdUZOqbp2A2koJ6bG6QjFMDgFUOKA0jzTnFSNT5BEXd1kSXe1A51IdlwJ8VRfWDhYE\u002BJTNquGseSGLgc28oHOYHEQqtSsQo3VgBJKLi0Q8ntGEbaTN28k\u002BKptxrIUVXN6NKeYRMrSLGgWEJHeFybLncXtGGDqFsrIxefYis4gGqZ4AQEWSu0qYyhT7VamPMLPxGdYOk49be8FxtStja3YYB9YqvUy/H1wekrNaOQRcdNitp2AxTfSYO8iVm4nal02xG93NaFlMyam0dd28VK3A0qbYDRPgiyI8VtDjn2pU3nvhUamPzau7UtHe1aDmtAiwUcXltwi4zyzG1PlK7vKAhbgDUPWD3TxMrTa0zNlYY4RB9yWrIpUctptaCWDxhXsPgqW7MAohUtpZTUnNDZbA5ysa0OlRZTNgFYY4TaFUfXpjV4URxdNnZJPks2arT6Zscyo34iBwCx62OiYkeKp1sfFi9JxqbG3VxjR85vrUFXHH5pC5\u002BpjmHSSVDUx1SIbAW5wS8mziMc8A7zjHcFRfmIBnpAPNY9WtUeTvPcVFvQtTgxeTaq5jhokuc9x4BZ9bGB7t6nTLPFUt\u002B8Roi3jGi1jNq8MXIgASoK1QuuSAeUqEVWgXF0Lq7HG/BXE2na97TIJlJ1Ss4doAcoQGoDpKQ341CLpBzj2tVLSpOrWBb61E47ok\u002BxCHuBBaS1EWamELGSH3HBVHS1E57nXc4nxTAg8kUILjrZEGNjUJASkGTaSgZw3eyQQkXOMW9ikbTgRYwn46IFg6\u002BKwtY1cPWdSfESOPiNCuuyLaFuI\u002BJxhbQqgdokBjvCePcuRJ5plm8dWXHpksqNmxQfGUhNM24tPFcbk2d1ME3oawdVo8IPWb4SurwWPw\u002BLoipRqB7OPMHkQuVmNy6tMrU6nJjuRKIEg8VBWpsqCW6oGV307VQSOairYeDYpiBEhAC143mkEJg6LFARvqFGZCk3pF0DggiffVRkGbKVwuhIPBFQPY12olV6lJ7ZLbjkrpCEtBFkGc5rXCCIPIqCrQEaLSrUg4XHmoH03tBm4HFaRk1aE8FUrULmy23MDriFXrUeJCujAq0L6KtVoA8Fu1aM6qnXw54QtamMSrQtoqtSjfQraqUiOCrVaIJPNXUxjPoDiFXfRjRsrXqUTyVZ9EglVMZTm20UZbC0qlIEXF1XfRI0TWcUyITQp3s52URYZ4Kpgabn0nh9NzmOHEGFp4PO8VTd\u002BMRWbzgAj1LN3TqmiUyUlsdjg8ywtdrTSxDWuPzXGD6loMxLrB1wvPYP/sup2de\u002BtlklxLmPLZN\u002BR\u002B1c\u002BXGR148t9nQNqMfaQpBcR3LL3oIJkd/AKajiXMNxIWMaSvsfNRvJmEFbFUg60k\u002BCr1MU9xIpsv3XK1GVk2aC4x4qN9ei03eD4XWLmOZsoV3UajXmo3UcFm18xxFQxThg7tVqcdZvKOhr5g1nFrBwLiqGKzZsR0u93MWC8ue4l5JJ4lDBC32s3m0HY\u002Bq8ndaGj1lO2u9\u002Brie4qg18KamQ64KuJq8140NkdiJBlVmnSSpWdxgqYsqZuilZcqFriRDhdSUzClaizgrVXDuVvgqWFMYgDmFdPZUKzcXPwpx/9aIZ7gpMT/CH\u002BKYNEKo\u002BnW0WhuiKA0aAKJ1WpA7IUL3Odq7yCms4sucOYUbnsHFQGOSF1QN7TgmmJHOMy0IOudCAq78ZQYbuJ8FWrZrTptJ3XEeCmrjRgxdxPsUL7FZbs3e\u002B9Oi\u002BO\u002Byr1cVWq2cd3uCLjVxFTcg7wCruxIntErONY6GSq2JxIpsLnvAHeppjTq4xrDw80DMxe7qteAO4LnHYvp3GGvdGkNU9Cnin2pgN\u002BsVVx0lHFOI3iZ8UT8Y4fPaFkYbLsU4das0c92VoYbKcPvNNUueeIJsieEWKx50FRV2VMXWtTa8zyC6Whh8PREUqTG\u002BSkLmtnQIa5xmAxzm9d7mhQ1cvbukPMnnK6KpXYRABKgc2nqQCVKsc2Mvpg2BKmbg6LBJp3W24N4QFVxNSjTYd97RCjWs57WMbMR4KpUxYaSG0yVPiMfh4hpLjPAWVJz2OJdYAqkM\u002BtWdNgxQ1XPLbvJTVa9JvGfAKF\u002BKEdVnrU2tew2Ma4c0Yaxo5LOqYi5l8dwUD8VTDr7xTLUvKRrGrSae3KidiRwBWY7GUwbNKifinvBAAAWu1m82k/GPBgANUNTHQOvU9SzJNvbxUocCLD2J2p3J340jstM96gfjqxPbDRyhM8F4gAhBTovaZJCvsm0XTufO8XFRvqHQNUpaY0RNa1o6zAUPdSIeSeSYNBN1pPczd3YVKtS61irKmIrDkm3GzoEujg3Ka9O4ghULcIMtTbwPVdbxUrarYuCENQseId5IiBzaQN/YUJFMEG107mNA6qFzeaLIbfaHdykEEWIUe6BNkg0k2hA1XemA6QhvpMlGW2RMaToUEQmYThribKY0nC6FjHl1kQTWANuLpQpGMcdRopOhtoiqziQmDirT6PVkWUDqR3rC6AZM3SlG2kZuVK1jG3j1qGKxBOgU2DrYvC1RVw7zTdpPA\u002BIUoMCQnDT5eCLPZv5Rnba5FHEObSxHAaB/h9y3Kb21eq4ariaOBq1z1KLnz3Lcy7CZrhGE1orUALNmag8OfmscuP6alaz6dSiZougcuCKlWbU6rrP4hQYbFse2QSRMGRcFSlrKzTGq5tJ9LJE96rtfUoiKgL28CNQpWva9oc0yEDm\u002BiAzKIpp5oGQERoj8LpQOHqQROIIugIjSVMQChggoKz6LHGY3Xcwq9RjmHdeJHNaJAdwUZBEgxCujNfSGoCr1KAINoK0qlCTNMgcxzUL2AWcIKoyK\u002BHbGl1SrUIJst6rTMc1WqUb2hWVHP1KXMKvUoAzAW9Xw29oqNagWzZalRi1aVrhVqlLlotp9MEXCrVcPxaqMd9Np1ChfQvIWpUpRqFA6kZtCrOMxzY4IC21lfqUd7gon0HDvCamKcc102ycHLqjeIqk\u002BwLA3AtzZSz69PmA4e3/BTl4Xj7VsFkWhAKQgxZW3NuUJaN0rlHVUNCnFxJ8Sna1rGw0ADuRkoXEbpJ0W4w5PMmCpmFd7rnfI9VlAaZaRuyrlSn0lVzz85xPrRBgbqF1jnikxu8YcEZwtpB8lb3Qe9DuQeqYVTFJ1ADUKJzXM0WlwhwUbqQOiCpTraByssqcQVFVw5lVzvU3Xsg1abwVPT1KyaVaDdaOFqb7NZhZ5N8as0TFdvitExuhZ1KOlZ4haMzCytZ9YTVd4oIKGsJrPIJFylfmriPoF2b8GQSo34/FESN1o8FHtHicDQFItr0WwOyCFzuJ2lwwG7hqL67\u002BAGiwR0L8TXd2qp8lA97jq4nxK5upm\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\u002BybWpTxjRYyURxFY9egGtd\u002BdofFUaVRjhZsHwU3SARyTE1q4HFuqENcAyoNQDY\u002BC0qdXe6rgAVzT6jGiXOAB1lFQzqjQ6lRznsFgQLhYvD9Nznvl0T6W6d\u002BmSD3JmV56rxuu9iiwWLpV6QqUqjajDxCsPY2oJss46EUxUQD6WnWbyRsqNdob8ish5ISgG41TlCLOVDzwKYtgSE9nBIjd0CgB0EQQontLTbRSuO9bQoCCFdEZIdqoqlBpJIkHmFYIB4KOSE0U3gt7QtzCAsDhMq84AjRV6lGTLTCop1KPK6qVaV7haZlphwjvQOaHaq6jDrUVXdTI0W1WoGOEKnWonkrozy0EXCDd3XAjgrL2W0QFsC6qNNwlDW\u002BTKIEFoPMIa3YK5zy0oHiqGZhznMA4Cf/XqV/wCcVVxTS58jlC6Rms2Et0HSVbdTDhcXUTqT2m0Fa1lAWkWQxdTEXgiE26R3q6AHgna2RZPF0oCmgSCNQnHddGJ8Ut0E8k0wAA7wk5odqAURa4G6QVIDdc3sunuKJr7w4Qe9HFuCW7zEhQI3T2QFkGWmEutyCDscNTsIbdbmBw8U5cSDyUNGkWiQPUtDCsJGsLna6yJKb\u002BjbugSnNZ/MBGKLYuSURY0CA0BQSYYNLQ7U96nJAWW59RgIa4gJqVeAekN\u002B9TtNaLqrG8ZVarUiXAKB\u002BJbHVBKgq4kkQYAScTVk1N7tQgc9jbyqRqydLITUutyItmuNAFHvtA5qsagjWUBe7kqi1026ezZMcYR2WjzVRxcYQmALlDVk4yo50FwA7ghdWvIkqrvCdUi8RaUE7qztLBAZdrdRGoQhc8xqVYiSoIuLEIS9xNyVETGqF9SEErnGdSgqG1lVq1xOhUbsQwDUkoakeHRcyoC0E6ie9CcU42AAQOBc7ePFXGKvUMvq1gDIAVpmU04O9UcSq2Cxhw40nuSr5liHmxDPBD2UcRSdSqkKFwLtSiq1XOdL3lD0g4SVRC4GU27AmFLc3iE0FERRdGGgGynp0d46qUUQ3gmtYrMZJ0U9LDyNIUjGkFTMdFioYVPCtABJRmjTHCU3Sho5qOpiCdBCijLQ0wEJcBMqBz5MlyHengmGpnVWi4U1B4qDhPJUmgypGmL6JhrRaQNAAQp6VUkiTBWQ\u002BvU52UJxQLrndTF7nT0cwbSBkg9yJ2fuA3Q3dXLDFT2b96jfVc\u002BxCTil5OhxOdEgkvWdXzZz\u002BRWU9hOiJlCo4zZoVyM91WnYt73TYKWnijo8quyg0CS4khTb272WhPY1M3FO\u002BY2B3pPxNrkKs4zcqMzqmQ1bFfeFgnFcgwQFnueBeYKPpmnsgymJq6XH/wBlE94A6xVQvcToAkI5yriJHVW8BKie8gSU\u002B4XAwCibhtC5CRD0lrCUbHF7t1W6WH3tB61dp4J\u002B8DClrWM5lFx1KMUYMyVrswjfnG/cpadCm3hKzqsZlKpq1p8So8U3Es7R6vcugLW7sEWVXEU91pmC1WcjGCWvdG84\u002BtHTojelWa7ADLNEFN14K1rGJ8DVqYNznUXRvdoEWK28DmLKzQ0kMqRdp494WBLQJ3gEJqMAmbrN4yrOWOwp1WvEGxQvpAnebIK57A5mWdTEFxbwdqR481s4bEtexr2ODmHQrFmOksqUViHBtS3eFM1wKDeZUEWURZUpull28llpYJ5Jb/NRU6jXaHyRlpIsgd0O0QmQbpgY4JF0lAw1kJiJ1TmxsmkFMEbgQgKmMAdyEgFNVC8A2IUL6ZF2HyKskdyaLqopgg2dY96B9JrlbqUw7USoDSezsiWoM6vhwBZVKlMhbR2025-09-17T15:46:21.260871071Z 3XCCoa2G3rtV0VaV6LfBNV\u002BTPgpNwsG6dUFa1IqDPd2kFRhJPeidd8KUttYrcZUnUwEJbHBW3N7lG8GdERUdSa5RmmW6GQrZYdYQwVRTIB8U27yVt9NrhfVQvpOb2boITron8UcTY6poIVQhpY2TbrTwhOEUjiioy0jTRJSgBJwkIIyCmhHF09uSI9OsBDRZPSq7l4lQb1kLnQDdc3TVs4ozEAIX13HUqmX8tUJqElXDVh9SxuYULqw4KIuAOqZpaSiaM1XHgEnX1Tgcgk5lQ9wVAOIjkgkOOhRVAWm5QiOaGHASmxJKGU4BItdERuk8VEQS7iVcFJ50amfSc27ojkgrbhGqjJM8lZc9veqNed8wICJo53iYhPuTqVEx26jdiGAASqaI0xu6n1qtVbE3KN\u002BJEdpV6lfe4qpajqRqq7jfQKUvmbKJ1\u002BCqI\u002BseKkbVhgkSUujtxTCm43ATQ/SvPABDL39o2UgpOmSi6ODdQQGmOBujYzip2s1sia2901QCgYEzClZQZaxKcGEx3pRUwYxtgITPg8QFXcahMcEO6QUBOfBIF0286JtCjvcJNcAIV1NSXKHimLxyUtLccOansahLYMiUD3BvasrpF7KDFsD2SSAQmogbWHHRJ2IaBZV\u002BCbwVFgPc8SCAhcxpMkklRsDg7RGbImhLADLbJxHGZQucfBIOaRcoiZhsAQpJLeKq74AtKHpQRBJRV41Wc78UDsQ2YCqCXEFskKTo7XTBIa45KN1R50geCdtF7jDGyVZo4R\u002Br0RUgGNSVPToveRoArjKDGDSSrNMEiN0hNFSngWRLnOJU7cNSaIgKy2mZRCm2NJWdVUdSY0Q0JqVNsy4e1T1KcExogdGoCLKt06bA0ENUosqNOoWO7lOcRSiN6fJStROXBqjFdgJuq1TFsboYVKvimOloM96YWtKtjGtFgFRxOMfUt1QAqbnF1k4Y8gWV7WdPUqb0QUw5yibTAN7lO6mIloghakZ0AAhLVM4hvakKJ1YRAREpHqT0MZUwjt6lUEHVrtCqNatbU\u002BCg351CYs9nVYXOqVVvZ3Kg1aT7uambj8ZVO7SpCDxIXGudI5LayfP20mNw\u002BOcXNaIbV1I8Vjlw/TpOX7bjaeJJ36tYA8mhWqOKLYZU05qGhVp1qYqUntex1wQbInC0Qubouy13FMWwbKg0upGW6clao4inUgTDuRRBkoSpCCUF50QCE8ck8dyZAJCa0ozJTXQRhOQigHRCRHBURVKTHi9jzCge19P84c1cIlMQgoVKTat2uh3foqOLa9lNzXtII5CVsVKQd2bFQkPpmHi3NEchXrVnucylTcwTd7reoImVKzGjrSupq0addhloPes7EZbeWALUqYyxiHfOARisDqFJVwbxPVUL6D28FdMGC06JiBxUUEWKJoMIGLRqClHNJwcEptcIBcxrtQo3USLtMhS6pxIRFXdE8imLVcc1rhcKI0nDS6aIRIRaoiBMGxS3VQMJ90JXTpo797w2yEO37Jy0uEEqLcNPQqNpd1o5lBWjhGiGXu\u002BcYThvO6moiIuk0kJPLWm5A8VA\u002BqJtfwVF9lVrW3KB\u002BJjsiVR6QnUQjZB1KHcOrXe43YEALyJIRndF7BC6pTBu9CpcOwO7QKvU2NDbNWY3EsZoSUqmOeW2MBVhqFzQJcYVevWpEETKyqmLjt1D61BUxrfmmSmIuueyTMqriqoglqq1MRUfoYUJc86mfFUSmseSHpCbTCjDZ71IxjhaIQwxa4/wCKIUzwRhosrLG0wBATTFZlGTxUow9lYbcwICMU9ZKmmKraDU4pRYN9at7gaLR6kFQBo7k1cUq1PdNkAAPNWqga5qgjddcpoYawkntOkJvcmqaxCRniT5IS4DvTOdaye5uDlCSEG8dN5RVHOBkElMNE8gAkQoHVSEL3EzIQATaVZGdGKhNyjbiHUzLWjzQBoESkQ2VcQbsTXfqWtHcEA3nakuUlLDVXmWsJV2hhHhp3oHgp7Qy1SZQLhoQFJ8H\u002BiR5q8KbWiCJQVBI6ogpq4qFkWKB8N4hTVDB60TyUJDn2ayUVE\u002BHaBRhhNrK7SwdR1yFbp4ERcSU1GQKD3RBMKRuGcDZhctmngiRop2YcU9ASe9NGPRwlUkdXdCtNwYbq4k9yvOY7e7kBbyRFSnR3XEzCngQjMSozLb8EEtMMi4v4qabcAqk8ZT9K4CJMphq2LEqN9drbDrHuVSpVfN3FQOrNBsUxNXfhE8AFC\u002BqwCVW6UESUDq1Ph1j4JgldigTDQgdVceKrOMukCE4sZJJVNSw52pTCkNboqbwdSEYInUIaAs5Snp1CDB0Tl7W6lQ1HN1CIsy0CZEKN9drbzKqvcZsfJROEHW6KlrVi9sFQO01TEkG6B9Ro1KoF4vqh0Qvrt09qjdUvYoDcRxUL9ZhE5wOlygueCotZVmWKy9zjQLC13aY\u002B7f8ABdfk\u002BZ0MwoA7zWVwOvSm47\u002B8LhgxwEp6ZqU3texzmPaZDmmCFm8ZV48rHozgonU\u002BtOh5rAybPy34nMHdUC1WCT5ge9dDSqMrU21aTg9jhII0XKyx1llHRxDmOh8Ec1baWvbvAqmWgjRAOkpmWExyWVXSCEggpV2VBDjDkbhCBEJj4J5ThBGdUpmxROLGiS4BVMTjsNRHXqAFVNWSy0yo31GMF3BZFbNKtQbuGa9/sCr9BjcSZr1TSHIFMNaGLzSjRBhwJ5BZzsfjMU6KVINbzIU7cBQpHe3A93MqTs2AgdyumAwtOvT6760nlFlap1mus8QVACQU\u002B81wuoJ6lNrhoq1bDNPBSBzmQQZHJSNqMfaYPIpoy6uEF4VV9AtNpW8\u002BmDoFBUpDi0K6MWDxCHdBWnUoAzAVapQLeCqKppRcIYurO6RwQuaHcIQQJ0ZpkJoSCNzA7VA9jmi11NulK/FNFfjexShTOY1x0uh6I8yqO3dXaBZVsRit0aBML8CVBiQCILfWmLpnY\u002BoD1Ws9SYVsTU\u002BdA7gg3RpACnZUZTZ1jEdyuIVOi43e4lLdAJAGijfjmg9QT4qpVxFR5JmB3Kpq497W6lV6mJI7EKlUqE6uQdI0DiSmJq0/EVXHtIDWg3N1DvucZaE/ROeZ0RNSnFRYIHYh5kap6dAcTKmbRbE7vsQ1UO\u002B/UFSMpHuU5pkaWCcMKKibTui6MTClDROqeAgi3BwCfdjijOvFNBRQEAKai4kbtlC4GEg7dcJ0U1Fq7TKkFRu7eSVW6dkayhNe3VCgsmsYgAKKpVPEhV31TEl0KF1RpFySVcVYNVoFrqJ9UOOgVZxceJPmmEjUq4mpzWMwAEDqxPFQlw5lDvW5JiaM1J5p\u002BlEd6gc4c03gQqe6Z1UzyQl55ygOvPxTHjCII6SUBMm1yoySeErRy4s3IdTG9OpCER0aL3xIICtMwzWGdSrBmO5MSBxRRsfIiIhOTIKqveQepcqB1Z7jBJCmHcu1KjN27hKqVMS6YbEcyowSTEzKt0MICJeQmYdyqxpe/eMlauEoUy2YJPenp0mNbAYPUjktIi3giampsa03FlYp0mASBKrNfIubomVdw8woatDhAQVmb1xAKjdibdUQoX1nGJcfWgKCLEqJwglyTqolQVa50sqGqVA3hdRmu1zdVFUfqSqr61P/ANkhVo1wNAgqVnEWgKm6v9GVG6oXQJKqLbyXO1MoNye0SoWVg10TZWWvbrIhPcQ1GQJaSUAdewClqVqY\u002BcFWqVWEy2x5KyiWZRb1pJCqOrOAtZR9K4m5kJguPrNYdZUVTEviQLKMQRITWhMEjKxc2ZCYvMySoHjduDHck2tFnAJgsCp61HUquE6FQ1q\u002BkNHioHVHE3dIKQTPquiLKF7iZKexCfdJ4QqIbHkETWE34IyyyKC2IQ0mtINvajAIsITscPnCFKIiQhqINJQvapXGfFA50DQFEBuX181dy7McVl53aTt\u002BnMmm7Ty5KoHDimLu5SzSXHaZXmeHx7D0ctqAS5h1Her4g\u002BK88p1H0379J7qbhxaYK6DKNoKbaYo49xBaLVYmfEDiufLhnh1nL9ugdTBEg3SZXfT6rxIHFFTqMewPYQ5rhIINii3WuFwsNnfiKTRIcFnYvNejO7TG8e5WcRg6TzoY5J6LMNR6ootnmQiVlNq4/FmHAUm\u002B1SNyygTvVnvqO8Vo1Wh12qHsyITTAdE2m2GNA8kJBOqmDuBRFoI0RVcHgUi0ahG9l9FGZCCMhCYUovMpnMOsWQAHEd6cgHhCaI4JyOSAhVeyAbhSsc2oLHyVeb3S3Zuwwe5ETvpCJCgezgQiZXcy1QSOamDqdQS0gpoovojgoH0rrSewHQKN1M8lTGcWxYptxp7lbfTEmQgNExYIio5keCEiVaIawdYqticRRaNQFcAOYBeYQ7w5lVKtarVdFFrjPFIYbFxx/WVkTXoLyxjLua0LJxVamASCDCza2Je43e71qA1CRclakS8lypi\u002BQAVd\u002BJqPMKJwc7RExpFplXE2iD3RcDxTSSblO0OJgNKkbRfqbDxTRDuA8SpAwWACtU6LIuFMGMAENCzpio2kToPYpmUb3KmnwSTVwIY1uglLWyIaJXjVRQGNEJEFHbkhdEq6B4pE8U1iblNx5oESdYSm0myYkhC48YQ0z3S1ROfKT3GYQEiVZEMXnQJAkCZUT3DUJg48VTUjiIgoSRuyg3gdE/BEKSeMBLx0Shw4wm3UA77bwFGXE3Uoplx0KcYao7uCIrEjkpKUusGq3TwrW3InxU4pxpA8EFMUSTdylp4eVcoU6bnw4K42nTbo0IM6jg7zuz5KQ09wq\u002BCOSgrATOimis4uQGVIWOcY0TOokfOKqIiCmZR6R17BGyz7hWBEWCmgaVBjRYSrFMQFEDZPMxdBPM2lERzEKFrhOunFSCoyJLgiiEApnVI4KF\u002BJotJ61\u002BSq1MYXSGgBEXDUPgo3PJVZuJAbDroKlfes0x4Ke7cieq8jjAUD6oBuoXPJNyfWo3mQSi4erXmQGlQG\u002Bqdx4lC0EgyrGaaSBwTASdUbQJ7MpEEXAHgtaiNzYckSTpPgiJk6QgcYQwJkym0Ol0DqrRpr4JCo0N0MqoJ4CAwPFC6rOllFUudSgmFXdN/UmdWcbAQFUJjUmU1OrBMiyCzvTclA98CQoXVHOPVskKdQkFxsmKVR5cUzGvJgCFYp0gNRJRNs6IRNKkx44AqYUTxIRU3A2gBGY4oiMtDbJi3iVIYIsheC0TqgCAOCUkXF0zniOSDpLlAQeeJTFwHemEmSUziI1VCcQbpt6yjdVY23FRPqyYaFcRMakKJ1SeAUe843JPrQEcblMGnk2cYjLHncmrROtJzoE8xyXa5PmmHzHDCpSIa8dumTdq84AnsgqagatJwqU6j6Txo5jiCPMLHLhK1x52PUQ8GxCGpTDlzGT7SNI6LMnBhAtVAMO7iBp4rpqVRj2h7HBzXCQQZBXG8bHWWVCQ6nrcITDxKuQ11jCgrUDqyyiq8QE4JAtdIyBDhCZFSWOqjcwSnkSiB5hBXcwiSEIJCskWsontEKAHAOEhAZabhOQQdU\u002B9OolUCblNcIoBPVKY96IbeBEEISwtO8wwjgJtEU7cRcNe2DzUwG\u002BLEKBzQ7UKJ7KzBNJx8JRE1YMbJJCoYnGspCNVHVbja1XcPVBtqrOHyykwb1aHnvuteE96zHVq\u002BKMU6ZAPEomZUZD69Se5bBpMYIpsDQOQUbhGqadqsymyi3da1LzU7mzZB0R5KCs/rG104ouMdUrU6CmwWa31JU2AGSAumsyKTMO5wCs0sMBqrDSOATzfRRUfRbrSAo2tEqwTaIUWhugUQEi480xMtKG/elBg3iTKW8JgqMyOKaTrdQSk6qNzjolJ5pR3q4YEk2EJXJHBOnnghhgzvSgDilvDmgdUAVBPFlCSAEukJMyhLobJIUTUdYxBiVA58kmIKkqO3hACjbTvcKoCDzSDCVOGRwsiFMFVEAEIibWCsCmIuEJY3l5IuorngiZSk9ZSt8ExneRNSU6bQjuFE10HVOascJRBvMiwSBjVA3ecRqpxTsgEEzZTNrOAghA6xQF17KCR1Rx4QnYQRe6rF5khJtUt5lBZPNImbKu2sS66m6RggkgeKKZzeQQCoW2N01TE0wTukEqs\u002BtvaBEWOlk3sE5rtDVRLjzKr1XH6RPmqNB\u002BLZpqo315tMBZpeQpKLmkXuUVaNUTa6HfJngorX4JA98IRJvDvSLzwuorgzKW8mNSpN64k3Qkwoy/rQnjyTEvI7ndyEOi6eRJ0KB5aJuFYzupd7qzKjdVEyFC\u002Bo1o1kqBzyTr6kE76/WiFE57jYmAorzN5ThwdqgKBwKAkAc0fmmIsbSgEuG7MoHVeQRdEDcmO5D0W6TxCpqO7nyUtyTE2UrWDvUgaI4KoGnRAAkqYDQIBIGqIAuNiii3ROqK2kJw0RCREDvTAhB0Rt0hQnq3JIT9K0NmZURYAgc0ziIiFXZXveYTvrjhJTDQ12ECQFWc6ZGhUz6j3G77KEjrFaxm0zKjgI3QhqOebQjaCn3RF1U2oNz6SW4Od1YLREKNwAMg\u002BtBE4EappA4onESggaoujZUm0R3qWwVXijbUcO8FMNTmJvotDKM4r5ZLGgVaBM9GTEHuPBY7nu5wgJPNS8d8m54elZTmmEzGmXYapLh2mOs5viPtWgDbuXk1CtXw1QVcPWqUqkRvMcQYXX7PbT06zBQzKo2lVHZqkQ1w7\u002BR9i48unZ4duPPfLpqjGuaqtSm5neFba4OaHCIPEcUnAHVc21IEOSLiDzUlajxbYqDeLTuvkd6Kla6RZKA4KMC0hO10WKIaoyyjIIKs2cIsgqUjwQV26o55hIsI4IbopyLJk7XJOQCQmDrwUY70xAlECWhyTS9n5wTEOBsiBB1QE1zXDWCmc2RBuhewESDdC01GHrS4Kw0n04NkEFWQ5rtClujuQE7raWSFPmUqeikJjiuiGDWhM4X5Jy7uTEhAM96if2rFSkgcQonODtCgEDnCZx4WSJQkgC6gRuUpQkgaXTbyoMOACZ1QclEd46Apbh1JgKJojU4oHVLykQ0d6iLJdcqpp31XHioyXOMBTim3kE\u002B4JsiagDXxrCcMJsXKcU0QpgqpqAUgDrKLdEwCpwxvFTU2MidwT4KCoymS7Qwpm0gArBgC0ICe5BGWNjVBuNHCVIJmExZHaVLQEN5Jtxs3KJ5ACaR3KITaBcjZhmjXVFRqcDojfWaOM\u002BCBBgAgDzRhgi5UTK7XHrGAk/E0WC72nzRUeI6irlxPchxGMDuyJVUvqPdxCosueBqUHSt0VR\u002B\u002BCS4lCXWm6C0\u002BoeCjc4k3JKhDyG6BC6qZsVcQRfuvlOa9rXULyXG5TWHNMVIariJ0UZcZumkASmJ4oh55JNJDgUM8oTF1rCVBOazeNygdXIFgopEXAlMqJxWkSQhdV5KJxkIZHNFTMqAm6NxOkqqSQZCPprSdeSJiXTS6jrAgSCoXViZgwoXVHO7TkwG5x3oN0c3UEF3Z9aINJ1K1gkLgDKiJ60iUdu5INPAJhpNLtVM07wsgFNxFkbae6NUxLThs6p7XCRMDVNI4kIgCN03TzIKebpt0i6YpmkHWylgCCNULQJuFJwjkmGnnmmkDimPihdJHJA7ng6iVARN9AnJjihk68ENM8losgDzaQUT3BAeasZ1LxshLgJlBccUzgYVQe\u002BJm4CNrmuGqqh14KW/GiLFsx5KKq9gsbqBz3nUlC4mYlUJzzOlkgbSgk8SU3DkiDsi4RKjaTEG6IuA5IHdJPchNigNS/VKEvO9JlQSOdyAUbnj6NkzjyTRIurhWtkW0OMysinfEYb/AFTnaeB4LusozPC5phRXwzjazmEXaeS8ugjlCmw9bEUahqYetUoPiN6m4tJHkscunOTXHnY9Z1UdSkH6hc5kG1DMQ4UMy3aFWPlZhjvGdF0rXbwkEEHSOK8943jfd3ll8Kjqb6V23byQtcHi4gq8RwKgrUA67bHuUVDBBsVI154qHrsO68GOacg6gyipXCUJZZAHEHVSMqAoiFzSEKtkNcFE\u002BkRpcIqMEIt0aoSCE7XXuiGNjCEgFSkAqNwIQCQRolvc04PNIgFABYCZBgpS/uRCxTyFQYtxTEjmoS4xqmLxFit6iZ1TkEBe4m5soy9BvEnuQSlyHeQE3sUPWJsmJpy9xNkTWOeL2T0gRfijgk8VcZ0BY0cZ8Eg5rZgKTo73lSsoMAkiUFQlzjACT6bwBM\u002BCvNa1vZbCao2RoiKLaJImUTcPfVSkRwRtcY0hADaLQbmULmDeUjnXhoTAOmSQEEe7NgCjbTgXKkAA0SOkEogA0Dgim0BqZwgcU1N/WgoGG8XQjDLKRovohcWtmXAIaCIQVCIVariHAkbwhB8IZHWdJVE772lBvcAFUq4s/MCgfiajnawi40HVGtkkhVqmIBdDZCqucTrdIEgIYkdUcW9pADvmHFMbDWVEXAGUFthAsQE8xqVW6Q/NBQuc6byiJKr2mRMlRE2sh3k0\u002BSoLUXTECeKEHvTkjTVFwU9yY30KBzjEAqMuPNUGTwTF0JgeafUW4KEIgkaIXBwCMEpnSdRKKjaSEznHVDUJa6DaVGXk6qoPfKbfMaIQOSKDFggRJI5BDuucZBUgbw1UjGHkiagayJm6IUmi\u002BqnFO3JE1jYVTUEQLaJBh01lTuaDbRC07jpCBm4c84UraQGpupGuDxPFIWuiI3tjRCfBTGCLkKF5jslAxBjRBugG6KfpapOCBju8EmpvUk0iTdARE96K5bogLhzQl54GEBl4FolA4uM2hCTeSUxqQFQosSo3GLJF/io3G/cqhzEJNdaNE0ToUiO9EFfgExdHkmlC4BAzoJlD3ohGiEk6cFYE6SNUBHW1REjmmdu6gygB0gpB0alIkmyGOaBGpdC64mUrREXS3TEQqBjvSAKkDLQSnayTBsiIgEYYTzCkDBHgna5wsik2lZH0YixITgyi0UXEO4Qb6LYyTPsTljDRLBiKGoaXQWnuPLuWcTPJRkXkKWb7VZc8PSMrzDD5jhxWw7xMdZhPWYeRVwaLy/B4nEYWuK\u002BGqOp1WyAR9oNiuvyLaKjiaXR4\u002BoyhXb849Vjx4nQ9y4c\u002Bnnh14898t6q0ObBCrPpup3ZfuVprw4AggtOhHFPAK5tqTSHmNDyTOaQrFWi0mW2Kgl7DFQW5oGZUI1U7XhwURYHCW3QXaUEzmyonMupGVQYBUhDTogq3BS3p1UrmC9lEWoGc20hNpqiEiycgEIBS3UxBCUlWCqXEpX5I20xxaVIKR1hdHPUIElPuEqbdIUgpzqiartpwna0Kw2m0G5TimJkNRELWu4DzUgCkIMaFIMMXsgYa6JEgapQeEp908UAucOCbdc/wUtJrSLhGXAWARYhNIAC6B4A4qao9ogEhV6jgeKIaYNoTEieaEuaNXgKGpiKbQbg\u002BCYLExfQJnV6bRdZ78S5whtlC8uNySVcVffjGTAF/FROxTWvEuvyVM9\u002BqDcBMlEaD8daxVd\u002BKe6bKqCG96B1R14smKOo57jd0JA2uo2Azco7K4piTCa2qTiJuULntHFAc2vZJz2kXOirF8lLrFBM6raAFHvAukpjTPEpFrWieKIlkDQQk43vCg33GEi6TxUB8U0zIAS\u002Bb3pgR4IhoITwISkSE4AJMKiODvG9kA7VypuajqNkWN0Ak6iyZroMSonNPekG7o1uqqd9VogBRVKxmAFEWy4Xupm0mgy66YITvvJKNlI8VYaALAIgByKIhawAQSpAwOACfdtMJ224IDaxrRCewuLpepIROoRCEG\u002BiayedUEq6C10TQZgpGITlNDN3mm2iPeQiTqmmJTQUCCFGbDREXQOaE6XKgYneHJC4nXgndyTQqgN\u002BUgZ8EntEoZIGoQGRxCBzwEO8YQOKsgdzpNrJi7mgm6F2syriCc6NE07wQAT3JpDb7yuCUOITgngAg3t4W14p946SFMDpw6AhkDgmLp0QIwhOiRTTCqYFzRqLlM4X0TuM6BMJnVQMJ4JWGqR1ixSaNUDiDFk4aTpYJbsXlECIVIdovEIizihuDZE0zYqqRAPBJrQAkE5PfKJQFsXBSDueqOOrqgcG\u002BaBOdOibU3KG0pxqoaI2CYzFzKYl3EaIH1WNFyCVRt5LtBisvDaFQHEYcWDCYLR3H7Pcuzy3HYXH0OmwtTfAs4GxaeRC8saMTinlmHovfw6rZXZ7E4PE5dTruxJbvVi07oMxE/euHU4zNdenyt9nVG6BzARBRAgiQnMri6qrqTmEuafJMC19jYqzrqo6tEG41QQPpkGyYPLTdEXPZZwkc0juuuCCgOm8FE5oIsoILTZOyqRYoHcyyDRTyHNQObyQBYod0onNIQw5AdhoEjpZOSEJK6uJiAj4KMyjFwgcG6kbBCh\u002BdqpGmBPBFiSwFk3FCXyU\u002B8IlFFxQvLYIQVKgA7QVSrXiboix0m5MKF9YySSqr8SeFz3KJz6jwgsVK7QJlVqmKcTYKKqCAJKhMjjZVEj6hdqSmF0hETCU94CauCDQiBG7YKHpWAkFw9aF1cRDLoo6trwoXPumfUe\u002BxQVNNbohF17lA586JNbzKKBCsBNe0Nuk6oD2Qo4jUJwfJAiCTcqKoIdEqaROoQkSbpohDSDJKNriDZEQ3xTNQGTa2iEkDUSnme5MdLGUELnCU2\u002BJsk8CVHBmyYJhvOKMNtcpqL7aKUdbgogHMtITbpGimDR3pERdBC47oiFEA5xN4VhzZMlCQIsroiFONTKZ9OdCpdNEwM6hURsoExcKQUw03MpxIPZICJwugQAGgTOCe3BCSil81C4k2hEIhJkb3WFkZhmmTEFStpE62UzQ2AWgJ\u002BtqioH0iNFEIGoVy51Kq1qe6ZCIHeGieQOKAgaoXAi6ol70JIm5hROqOTbx4iFMEjnt4ISS4aoZAFymL28PeqJJGhKYkc1EXSJTam5VxNE4gG6A3KeOYQ7wF7JiaLTVBUHVJEJnVHcEBJIuqGdcWQuBARAxrZCXDmriaAuMIRpdIkHhKUSNVVODGhUrTbUKGITyR2VETSJugLgDxTAPcb2ThkamU0CXymBHiiLSCbShA7kUUSmIPkloU4ubpgQjkmmTZPraE2iAiLaBNBI4J7c0PFEogZsnIPAodE4PBUELJAwe5MCnbBBQOXGLaIHe1KI4wFHVr0md5hREkTqAoqlVlN0anuQ0aeOxjgKFCo5pOobb16Lcy7Zxo6\u002BNmo8/NaSAPNS8pPLU42\u002BGHS\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\u002B86zVu5Xs5Spw7FRXf9H5o\u002B9dFRwjWwA2yuUqAHCFz5dS11nTkU6WEGkQFbo0N0Kw1rWnRFC5OgQwBM4I7hKEFSrRm7bFSYfEmmdyoD4qYhQ1abXai6C8wh7ZCFzVnUqtSg\u002BJlq0KNRtVkgogCI1TRClcLICIKBAg2ThARdO13NAaTmyEk4MIInsIQgkG6sGCEDmhDQhwOqRMIS2NE0oqQGydANLIgZRDOYHeKi6AdynMgppRXKb1kIsoy880LnkmJXdxSVKgb4qLpHlA/XWUxceOiiiLwBcqM1RwkqN93JNaYlVBElyJC0GE\u002BgsENPI5IHuGiIgyETKLZkpBEAOAUrZDbhG1rW6BO4ki6CK5TEc0RBlA43RcO09ZSIGMcXTCVXfaiCLggdUDbxKCTGqAumxCAzVLjYQmEkzqm3XckTLFEORzTgWTxN0TWkiAoSmCkaZbZJlIAdYqSAAgG6QaDcpNJJ0TkwdEWGqNbu2UO6VMXTqEExwQ9jBsXTPE3CModOC0iNriH3UgMqN/NKmeEwiJBxSNx3oXPDRAMlIGUDumLodOCRkhK4iUUVJ5D4KnJAEkhVN66ao8kRKYlWXVWkWUbnkiCVAx3JSEiFcQ4QvYYsUzqrWjvUNSu52gsriGLokHVCCXXQSXEyiaYVDnW4Tdyd5EIZ4ommeARCANE6qQxrKB1\u002BEKxDE9XdQOKMRHeheJCICQkSOCHVOTyCoQdwTeCTWunRSMpC8zKi4AXFlIKciSia3kE\u002Blgo1gd1o0RyAmi0puKCQPIsUQI1KhGqkY\u002BRBUsURJT6BME5ss4pOg8ExlIweCcx3hEMDYzKUBMYSk8AEA1GiLKM2Uzoi6jcG87qwAXSRAT34hJoBsU4EC2q0YTd6CCn3bc0LnhrZcYVari7EMHmqLTyGtkmyrVsSB1WzKlwOX4zHkESyn9Jwt5c10GX5Dh6NRryHVXji7h5LHLnIs43kwMHleOxvW3dxmoc\u002BQD4LfyrZ\u002BhQAfUYKtXi52g8At2hhBxBV2hQAC5cupa6cenIpUcIRchW6WGgcFaa0DQJ1z10A1gCcgokkAC6WichIHmgeJQkHgnNkkAmQh1UhQwoInskFV4fSdLfUrhBCBzQ5US4bEsqgNNnKdzZ0WY6mWu3m2Ks4bEmdyoiJy26jc1WCARI0UbhCCNp4I0BHFOHcEUSc3Q6hNcIhOCEtRtKcoIdE8yncEGiCQOI10T7zUAKUDmorjCHtMEXCcNcReySS7uKOod06SgIc43SSVU\u002B7KcCGpJKMhhFFkklVh2t60oxAMlJJQNvX5pO3iNUkkIBwgRdTMa3cBSSRRAjRR1QDrKSSJUYDQNEnRwCSSqHY0usTZGGAFJJSgrAQommHFJJIJjAEpi\u002BUkkAfORGYSSVxQmdAkA6EklUOEuEJJIiGoAFFGshJJXFMLGyNhMWSSQh3k2uhD78SkkolC55JkiyGZmySSqUBfBhC\u002Bo4jVJJaQMk3RGOaSSqB6RoMDVCSSkkmFIFESCkkogSbwAmm0pJKhjUaAZBKA1J0CSSRThhNzZG1ob3pJKLINrSdBCdzTMJJIQwEJEGJSSRcDqU5g2SSRDHuCQk6HRJJBIOtYlPHekks1acGE2s8EkkDacQUi8NEBJJJE\u002B0Z3im3BvCQkktBVnsp8VWqYlxtTGqSSpVzBZLj8W3fe0Um83zJ8vvhb2AyGjh2AhgfU\u002Bm7XySSXDnzu47ceEXqWHdQfJEha\u002BFY17QREpJLnW57rAphuiIBJJQJJJJFEmSSU0MQmISSSBrp0klQybRJJQKZQkJJKhoso6lOUkkCoV3UXQ67Vca5tUS1JJALmoS2ySSBrhEDKSSBEXlNKSSgUpnNSSVQybq80kkWP/Z","FileName":"scaled_9ed91d23-f481-4ffa-bd9f-0c510fb9c5404267410108312303192.jpg","ContentType":"image/jpeg","SizeInBytes":80493,"Description":null,"CreatedAt":"2025-09-17T15:46:21.1954009Z","UploadedAt":"2025-09-17T15:46:21.1952323Z","ModifiedAt":null}
2025-09-17 18:46:21.261 |         : Infrastructure.Persistence.Entities.LeadImageDocument
2025-09-17 18:46:21.261 |         : 3d647cb4-37d9-48b8-a814-975527ee6cde
2025-09-17 18:46:21.261 |         : 0199585a-f993-43d7-b514-b31e3ac73231
2025-09-17 18:46:21.274 | dbug: Marten.IDocumentStore[1447359584]
2025-09-17 18:46:21.274 |       Persisted 1 updates in 26.364 ms, 0 inserts, and 0 deletions
2025-09-17 18:46:21.287 | info: Npgsql.Command[2001]
2025-09-17 18:46:21.287 |       Command execution completed (duration=4ms): select public.mt_update_leaddocument($1,$2,$3,$4)
2025-09-17 18:46:21.287 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:21.287 |       Marten executed in 4.4291 ms, SQL: select public.mt_update_leaddocument($1,$2,$3,$4)
2025-09-17 18:46:21.287 |         : {"Id":"ccf1ee4d-e60c-4365-add1-282f75b0e418","Name":"Bob Beta","Email":"bob.beta@example.com","Phone":"\u002B1122334455","Status":1,"CreatedAt":"2025-09-17T12:37:17.6750367Z","UpdatedAt":"2025-09-17T15:46:21.1957341Z","ImageCount":1}
2025-09-17 18:46:21.287 |         : Infrastructure.Persistence.Entities.LeadDocument
2025-09-17 18:46:21.287 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:21.287 |         : 0199585a-f9e1-4096-a23a-01f403e69230
2025-09-17 18:46:21.291 | dbug: Marten.IDocumentStore[1447359584]
2025-09-17 18:46:21.291 |       Persisted 1 updates in 7.7204 ms, 0 inserts, and 0 deletions
2025-09-17 18:46:42.665 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:42.665 |       Marten executed in 2.6041 ms, SQL: select d.id, d.data from public.mt_doc_leadimagedocument as d where id = $1
2025-09-17 18:46:42.665 |         : 3d647cb4-37d9-48b8-a814-975527ee6cde
2025-09-17 18:46:42.665 | info: Npgsql.Command[2001]
2025-09-17 18:46:42.665 |       Command execution completed (duration=3ms): select d.id, d.data from public.mt_doc_leadimagedocument as d where id = $1
2025-09-17 18:46:42.668 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 18:46:42.668 |       Marten executed in 1.0955 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:42.668 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 18:46:42.668 | info: Npgsql.Command[2001]
2025-09-17 18:46:42.668 |       Command execution completed (duration=1ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 18:46:42.680 | fail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]
2025-09-17 18:46:42.680 |       An unhandled exception has occurred while executing the request.
2025-09-17 18:46:42.680 |       System.InvalidOperationException: Image with ID 3d647cb4-37d9-48b8-a814-975527ee6cde not found.
2025-09-17 18:46:42.680 |          at Application.Image.Commands.DeleteImage.DeleteImageCommandHandler.Handle(DeleteImageCommand request, CancellationToken cancellationToken) in /app/Application/Image/Commands/DeleteImage/DeleteImageCommandHandler.cs:line 49
2025-09-17 18:46:42.680 |          at API.Modules.LeadImageModule.DeleteImage(Guid leadId, Guid imageId, ISender sender, CancellationToken cancellationToken) in /app/API/Modules/LeadImageModule.cs:line 125
2025-09-17 18:46:42.680 |          at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
2025-09-17 18:46:42.680 |          at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
2025-09-17 18:46:42.680 |          at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
2025-09-17 18:46:42.680 |          at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-09-17 19:06:04.725 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:04.725 |       Marten executed in 11.1793 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d;
2025-09-17 19:06:04.725 |       
2025-09-17 19:06:04.726 | info: Npgsql.Command[2001]
2025-09-17 19:06:04.726 |       Command execution completed (duration=4ms): select d.id, d.data from public.mt_doc_leaddocument as d
2025-09-17 19:06:04.732 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:04.732 |       Marten executed in 4.5734 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:04.732 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:06:04.732 | info: Npgsql.Command[2001]
2025-09-17 19:06:04.732 |       Command execution completed (duration=4ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:04.734 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:04.734 |       Marten executed in 1.2399 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:04.734 |         : f91e8528-c438-4beb-9646-722709ffaf02
2025-09-17 19:06:04.734 | info: Npgsql.Command[2001]
2025-09-17 19:06:04.734 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:04.735 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:04.735 |       Marten executed in 0.6686 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:04.735 |         : 59c9996f-6dc5-4585-8e5b-427b30eddc1a
2025-09-17 19:06:04.735 | info: Npgsql.Command[2001]
2025-09-17 19:06:04.735 |       Command execution completed (duration=0ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:09.267 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:09.267 |       Marten executed in 0.7275 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:06:09.267 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:06:09.267 | info: Npgsql.Command[2001]
2025-09-17 19:06:09.267 |       Command execution completed (duration=0ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:06:09.274 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:09.274 |       Marten executed in 0.9206 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:06:09.274 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:06:09.274 | info: Npgsql.Command[2001]
2025-09-17 19:06:09.274 |       Command execution completed (duration=1ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:06:09.685 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:09.685 |       Marten executed in 1.1304 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:09.685 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:06:09.685 | info: Npgsql.Command[2001]
2025-09-17 19:06:09.685 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:09.689 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:09.689 |       Marten executed in 2.9723 ms, SQL: select d.id, d.data from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1 OFFSET $2 LIMIT $3;
2025-09-17 19:06:09.689 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:06:09.689 |         : 0
2025-09-17 19:06:09.689 |         : 5
2025-09-17 19:06:09.691 | info: Npgsql.Command[2001]
2025-09-17 19:06:09.691 |       Command execution completed (duration=4ms): select d.id, d.data from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1 OFFSET $2 LIMIT $3;
2025-09-17 19:06:09.709 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:09.709 |       Marten executed in 1.0737 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:09.709 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:06:09.709 | info: Npgsql.Command[2001]
2025-09-17 19:06:09.709 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:06:14.493 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:14.493 |       Marten executed in 2.901 ms, SQL: select d.id, d.data from public.mt_doc_leadimagedocument as d where id = $1
2025-09-17 19:06:14.493 |         : 3d647cb4-37d9-48b8-a814-975527ee6cde
2025-09-17 19:06:14.495 | info: Npgsql.Command[2001]
2025-09-17 19:06:14.495 |       Command execution completed (duration=4ms): select d.id, d.data from public.mt_doc_leadimagedocument as d where id = $1
2025-09-17 19:06:14.495 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:06:14.495 |       Marten executed in 0.7336 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:06:14.495 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:06:14.496 | info: Npgsql.Command[2001]
2025-09-17 19:06:14.496 |       Command execution completed (duration=1ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:06:14.497 | fail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]
2025-09-17 19:06:14.497 |       An unhandled exception has occurred while executing the request.
2025-09-17 19:06:14.497 |       System.InvalidOperationException: Image with ID 3d647cb4-37d9-48b8-a814-975527ee6cde not found.
2025-09-17 19:06:14.497 |          at Application.Image.Commands.DeleteImage.DeleteImageCommandHandler.Handle(DeleteImageCommand request, CancellationToken cancellationToken) in /app/Application/Image/Commands/DeleteImage/DeleteImageCommandHandler.cs:line 49
2025-09-17 19:06:14.497 |          at API.Modules.LeadImageModule.DeleteImage(Guid leadId, Guid imageId, ISender sender, CancellationToken cancellationToken) in /app/API/Modules/LeadImageModule.cs:line 125
2025-09-17 19:06:14.497 |          at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
2025-09-17 19:06:14.497 |          at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
2025-09-17 19:06:14.497 |          at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
2025-09-17 19:06:14.497 |          at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-09-17 19:09:39.913 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:09:39.914 |       Application is shutting down...
2025-09-17 19:09:43.313 | warn: Microsoft.AspNetCore.Hosting.Diagnostics[15]
2025-09-17 19:09:43.313 |       Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'http://+:5000'.
2025-09-17 19:09:43.352 | info: Microsoft.Hosting.Lifetime[14]
2025-09-17 19:09:43.352 |       Now listening on: http://[::]:5000
2025-09-17 19:09:43.352 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:09:43.352 |       Application started. Press Ctrl+C to shut down.
2025-09-17 19:09:43.352 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:09:43.352 |       Hosting environment: Development
2025-09-17 19:09:43.352 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:09:43.352 |       Content root path: /app
2025-09-17 19:25:56.012 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:25:56.012 |       Application is shutting down...
2025-09-17 19:25:57.899 | warn: Microsoft.AspNetCore.Hosting.Diagnostics[15]
2025-09-17 19:25:57.900 |       Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'http://+:5000'.
2025-09-17 19:25:57.963 | info: Microsoft.Hosting.Lifetime[14]
2025-09-17 19:25:57.963 |       Now listening on: http://[::]:5000
2025-09-17 19:25:57.963 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:25:57.963 |       Application started. Press Ctrl+C to shut down.
2025-09-17 19:25:57.963 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:25:57.963 |       Hosting environment: Development
2025-09-17 19:25:57.963 | info: Microsoft.Hosting.Lifetime[0]
2025-09-17 19:25:57.963 |       Content root path: /app
2025-09-17 19:28:35.178 | warn: LuckyPennySoftware.MediatR.License[0]
2025-09-17 19:28:35.179 |       You do not have a valid license key for the Lucky Penny software MediatR. This is allowed for development and testing scenarios. If you are running in production you are required to have a licensed version. Please visit https://luckypennysoftware.com to obtain a valid license.
2025-09-17 19:28:39.667 | info: Npgsql.Command[2001]
2025-09-17 19:28:39.667 |       Batch execution completed (duration=23ms): [
2025-09-17 19:28:39.667 |       SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.667 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.667 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.667 |                    ,n.nspname
2025-09-17 19:28:39.667 |                    ,p.proname
2025-09-17 19:28:39.667 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.667 |       FROM   pg_proc p
2025-09-17 19:28:39.667 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.667 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.668 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.668 |                    ,n.nspname
2025-09-17 19:28:39.668 |                    ,p.proname
2025-09-17 19:28:39.668 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.668 |       FROM   pg_proc p
2025-09-17 19:28:39.668 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.668 |       WHERE  p.proname = $1
2025-09-17 19:28:39.668 |       AND    n.nspname = $2]
2025-09-17 19:28:39.753 | info: Npgsql.Command[2001]
2025-09-17 19:28:39.753 |       Batch execution completed (duration=73ms): [
2025-09-17 19:28:39.753 |       select column_name, data_type, character_maximum_length, udt_name
2025-09-17 19:28:39.753 |       from information_schema.columns where table_schema = $1 and table_name = $2
2025-09-17 19:28:39.753 |       order by ordinal_position, select kcu.column_name as key_column
2025-09-17 19:28:39.753 |       from information_schema.table_constraints tco
2025-09-17 19:28:39.753 |                join information_schema.key_column_usage kcu
2025-09-17 19:28:39.753 |                     on kcu.constraint_name = tco.constraint_name
2025-09-17 19:28:39.753 |                         and kcu.constraint_schema = tco.constraint_schema
2025-09-17 19:28:39.753 |                         and kcu.constraint_name = tco.constraint_name
2025-09-17 19:28:39.753 |       where tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2
2025-09-17 19:28:39.753 |       order by kcu.ordinal_position, SELECT *
2025-09-17 19:28:39.753 |       FROM (
2025-09-17 19:28:39.753 |           SELECT
2025-09-17 19:28:39.753 |             R.rolname                AS user_name,
2025-09-17 19:28:39.753 |             ns.nspname               AS schema_name,
2025-09-17 19:28:39.753 |             pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,
2025-09-17 19:28:39.753 |             i.relname                AS index_name,
2025-09-17 19:28:39.753 |             pg_get_indexdef(i.oid) as ddl,
2025-09-17 19:28:39.753 |             idx.indisunique          AS is_unique,
2025-09-17 19:28:39.753 |             idx.indisprimary         AS is_primary,
2025-09-17 19:28:39.753 |             am.amname                AS index_type,
2025-09-17 19:28:39.753 |             idx.indkey,
2025-09-17 19:28:39.753 |                  ARRAY(
2025-09-17 19:28:39.753 |                      SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)
2025-09-17 19:28:39.753 |                      FROM
2025-09-17 19:28:39.753 |                        generate_subscripts(idx.indkey, 1) AS k
2025-09-17 19:28:39.753 |                      ORDER BY k
2025-09-17 19:28:39.753 |                  ) AS index_keys,
2025-09-17 19:28:39.753 |             (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,
2025-09-17 19:28:39.753 |             idx.indpred IS NOT NULL AS is_partial
2025-09-17 19:28:39.753 |           FROM pg_index AS idx
2025-09-17 19:28:39.753 |             JOIN pg_class AS i
2025-09-17 19:28:39.753 |               ON i.oid = idx.indexrelid
2025-09-17 19:28:39.753 |             JOIN pg_am AS am
2025-09-17 19:28:39.753 |               ON i.relam = am.oid
2025-09-17 19:28:39.753 |             JOIN pg_namespace AS NS ON i.relnamespace = NS.OID
2025-09-17 19:28:39.753 |             JOIN pg_roles AS R ON i.relowner = r.oid
2025-09-17 19:28:39.753 |           WHERE
2025-09-17 19:28:39.753 |             nspname = $1 AND
2025-09-17 19:28:39.753 |             NOT nspname LIKE 'pg%'
2025-09-17 19:28:39.753 |       ) ind
2025-09-17 19:28:39.753 |       WHERE
2025-09-17 19:28:39.753 |             ind.table_name = $2 OR
2025-09-17 19:28:39.753 |             ind.table_name = $3, SELECT c.conname                                     AS constraint_name,
2025-09-17 19:28:39.753 |              c.contype                                     AS constraint_type,
2025-09-17 19:28:39.753 |              sch.nspname                                   AS schema_name,
2025-09-17 19:28:39.753 |              tbl.relname                                   AS table_name,
2025-09-17 19:28:39.753 |              ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,
2025-09-17 19:28:39.753 |              pg_get_constraintdef(c.oid)                   AS definition
2025-09-17 19:28:39.753 |       FROM pg_constraint c
2025-09-17 19:28:39.753 |              JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE
2025-09-17 19:28:39.753 |              JOIN pg_class tbl ON tbl.oid = c.conrelid
2025-09-17 19:28:39.753 |              JOIN pg_namespace sch ON sch.oid = tbl.relnamespace
2025-09-17 19:28:39.753 |              JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)
2025-09-17 19:28:39.753 |       WHERE
2025-09-17 19:28:39.753 |       	c.contype = 'f' and
2025-09-17 19:28:39.753 |       	sch.nspname = $1 and
2025-09-17 19:28:39.753 |       	tbl.relname = $2
2025-09-17 19:28:39.753 |       GROUP BY constraint_name, constraint_type, schema_name, table_name, definition, SHOW max_identifier_length, select
2025-09-17 19:28:39.753 |           col.column_name,
2025-09-17 19:28:39.753 |           partition_strategy
2025-09-17 19:28:39.753 |       from
2025-09-17 19:28:39.753 |           (select
2025-09-17 19:28:39.753 |                partrelid,
2025-09-17 19:28:39.753 |                partnatts,
2025-09-17 19:28:39.753 |                case partstrat
2025-09-17 19:28:39.753 |                    when 'l' then 'list'
2025-09-17 19:28:39.753 |                    when 'h' then 'hash'
2025-09-17 19:28:39.753 |                    when 'r' then 'range' end as partition_strategy,
2025-09-17 19:28:39.753 |                unnest(partattrs) column_index
2025-09-17 19:28:39.753 |            from
2025-09-17 19:28:39.753 |                pg_partitioned_table) pt
2025-09-17 19:28:39.753 |               join
2025-09-17 19:28:39.753 |           pg_class par
2025-09-17 19:28:39.753 |           on
2025-09-17 19:28:39.753 |                   par.oid = pt.partrelid
2025-09-17 19:28:39.753 |               join
2025-09-17 19:28:39.753 |           information_schema.columns col
2025-09-17 19:28:39.753 |           on
2025-09-17 19:28:39.753 |                       col.table_schema = par.relnamespace::regnamespace::text
2025-09-17 19:28:39.753 |                   and col.table_name = par.relname
2025-09-17 19:28:39.753 |                   and ordinal_position = pt.column_index
2025-09-17 19:28:39.753 |       where
2025-09-17 19:28:39.753 |           col.table_schema = $1 and table_name = $2
2025-09-17 19:28:39.753 |       order by column_index, select pt.relname as partition_name,
2025-09-17 19:28:39.753 |                 pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression
2025-09-17 19:28:39.753 |          from pg_class base_tb
2025-09-17 19:28:39.753 |                   join pg_inherits i on i.inhparent = base_tb.oid
2025-09-17 19:28:39.753 |                   join pg_class pt on pt.oid = i.inhrelid
2025-09-17 19:28:39.753 |          where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.753 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.753 |                    ,n.nspname
2025-09-17 19:28:39.753 |                    ,p.proname
2025-09-17 19:28:39.753 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.753 |       FROM   pg_proc p
2025-09-17 19:28:39.753 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.753 |       WHERE  p.proname = $1
2025-09-17 19:28:39.753 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.753 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.753 |                    ,n.nspname
2025-09-17 19:28:39.753 |                    ,p.proname
2025-09-17 19:28:39.753 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.753 |       FROM   pg_proc p
2025-09-17 19:28:39.753 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.753 |       WHERE  p.proname = $1
2025-09-17 19:28:39.753 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:39.753 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:39.753 |                    ,n.nspname
2025-09-17 19:28:39.753 |                    ,p.proname
2025-09-17 19:28:39.753 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:39.753 |       FROM   pg_proc p
2025-09-17 19:28:39.753 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:39.753 |       WHERE  p.proname = $1
2025-09-17 19:28:39.753 |       AND    n.nspname = $2]
2025-09-17 19:28:39.776 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:28:39.776 |       Marten executed in 2.795 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d;
2025-09-17 19:28:39.776 |       
2025-09-17 19:28:39.804 | info: Npgsql.Command[2001]
2025-09-17 19:28:39.804 |       Command execution completed (duration=34ms): select d.id, d.data from public.mt_doc_leaddocument as d
2025-09-17 19:28:40.310 | info: Npgsql.Command[2001]
2025-09-17 19:28:40.310 |       Batch execution completed (duration=16ms): [
2025-09-17 19:28:40.310 |       select column_name, data_type, character_maximum_length, udt_name
2025-09-17 19:28:40.310 |       from information_schema.columns where table_schema = $1 and table_name = $2
2025-09-17 19:28:40.310 |       order by ordinal_position, select kcu.column_name as key_column
2025-09-17 19:28:40.310 |       from information_schema.table_constraints tco
2025-09-17 19:28:40.310 |                join information_schema.key_column_usage kcu
2025-09-17 19:28:40.310 |                     on kcu.constraint_name = tco.constraint_name
2025-09-17 19:28:40.310 |                         and kcu.constraint_schema = tco.constraint_schema
2025-09-17 19:28:40.310 |                         and kcu.constraint_name = tco.constraint_name
2025-09-17 19:28:40.310 |       where tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2
2025-09-17 19:28:40.310 |       order by kcu.ordinal_position, SELECT *
2025-09-17 19:28:40.310 |       FROM (
2025-09-17 19:28:40.310 |           SELECT
2025-09-17 19:28:40.310 |             R.rolname                AS user_name,
2025-09-17 19:28:40.310 |             ns.nspname               AS schema_name,
2025-09-17 19:28:40.310 |             pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,
2025-09-17 19:28:40.310 |             i.relname                AS index_name,
2025-09-17 19:28:40.310 |             pg_get_indexdef(i.oid) as ddl,
2025-09-17 19:28:40.310 |             idx.indisunique          AS is_unique,
2025-09-17 19:28:40.310 |             idx.indisprimary         AS is_primary,
2025-09-17 19:28:40.310 |             am.amname                AS index_type,
2025-09-17 19:28:40.310 |             idx.indkey,
2025-09-17 19:28:40.310 |                  ARRAY(
2025-09-17 19:28:40.310 |                      SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)
2025-09-17 19:28:40.310 |                      FROM
2025-09-17 19:28:40.310 |                        generate_subscripts(idx.indkey, 1) AS k
2025-09-17 19:28:40.310 |                      ORDER BY k
2025-09-17 19:28:40.310 |                  ) AS index_keys,
2025-09-17 19:28:40.310 |             (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,
2025-09-17 19:28:40.310 |             idx.indpred IS NOT NULL AS is_partial
2025-09-17 19:28:40.310 |           FROM pg_index AS idx
2025-09-17 19:28:40.310 |             JOIN pg_class AS i
2025-09-17 19:28:40.310 |               ON i.oid = idx.indexrelid
2025-09-17 19:28:40.310 |             JOIN pg_am AS am
2025-09-17 19:28:40.310 |               ON i.relam = am.oid
2025-09-17 19:28:40.310 |             JOIN pg_namespace AS NS ON i.relnamespace = NS.OID
2025-09-17 19:28:40.310 |             JOIN pg_roles AS R ON i.relowner = r.oid
2025-09-17 19:28:40.310 |           WHERE
2025-09-17 19:28:40.310 |             nspname = $1 AND
2025-09-17 19:28:40.310 |             NOT nspname LIKE 'pg%'
2025-09-17 19:28:40.310 |       ) ind
2025-09-17 19:28:40.310 |       WHERE
2025-09-17 19:28:40.310 |             ind.table_name = $2 OR
2025-09-17 19:28:40.310 |             ind.table_name = $3, SELECT c.conname                                     AS constraint_name,
2025-09-17 19:28:40.310 |              c.contype                                     AS constraint_type,
2025-09-17 19:28:40.310 |              sch.nspname                                   AS schema_name,
2025-09-17 19:28:40.311 |              tbl.relname                                   AS table_name,
2025-09-17 19:28:40.311 |              ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,
2025-09-17 19:28:40.311 |              pg_get_constraintdef(c.oid)                   AS definition
2025-09-17 19:28:40.311 |       FROM pg_constraint c
2025-09-17 19:28:40.311 |              JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE
2025-09-17 19:28:40.311 |              JOIN pg_class tbl ON tbl.oid = c.conrelid
2025-09-17 19:28:40.311 |              JOIN pg_namespace sch ON sch.oid = tbl.relnamespace
2025-09-17 19:28:40.311 |              JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)
2025-09-17 19:28:40.311 |       WHERE
2025-09-17 19:28:40.311 |       	c.contype = 'f' and
2025-09-17 19:28:40.311 |       	sch.nspname = $1 and
2025-09-17 19:28:40.311 |       	tbl.relname = $2
2025-09-17 19:28:40.311 |       GROUP BY constraint_name, constraint_type, schema_name, table_name, definition, SHOW max_identifier_length, select
2025-09-17 19:28:40.311 |           col.column_name,
2025-09-17 19:28:40.311 |           partition_strategy
2025-09-17 19:28:40.311 |       from
2025-09-17 19:28:40.311 |           (select
2025-09-17 19:28:40.311 |                partrelid,
2025-09-17 19:28:40.311 |                partnatts,
2025-09-17 19:28:40.311 |                case partstrat
2025-09-17 19:28:40.311 |                    when 'l' then 'list'
2025-09-17 19:28:40.311 |                    when 'h' then 'hash'
2025-09-17 19:28:40.311 |                    when 'r' then 'range' end as partition_strategy,
2025-09-17 19:28:40.311 |                unnest(partattrs) column_index
2025-09-17 19:28:40.311 |            from
2025-09-17 19:28:40.311 |                pg_partitioned_table) pt
2025-09-17 19:28:40.311 |               join
2025-09-17 19:28:40.311 |           pg_class par
2025-09-17 19:28:40.311 |           on
2025-09-17 19:28:40.311 |                   par.oid = pt.partrelid
2025-09-17 19:28:40.311 |               join
2025-09-17 19:28:40.311 |           information_schema.columns col
2025-09-17 19:28:40.311 |           on
2025-09-17 19:28:40.311 |                       col.table_schema = par.relnamespace::regnamespace::text
2025-09-17 19:28:40.311 |                   and col.table_name = par.relname
2025-09-17 19:28:40.311 |                   and ordinal_position = pt.column_index
2025-09-17 19:28:40.311 |       where
2025-09-17 19:28:40.311 |           col.table_schema = $1 and table_name = $2
2025-09-17 19:28:40.311 |       order by column_index, select pt.relname as partition_name,
2025-09-17 19:28:40.311 |                 pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression
2025-09-17 19:28:40.311 |          from pg_class base_tb
2025-09-17 19:28:40.311 |                   join pg_inherits i on i.inhparent = base_tb.oid
2025-09-17 19:28:40.311 |                   join pg_class pt on pt.oid = i.inhrelid
2025-09-17 19:28:40.311 |          where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:40.311 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:40.311 |                    ,n.nspname
2025-09-17 19:28:40.311 |                    ,p.proname
2025-09-17 19:28:40.311 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:40.311 |       FROM   pg_proc p
2025-09-17 19:28:40.311 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:40.311 |       WHERE  p.proname = $1
2025-09-17 19:28:40.311 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:40.311 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:40.311 |                    ,n.nspname
2025-09-17 19:28:40.311 |                    ,p.proname
2025-09-17 19:28:40.311 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:40.311 |       FROM   pg_proc p
2025-09-17 19:28:40.311 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:40.311 |       WHERE  p.proname = $1
2025-09-17 19:28:40.311 |       AND    n.nspname = $2, SELECT pg_get_functiondef(pg_proc.oid)
2025-09-17 19:28:40.311 |       FROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2, SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'
2025-09-17 19:28:40.311 |                    ,n.nspname
2025-09-17 19:28:40.311 |                    ,p.proname
2025-09-17 19:28:40.311 |                    ,pg_get_function_identity_arguments(p.oid))
2025-09-17 19:28:40.311 |       FROM   pg_proc p
2025-09-17 19:28:40.311 |       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
2025-09-17 19:28:40.311 |       WHERE  p.proname = $1
2025-09-17 19:28:40.311 |       AND    n.nspname = $2]
2025-09-17 19:28:40.318 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:28:40.318 |       Marten executed in 4.0135 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:28:40.318 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:28:40.322 | info: Npgsql.Command[2001]
2025-09-17 19:28:40.322 |       Command execution completed (duration=8ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:28:40.325 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:28:40.325 |       Marten executed in 1.2374 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:28:40.325 |         : f91e8528-c438-4beb-9646-722709ffaf02
2025-09-17 19:28:40.325 | info: Npgsql.Command[2001]
2025-09-17 19:28:40.325 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:28:40.327 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:28:40.327 |       Marten executed in 0.8988 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:28:40.327 |         : 59c9996f-6dc5-4585-8e5b-427b30eddc1a
2025-09-17 19:28:40.327 | info: Npgsql.Command[2001]
2025-09-17 19:28:40.327 |       Command execution completed (duration=0ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:30:07.810 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:30:07.810 |       Marten executed in 6.0589 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:30:07.810 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:30:07.811 | info: Npgsql.Command[2001]
2025-09-17 19:30:07.811 |       Command execution completed (duration=7ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:30:07.820 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:30:07.820 |       Marten executed in 16.8007 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:30:07.820 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:30:07.821 | info: Npgsql.Command[2001]
2025-09-17 19:30:07.821 |       Command execution completed (duration=3ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:30:08.206 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:30:08.206 |       Marten executed in 1.6042 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:30:08.206 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:30:08.206 | info: Npgsql.Command[2001]
2025-09-17 19:30:08.206 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:30:08.214 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:30:08.215 |       Marten executed in 1.3973 ms, SQL: select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:30:08.215 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:30:08.215 | info: Npgsql.Command[2001]
2025-09-17 19:30:08.215 |       Command execution completed (duration=1ms): select count(*) as number from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1;
2025-09-17 19:30:08.216 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:30:08.216 |       Marten executed in 2.3468 ms, SQL: select d.id, d.data from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1 OFFSET $2 LIMIT $3;
2025-09-17 19:30:08.216 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:30:08.216 |         : 0
2025-09-17 19:30:08.216 |         : 5
2025-09-17 19:30:08.227 | info: Npgsql.Command[2001]
2025-09-17 19:30:08.227 |       Command execution completed (duration=16ms): select d.id, d.data from public.mt_doc_leadimagedocument as d where CAST(d.data ->> 'LeadId' as uuid) = $1 OFFSET $2 LIMIT $3;
2025-09-17 19:30:12.878 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:30:12.878 |       Marten executed in 2.3502 ms, SQL: select d.id, d.data from public.mt_doc_leadimagedocument as d where id = $1
2025-09-17 19:30:12.878 |         : 3d647cb4-37d9-48b8-a814-975527ee6cde
2025-09-17 19:30:12.878 | info: Npgsql.Command[2001]
2025-09-17 19:30:12.878 |       Command execution completed (duration=3ms): select d.id, d.data from public.mt_doc_leadimagedocument as d where id = $1
2025-09-17 19:30:12.881 | dbug: Marten.IDocumentStore[1535103852]
2025-09-17 19:30:12.881 |       Marten executed in 0.7686 ms, SQL: select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:30:12.881 |         : ccf1ee4d-e60c-4365-add1-282f75b0e418
2025-09-17 19:30:12.881 | info: Npgsql.Command[2001]
2025-09-17 19:30:12.881 |       Command execution completed (duration=0ms): select d.id, d.data from public.mt_doc_leaddocument as d where id = $1
2025-09-17 19:30:12.895 | fail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]
2025-09-17 19:30:12.895 |       An unhandled exception has occurred while executing the request.
2025-09-17 19:30:12.895 |       System.InvalidOperationException: Image with ID 3d647cb4-37d9-48b8-a814-975527ee6cde not found.
2025-09-17 19:30:12.895 |          at Application.Image.Commands.DeleteImage.DeleteImageCommandHandler.Handle(DeleteImageCommand request, CancellationToken cancellationToken) in /app/Application/Image/Commands/DeleteImage/DeleteImageCommandHandler.cs:line 49
2025-09-17 19:30:12.895 |          at API.Modules.LeadImageModule.DeleteImage(Guid leadId, Guid imageId, ISender sender, CancellationToken cancellationToken) in /app/API/Modules/LeadImageModule.cs:line 125
2025-09-17 19:30:12.895 |          at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
2025-09-17 19:30:12.895 |          at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
2025-09-17 19:30:12.895 |          at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
2025-09-17 19:30:12.895 |          at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)